
SMBus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b97c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000558  0800bb10  0800bb10  0000cb10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c068  0800c068  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c068  0800c068  0000d068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c070  0800c070  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c070  0800c070  0000d070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c074  0800c074  0000d074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c078  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  200001d4  0800c24c  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  0800c24c  0000e654  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000182ef  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321b  00000000  00000000  000264f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00029710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a3  00000000  00000000  0002add0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000250b1  00000000  00000000  0002bf73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019671  00000000  00000000  00051024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e57e3  00000000  00000000  0006a695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014fe78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076b0  00000000  00000000  0014febc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0015756c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800baf4 	.word	0x0800baf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800baf4 	.word	0x0800baf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart2
int _write(int fd, char *ptr, int len) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef hstatus;

    if (fd == 1 || fd == 2) {
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d002      	beq.n	8000ffc <_write+0x18>
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d111      	bne.n	8001020 <_write+0x3c>
        hstatus = HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001004:	68b9      	ldr	r1, [r7, #8]
 8001006:	4809      	ldr	r0, [pc, #36]	@ (800102c <_write+0x48>)
 8001008:	f005 fd2a 	bl	8006a60 <HAL_UART_Transmit>
 800100c:	4603      	mov	r3, r0
 800100e:	75fb      	strb	r3, [r7, #23]
        if (hstatus == HAL_OK)
 8001010:	7dfb      	ldrb	r3, [r7, #23]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d101      	bne.n	800101a <_write+0x36>
            return len;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	e004      	b.n	8001024 <_write+0x40>
        else
            return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800101e:	e001      	b.n	8001024 <_write+0x40>
    }
    return -1;
 8001020:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000380 	.word	0x20000380

08001030 <HAL_TIM_PeriodElapsedCallback>:

// TIM6 is used for ADC/DMA but we use the same to toggle the LED
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d115      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x3e>
        if (tim_cnt % 500 == 0)
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001048:	fba3 1302 	umull	r1, r3, r3, r2
 800104c:	095b      	lsrs	r3, r3, #5
 800104e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001052:	fb01 f303 	mul.w	r3, r1, r3
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b00      	cmp	r3, #0
 800105a:	d103      	bne.n	8001064 <HAL_TIM_PeriodElapsedCallback+0x34>
            HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800105c:	2108      	movs	r1, #8
 800105e:	4809      	ldr	r0, [pc, #36]	@ (8001084 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001060:	f003 f826 	bl	80040b0 <HAL_GPIO_TogglePin>
        tim_cnt++;
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800106c:	6013      	str	r3, [r2, #0]

    }
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40001000 	.word	0x40001000
 800107c:	200004ec 	.word	0x200004ec
 8001080:	10624dd3 	.word	0x10624dd3
 8001084:	48000400 	.word	0x48000400

08001088 <process_adc_buffer>:

// Process half a buffer full of data
static inline void process_adc_buffer(uint16_t *buffer) {
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

    // TODO removed floats / changed algorithm to int32 to avoid using the FPU in ISR which is bad!

    uint32_t sum1 = 0, sum2 = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e016      	b.n	80010cc <process_adc_buffer+0x44>
        sum1 += buffer[i * 2];
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	881b      	ldrh	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	4413      	add	r3, r2
 80010ae:	617b      	str	r3, [r7, #20]
        sum2 += buffer[1 + i * 2];
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	3301      	adds	r3, #1
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	881b      	ldrh	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4413      	add	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < ADC_SAMPLES; ++i) {
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	3301      	adds	r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2b09      	cmp	r3, #9
 80010d0:	dde5      	ble.n	800109e <process_adc_buffer+0x16>
    }

    // this is a simple time-averaged value of samples
    // it's ok to divide without a float here because it's by 100?  If this is a power of 2 is that better?
    temp_avg = sum1 / ADC_SAMPLES;
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	4a3f      	ldr	r2, [pc, #252]	@ (80011d4 <process_adc_buffer+0x14c>)
 80010d6:	fba2 2303 	umull	r2, r3, r2, r3
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b3e      	ldr	r3, [pc, #248]	@ (80011d8 <process_adc_buffer+0x150>)
 80010e0:	801a      	strh	r2, [r3, #0]
    vref_avg = sum2 / ADC_SAMPLES;
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4a3b      	ldr	r2, [pc, #236]	@ (80011d4 <process_adc_buffer+0x14c>)
 80010e6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ea:	08db      	lsrs	r3, r3, #3
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b3b      	ldr	r3, [pc, #236]	@ (80011dc <process_adc_buffer+0x154>)
 80010f0:	801a      	strh	r2, [r3, #0]

    // VDDA can be calculated based on the measured vref and the calibration data
    // removed the /1000 to avoid the float
    vdda = (((float)VREFINT_CAL_VREF * (float)*VREFINT_CAL_ADDR) / (float)vref_avg);
 80010f2:	4b3b      	ldr	r3, [pc, #236]	@ (80011e0 <process_adc_buffer+0x158>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010fe:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80011e4 <process_adc_buffer+0x15c>
 8001102:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001106:	4b35      	ldr	r3, [pc, #212]	@ (80011dc <process_adc_buffer+0x154>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001112:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001116:	4b34      	ldr	r3, [pc, #208]	@ (80011e8 <process_adc_buffer+0x160>)
 8001118:	edc3 7a00 	vstr	s15, [r3]

    // Knowing vdda and the resolution of adc - the actual voltage can be calculated
    vref = (vdda / ADC_RESOLUTION) * (float)vref_avg;
 800111c:	4b32      	ldr	r3, [pc, #200]	@ (80011e8 <process_adc_buffer+0x160>)
 800111e:	edd3 7a00 	vldr	s15, [r3]
 8001122:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80011ec <process_adc_buffer+0x164>
 8001126:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800112a:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <process_adc_buffer+0x154>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	ee07 3a90 	vmov	s15, r3
 8001132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113a:	4b2d      	ldr	r3, [pc, #180]	@ (80011f0 <process_adc_buffer+0x168>)
 800113c:	edc3 7a00 	vstr	s15, [r3]

 /*   // this is calibrated, but not scaled by the voltage offset
    temp = (float) (ta * temp_avg - tb);*/

    // TODO this seems to work-ish, however should follow the good advice of "don't do math in the ISR!"
    temp = ((temp_avg * (vdda * 1000) / VREFINT_CAL_VREF) - (int32_t)*TEMPSENSOR_CAL1_ADDR );
 8001140:	4b25      	ldr	r3, [pc, #148]	@ (80011d8 <process_adc_buffer+0x150>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114c:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <process_adc_buffer+0x160>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80011f4 <process_adc_buffer+0x16c>
 8001156:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800115a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800115e:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80011e4 <process_adc_buffer+0x15c>
 8001162:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001166:	4b24      	ldr	r3, [pc, #144]	@ (80011f8 <process_adc_buffer+0x170>)
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	ee07 3a90 	vmov	s15, r3
 800116e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001172:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001176:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <process_adc_buffer+0x174>)
 8001178:	edc3 7a00 	vstr	s15, [r3]
    // FIXME this should use the chip macro specified values here, not hardcoded values
    temp = temp * (int32_t)(130-30);
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <process_adc_buffer+0x174>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001200 <process_adc_buffer+0x178>
 8001186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118a:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <process_adc_buffer+0x174>)
 800118c:	edc3 7a00 	vstr	s15, [r3]
    temp = temp / (int32_t)(*TEMPSENSOR_CAL2_ADDR - *TEMPSENSOR_CAL1_ADDR);
 8001190:	4b1a      	ldr	r3, [pc, #104]	@ (80011fc <process_adc_buffer+0x174>)
 8001192:	edd3 6a00 	vldr	s13, [r3]
 8001196:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <process_adc_buffer+0x17c>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <process_adc_buffer+0x170>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ae:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <process_adc_buffer+0x174>)
 80011b0:	edc3 7a00 	vstr	s15, [r3]
    temp = temp + 30;
 80011b4:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <process_adc_buffer+0x174>)
 80011b6:	edd3 7a00 	vldr	s15, [r3]
 80011ba:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80011be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <process_adc_buffer+0x174>)
 80011c4:	edc3 7a00 	vstr	s15, [r3]


}
 80011c8:	bf00      	nop
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	cccccccd 	.word	0xcccccccd
 80011d8:	200004f2 	.word	0x200004f2
 80011dc:	200004f0 	.word	0x200004f0
 80011e0:	1fff75aa 	.word	0x1fff75aa
 80011e4:	453b8000 	.word	0x453b8000
 80011e8:	200004f4 	.word	0x200004f4
 80011ec:	457ff000 	.word	0x457ff000
 80011f0:	200004f8 	.word	0x200004f8
 80011f4:	447a0000 	.word	0x447a0000
 80011f8:	1fff75a8 	.word	0x1fff75a8
 80011fc:	200004fc 	.word	0x200004fc
 8001200:	42c80000 	.word	0x42c80000
 8001204:	1fff75ca 	.word	0x1fff75ca

08001208 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    process_adc_buffer(&adc_buffer[0]); // We're half way through the buffer, so can safely deal with first half
 8001210:	4803      	ldr	r0, [pc, #12]	@ (8001220 <HAL_ADC_ConvHalfCpltCallback+0x18>)
 8001212:	f7ff ff39 	bl	8001088 <process_adc_buffer>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000049c 	.word	0x2000049c

08001224 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
    process_adc_buffer(&adc_buffer[ADC_SAMPLES * 2]); // We're all the way through the buffer, so deal with second half
 800122c:	4803      	ldr	r0, [pc, #12]	@ (800123c <HAL_ADC_ConvCpltCallback+0x18>)
 800122e:	f7ff ff2b 	bl	8001088 <process_adc_buffer>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200004c4 	.word	0x200004c4

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001244:	b08b      	sub	sp, #44	@ 0x2c
 8001246:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001248:	f000 fead 	bl	8001fa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124c:	f000 f8cc 	bl	80013e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001250:	f000 fabe 	bl	80017d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001254:	f000 fa8e 	bl	8001774 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001258:	f000 fa5c 	bl	8001714 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800125c:	f000 f928 	bl	80014b0 <MX_ADC1_Init>
  MX_I2C1_SMBUS_Init();
 8001260:	f000 f9be 	bl	80015e0 <MX_I2C1_SMBUS_Init>
  MX_RTC_Init();
 8001264:	f000 f9f8 	bl	8001658 <MX_RTC_Init>
  MX_TIM6_Init();
 8001268:	f000 fa1e 	bl	80016a8 <MX_TIM6_Init>
  MX_CRC_Init();
 800126c:	f000 f996 	bl	800159c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  printf("\n\nStarting\n");
 8001270:	4849      	ldr	r0, [pc, #292]	@ (8001398 <main+0x158>)
 8001272:	f006 fff9 	bl	8008268 <puts>
  printf("VREFINT_CAL = %d (0x%04x)\r\n", (uint16_t)*VREFINT_CAL_ADDR, (uint16_t)*VREFINT_CAL_ADDR);
 8001276:	4b49      	ldr	r3, [pc, #292]	@ (800139c <main+0x15c>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	4619      	mov	r1, r3
 800127c:	4b47      	ldr	r3, [pc, #284]	@ (800139c <main+0x15c>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4847      	ldr	r0, [pc, #284]	@ (80013a0 <main+0x160>)
 8001284:	f006 ff88 	bl	8008198 <iprintf>
  printf("TEMPSENSOR_CAL1 = %d (0x%04x)\r\n", (uint16_t)*TEMPSENSOR_CAL1_ADDR, (uint16_t)*TEMPSENSOR_CAL1_ADDR);
 8001288:	4b46      	ldr	r3, [pc, #280]	@ (80013a4 <main+0x164>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	4619      	mov	r1, r3
 800128e:	4b45      	ldr	r3, [pc, #276]	@ (80013a4 <main+0x164>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	4844      	ldr	r0, [pc, #272]	@ (80013a8 <main+0x168>)
 8001296:	f006 ff7f 	bl	8008198 <iprintf>
  printf("TEMPSENSOR_CAL2 = %d (0x%04x)\r\n", (uint16_t)*TEMPSENSOR_CAL2_ADDR, (uint16_t)*TEMPSENSOR_CAL2_ADDR);
 800129a:	4b44      	ldr	r3, [pc, #272]	@ (80013ac <main+0x16c>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	4619      	mov	r1, r3
 80012a0:	4b42      	ldr	r3, [pc, #264]	@ (80013ac <main+0x16c>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4842      	ldr	r0, [pc, #264]	@ (80013b0 <main+0x170>)
 80012a8:	f006 ff76 	bl	8008198 <iprintf>

  // Calculate transfer function values - a and b in simple linear equation y = ax + b
  // TODO check this algorithm to ensure it tracks the suggested practice by ST

  ta = (float)((uint16_t)TEMPSENSOR_CAL2_TEMP - (uint16_t)TEMPSENSOR_CAL1_TEMP) / ((uint16_t)*TEMPSENSOR_CAL2_ADDR - (uint16_t)*TEMPSENSOR_CAL1_ADDR);
 80012ac:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <main+0x16c>)
 80012ae:	881b      	ldrh	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b3c      	ldr	r3, [pc, #240]	@ (80013a4 <main+0x164>)
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c0:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80013b4 <main+0x174>
 80012c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012c8:	4b3b      	ldr	r3, [pc, #236]	@ (80013b8 <main+0x178>)
 80012ca:	edc3 7a00 	vstr	s15, [r3]
  tb = ((ta * (uint16_t)*TEMPSENSOR_CAL1_ADDR) + (uint16_t)TEMPSENSOR_CAL1_TEMP);
 80012ce:	4b35      	ldr	r3, [pc, #212]	@ (80013a4 <main+0x164>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	ee07 3a90 	vmov	s15, r3
 80012d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012da:	4b37      	ldr	r3, [pc, #220]	@ (80013b8 <main+0x178>)
 80012dc:	edd3 7a00 	vldr	s15, [r3]
 80012e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e4:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 80012e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012ec:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <main+0x17c>)
 80012ee:	edc3 7a00 	vstr	s15, [r3]

  printf("Temp calibration: t = %0.3f * tmeasured - %0.3f\r\n", ta, tb);
 80012f2:	4b31      	ldr	r3, [pc, #196]	@ (80013b8 <main+0x178>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f926 	bl	8000548 <__aeabi_f2d>
 80012fc:	4604      	mov	r4, r0
 80012fe:	460d      	mov	r5, r1
 8001300:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <main+0x17c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff f91f 	bl	8000548 <__aeabi_f2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	e9cd 2300 	strd	r2, r3, [sp]
 8001312:	4622      	mov	r2, r4
 8001314:	462b      	mov	r3, r5
 8001316:	482a      	ldr	r0, [pc, #168]	@ (80013c0 <main+0x180>)
 8001318:	f006 ff3e 	bl	8008198 <iprintf>

  HAL_TIM_Base_Start_IT(&htim6); // First get the timer running
 800131c:	4829      	ldr	r0, [pc, #164]	@ (80013c4 <main+0x184>)
 800131e:	f005 f8cd 	bl	80064bc <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adc_buffer, ADC_SAMPLES * 2 * 2); // Now fire up the ADC DMA
 8001322:	2228      	movs	r2, #40	@ 0x28
 8001324:	4928      	ldr	r1, [pc, #160]	@ (80013c8 <main+0x188>)
 8001326:	4829      	ldr	r0, [pc, #164]	@ (80013cc <main+0x18c>)
 8001328:	f001 f9d4 	bl	80026d4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, then = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	603b      	str	r3, [r7, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]

  while (1)
  {
      now = HAL_GetTick();
 8001334:	f000 fea0 	bl	8002078 <HAL_GetTick>
 8001338:	6038      	str	r0, [r7, #0]

      if (now - then >= 1000)
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001344:	d3f6      	bcc.n	8001334 <main+0xf4>
	{

         printf("VDDA = %5.3f V Vref = %5.3f V (raw = %d) Temp = %4.2f °C (raw = %d)\r\n", vdda, vref, vref_avg, temp, temp_avg);
 8001346:	4b22      	ldr	r3, [pc, #136]	@ (80013d0 <main+0x190>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f8fc 	bl	8000548 <__aeabi_f2d>
 8001350:	4680      	mov	r8, r0
 8001352:	4689      	mov	r9, r1
 8001354:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <main+0x194>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8f5 	bl	8000548 <__aeabi_f2d>
 800135e:	4604      	mov	r4, r0
 8001360:	460d      	mov	r5, r1
 8001362:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <main+0x198>)
 8001364:	881b      	ldrh	r3, [r3, #0]
 8001366:	461e      	mov	r6, r3
 8001368:	4b1c      	ldr	r3, [pc, #112]	@ (80013dc <main+0x19c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f8eb 	bl	8000548 <__aeabi_f2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	491a      	ldr	r1, [pc, #104]	@ (80013e0 <main+0x1a0>)
 8001378:	8809      	ldrh	r1, [r1, #0]
 800137a:	9106      	str	r1, [sp, #24]
 800137c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001380:	9602      	str	r6, [sp, #8]
 8001382:	e9cd 4500 	strd	r4, r5, [sp]
 8001386:	4642      	mov	r2, r8
 8001388:	464b      	mov	r3, r9
 800138a:	4816      	ldr	r0, [pc, #88]	@ (80013e4 <main+0x1a4>)
 800138c:	f006 ff04 	bl	8008198 <iprintf>

         then = now;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	607b      	str	r3, [r7, #4]
      now = HAL_GetTick();
 8001394:	e7ce      	b.n	8001334 <main+0xf4>
 8001396:	bf00      	nop
 8001398:	0800bb10 	.word	0x0800bb10
 800139c:	1fff75aa 	.word	0x1fff75aa
 80013a0:	0800bb1c 	.word	0x0800bb1c
 80013a4:	1fff75a8 	.word	0x1fff75a8
 80013a8:	0800bb38 	.word	0x0800bb38
 80013ac:	1fff75ca 	.word	0x1fff75ca
 80013b0:	0800bb58 	.word	0x0800bb58
 80013b4:	42c80000 	.word	0x42c80000
 80013b8:	20000494 	.word	0x20000494
 80013bc:	20000498 	.word	0x20000498
 80013c0:	0800bb78 	.word	0x0800bb78
 80013c4:	20000334 	.word	0x20000334
 80013c8:	2000049c 	.word	0x2000049c
 80013cc:	200001f0 	.word	0x200001f0
 80013d0:	200004f4 	.word	0x200004f4
 80013d4:	200004f8 	.word	0x200004f8
 80013d8:	200004f0 	.word	0x200004f0
 80013dc:	200004fc 	.word	0x200004fc
 80013e0:	200004f2 	.word	0x200004f2
 80013e4:	0800bbac 	.word	0x0800bbac

080013e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b096      	sub	sp, #88	@ 0x58
 80013ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2244      	movs	r2, #68	@ 0x44
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f007 f836 	bl	8008468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013fc:	463b      	mov	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
 8001408:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800140a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800140e:	f002 fe87 	bl	8004120 <HAL_PWREx_ControlVoltageScaling>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001418:	f000 fa24 	bl	8001864 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800141c:	f002 fe62 	bl	80040e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001420:	4b22      	ldr	r3, [pc, #136]	@ (80014ac <SystemClock_Config+0xc4>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001426:	4a21      	ldr	r2, [pc, #132]	@ (80014ac <SystemClock_Config+0xc4>)
 8001428:	f023 0318 	bic.w	r3, r3, #24
 800142c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8001430:	231c      	movs	r3, #28
 8001432:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800143c:	2301      	movs	r3, #1
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001444:	2360      	movs	r3, #96	@ 0x60
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2302      	movs	r3, #2
 800144a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800144c:	2301      	movs	r3, #1
 800144e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001450:	2301      	movs	r3, #1
 8001452:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001454:	2310      	movs	r3, #16
 8001456:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001458:	2307      	movs	r3, #7
 800145a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800145c:	2302      	movs	r3, #2
 800145e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4618      	mov	r0, r3
 800146a:	f002 feaf 	bl	80041cc <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001474:	f000 f9f6 	bl	8001864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800147c:	2303      	movs	r3, #3
 800147e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800148c:	463b      	mov	r3, r7
 800148e:	2101      	movs	r1, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f003 faaf 	bl	80049f4 <HAL_RCC_ClockConfig>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800149c:	f000 f9e2 	bl	8001864 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014a0:	f003 fec2 	bl	8005228 <HAL_RCCEx_EnableMSIPLLMode>
}
 80014a4:	bf00      	nop
 80014a6:	3758      	adds	r7, #88	@ 0x58
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000

080014b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014b6:	463b      	mov	r3, r7
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014c6:	4b31      	ldr	r3, [pc, #196]	@ (800158c <MX_ADC1_Init+0xdc>)
 80014c8:	4a31      	ldr	r2, [pc, #196]	@ (8001590 <MX_ADC1_Init+0xe0>)
 80014ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014cc:	4b2f      	ldr	r3, [pc, #188]	@ (800158c <MX_ADC1_Init+0xdc>)
 80014ce:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80014d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d4:	4b2d      	ldr	r3, [pc, #180]	@ (800158c <MX_ADC1_Init+0xdc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014da:	4b2c      	ldr	r3, [pc, #176]	@ (800158c <MX_ADC1_Init+0xdc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014e0:	4b2a      	ldr	r3, [pc, #168]	@ (800158c <MX_ADC1_Init+0xdc>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <MX_ADC1_Init+0xdc>)
 80014e8:	2204      	movs	r2, #4
 80014ea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014ec:	4b27      	ldr	r3, [pc, #156]	@ (800158c <MX_ADC1_Init+0xdc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014f2:	4b26      	ldr	r3, [pc, #152]	@ (800158c <MX_ADC1_Init+0xdc>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80014f8:	4b24      	ldr	r3, [pc, #144]	@ (800158c <MX_ADC1_Init+0xdc>)
 80014fa:	2202      	movs	r2, #2
 80014fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fe:	4b23      	ldr	r3, [pc, #140]	@ (800158c <MX_ADC1_Init+0xdc>)
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <MX_ADC1_Init+0xdc>)
 8001508:	f44f 62e8 	mov.w	r2, #1856	@ 0x740
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800150e:	4b1f      	ldr	r3, [pc, #124]	@ (800158c <MX_ADC1_Init+0xdc>)
 8001510:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001514:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001516:	4b1d      	ldr	r3, [pc, #116]	@ (800158c <MX_ADC1_Init+0xdc>)
 8001518:	2201      	movs	r2, #1
 800151a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800151e:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <MX_ADC1_Init+0xdc>)
 8001520:	2200      	movs	r2, #0
 8001522:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	@ (800158c <MX_ADC1_Init+0xdc>)
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800152c:	4817      	ldr	r0, [pc, #92]	@ (800158c <MX_ADC1_Init+0xdc>)
 800152e:	f000 ff89 	bl	8002444 <HAL_ADC_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001538:	f000 f994 	bl	8001864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800153c:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <MX_ADC1_Init+0xe4>)
 800153e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001540:	2306      	movs	r3, #6
 8001542:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8001544:	2305      	movs	r3, #5
 8001546:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001548:	237f      	movs	r3, #127	@ 0x7f
 800154a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800154c:	2304      	movs	r3, #4
 800154e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001554:	463b      	mov	r3, r7
 8001556:	4619      	mov	r1, r3
 8001558:	480c      	ldr	r0, [pc, #48]	@ (800158c <MX_ADC1_Init+0xdc>)
 800155a:	f001 fb07 	bl	8002b6c <HAL_ADC_ConfigChannel>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001564:	f000 f97e 	bl	8001864 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <MX_ADC1_Init+0xe8>)
 800156a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800156c:	230c      	movs	r3, #12
 800156e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001570:	463b      	mov	r3, r7
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <MX_ADC1_Init+0xdc>)
 8001576:	f001 faf9 	bl	8002b6c <HAL_ADC_ConfigChannel>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001580:	f000 f970 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200001f0 	.word	0x200001f0
 8001590:	50040000 	.word	0x50040000
 8001594:	c7520000 	.word	0xc7520000
 8001598:	cb840000 	.word	0xcb840000

0800159c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	@ (80015d8 <MX_CRC_Init+0x3c>)
 80015a2:	4a0e      	ldr	r2, [pc, #56]	@ (80015dc <MX_CRC_Init+0x40>)
 80015a4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_CRC_Init+0x3c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80015ac:	4b0a      	ldr	r3, [pc, #40]	@ (80015d8 <MX_CRC_Init+0x3c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80015b2:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_CRC_Init+0x3c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <MX_CRC_Init+0x3c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80015be:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_CRC_Init+0x3c>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80015c4:	4804      	ldr	r0, [pc, #16]	@ (80015d8 <MX_CRC_Init+0x3c>)
 80015c6:	f002 f90f 	bl	80037e8 <HAL_CRC_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80015d0:	f000 f948 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000029c 	.word	0x2000029c
 80015dc:	40023000 	.word	0x40023000

080015e0 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 80015e4:	4b19      	ldr	r3, [pc, #100]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 80015e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001650 <MX_I2C1_SMBUS_Init+0x70>)
 80015e8:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x00707CBB;
 80015ea:	4b18      	ldr	r3, [pc, #96]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 80015ec:	4a19      	ldr	r2, [pc, #100]	@ (8001654 <MX_I2C1_SMBUS_Init+0x74>)
 80015ee:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80015f0:	4b16      	ldr	r3, [pc, #88]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80015f6:	4b15      	ldr	r3, [pc, #84]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 80015f8:	2202      	movs	r2, #2
 80015fa:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 80015fe:	2201      	movs	r2, #1
 8001600:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8001602:	4b12      	ldr	r3, [pc, #72]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8001608:	4b10      	ldr	r3, [pc, #64]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800160e:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8001614:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800161a:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 8001622:	2200      	movs	r2, #0
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_HOST;
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 8001628:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800162c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008186;
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 8001630:	f248 1286 	movw	r2, #33158	@ 0x8186
 8001634:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <MX_I2C1_SMBUS_Init+0x6c>)
 8001638:	f004 f80a 	bl	8005650 <HAL_SMBUS_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_I2C1_SMBUS_Init+0x66>
  {
    Error_Handler();
 8001642:	f000 f90f 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200002c0 	.word	0x200002c0
 8001650:	40005400 	.word	0x40005400
 8001654:	00707cbb 	.word	0x00707cbb

08001658 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <MX_RTC_Init+0x48>)
 800165e:	4a11      	ldr	r2, [pc, #68]	@ (80016a4 <MX_RTC_Init+0x4c>)
 8001660:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_RTC_Init+0x48>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001668:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <MX_RTC_Init+0x48>)
 800166a:	227f      	movs	r2, #127	@ 0x7f
 800166c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <MX_RTC_Init+0x48>)
 8001670:	22ff      	movs	r2, #255	@ 0xff
 8001672:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001674:	4b0a      	ldr	r3, [pc, #40]	@ (80016a0 <MX_RTC_Init+0x48>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <MX_RTC_Init+0x48>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <MX_RTC_Init+0x48>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001686:	4b06      	ldr	r3, [pc, #24]	@ (80016a0 <MX_RTC_Init+0x48>)
 8001688:	2200      	movs	r2, #0
 800168a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	@ (80016a0 <MX_RTC_Init+0x48>)
 800168e:	f003 fecd 	bl	800542c <HAL_RTC_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001698:	f000 f8e4 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000310 	.word	0x20000310
 80016a4:	40002800 	.word	0x40002800

080016a8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016b8:	4b14      	ldr	r3, [pc, #80]	@ (800170c <MX_TIM6_Init+0x64>)
 80016ba:	4a15      	ldr	r2, [pc, #84]	@ (8001710 <MX_TIM6_Init+0x68>)
 80016bc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 320;
 80016be:	4b13      	ldr	r3, [pc, #76]	@ (800170c <MX_TIM6_Init+0x64>)
 80016c0:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016c4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_TIM6_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <MX_TIM6_Init+0x64>)
 80016ce:	2264      	movs	r2, #100	@ 0x64
 80016d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_TIM6_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80016d8:	480c      	ldr	r0, [pc, #48]	@ (800170c <MX_TIM6_Init+0x64>)
 80016da:	f004 fe97 	bl	800640c <HAL_TIM_Base_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80016e4:	f000 f8be 	bl	8001864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016e8:	2320      	movs	r3, #32
 80016ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_TIM6_Init+0x64>)
 80016f6:	f005 f8e1 	bl	80068bc <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001700:	f000 f8b0 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	3710      	adds	r7, #16
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20000334 	.word	0x20000334
 8001710:	40001000 	.word	0x40001000

08001714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001718:	4b14      	ldr	r3, [pc, #80]	@ (800176c <MX_USART2_UART_Init+0x58>)
 800171a:	4a15      	ldr	r2, [pc, #84]	@ (8001770 <MX_USART2_UART_Init+0x5c>)
 800171c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171e:	4b13      	ldr	r3, [pc, #76]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001720:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0f      	ldr	r3, [pc, #60]	@ (800176c <MX_USART2_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_USART2_UART_Init+0x58>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <MX_USART2_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_USART2_UART_Init+0x58>)
 8001758:	f005 f934 	bl	80069c4 <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001762:	f000 f87f 	bl	8001864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000380 	.word	0x20000380
 8001770:	40004400 	.word	0x40004400

08001774 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_DMA_Init+0x58>)
 800177c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800177e:	4a13      	ldr	r2, [pc, #76]	@ (80017cc <MX_DMA_Init+0x58>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6493      	str	r3, [r2, #72]	@ 0x48
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_DMA_Init+0x58>)
 8001788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	200b      	movs	r0, #11
 8001798:	f001 ffef 	bl	800377a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800179c:	200b      	movs	r0, #11
 800179e:	f002 f808 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2100      	movs	r1, #0
 80017a6:	2010      	movs	r0, #16
 80017a8:	f001 ffe7 	bl	800377a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017ac:	2010      	movs	r0, #16
 80017ae:	f002 f800 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80017b2:	2200      	movs	r2, #0
 80017b4:	2100      	movs	r1, #0
 80017b6:	2011      	movs	r0, #17
 80017b8:	f001 ffdf 	bl	800377a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80017bc:	2011      	movs	r0, #17
 80017be:	f001 fff8 	bl	80037b2 <HAL_NVIC_EnableIRQ>

}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40021000 	.word	0x40021000

080017d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	609a      	str	r2, [r3, #8]
 80017e2:	60da      	str	r2, [r3, #12]
 80017e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <MX_GPIO_Init+0x8c>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	4a1c      	ldr	r2, [pc, #112]	@ (800185c <MX_GPIO_Init+0x8c>)
 80017ec:	f043 0304 	orr.w	r3, r3, #4
 80017f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <MX_GPIO_Init+0x8c>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <MX_GPIO_Init+0x8c>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001802:	4a16      	ldr	r2, [pc, #88]	@ (800185c <MX_GPIO_Init+0x8c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <MX_GPIO_Init+0x8c>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <MX_GPIO_Init+0x8c>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800181a:	4a10      	ldr	r2, [pc, #64]	@ (800185c <MX_GPIO_Init+0x8c>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <MX_GPIO_Init+0x8c>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800182e:	2200      	movs	r2, #0
 8001830:	2108      	movs	r1, #8
 8001832:	480b      	ldr	r0, [pc, #44]	@ (8001860 <MX_GPIO_Init+0x90>)
 8001834:	f002 fc24 	bl	8004080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001838:	2308      	movs	r3, #8
 800183a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4619      	mov	r1, r3
 800184e:	4804      	ldr	r0, [pc, #16]	@ (8001860 <MX_GPIO_Init+0x90>)
 8001850:	f002 faac 	bl	8003dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000
 8001860:	48000400 	.word	0x48000400

08001864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001868:	b672      	cpsid	i
}
 800186a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <Error_Handler+0x8>

08001870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001876:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_MspInit+0x44>)
 8001878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187a:	4a0e      	ldr	r2, [pc, #56]	@ (80018b4 <HAL_MspInit+0x44>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6613      	str	r3, [r2, #96]	@ 0x60
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <HAL_MspInit+0x44>)
 8001884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_MspInit+0x44>)
 8001890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001892:	4a08      	ldr	r2, [pc, #32]	@ (80018b4 <HAL_MspInit+0x44>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001898:	6593      	str	r3, [r2, #88]	@ 0x58
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <HAL_MspInit+0x44>)
 800189c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b098      	sub	sp, #96	@ 0x60
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018c0:	f107 030c 	add.w	r3, r7, #12
 80018c4:	2254      	movs	r2, #84	@ 0x54
 80018c6:	2100      	movs	r1, #0
 80018c8:	4618      	mov	r0, r3
 80018ca:	f006 fdcd 	bl	8008468 <memset>
  if(hadc->Instance==ADC1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a32      	ldr	r2, [pc, #200]	@ (800199c <HAL_ADC_MspInit+0xe4>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d15d      	bne.n	8001994 <HAL_ADC_MspInit+0xdc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018dc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018de:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80018e2:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80018e4:	2301      	movs	r3, #1
 80018e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80018ec:	2310      	movs	r3, #16
 80018ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018f0:	2307      	movs	r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018f4:	2302      	movs	r3, #2
 80018f6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018f8:	2302      	movs	r3, #2
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018fc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001902:	f107 030c 	add.w	r3, r7, #12
 8001906:	4618      	mov	r0, r3
 8001908:	f003 fa98 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_ADC_MspInit+0x5e>
    {
      Error_Handler();
 8001912:	f7ff ffa7 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001916:	4b22      	ldr	r3, [pc, #136]	@ (80019a0 <HAL_ADC_MspInit+0xe8>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800191a:	4a21      	ldr	r2, [pc, #132]	@ (80019a0 <HAL_ADC_MspInit+0xe8>)
 800191c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001920:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001922:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <HAL_ADC_MspInit+0xe8>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800192e:	4b1d      	ldr	r3, [pc, #116]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 8001930:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <HAL_ADC_MspInit+0xf0>)
 8001932:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001934:	4b1b      	ldr	r3, [pc, #108]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 8001936:	2200      	movs	r2, #0
 8001938:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800193a:	4b1a      	ldr	r3, [pc, #104]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001940:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001946:	4b17      	ldr	r3, [pc, #92]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 8001948:	2280      	movs	r2, #128	@ 0x80
 800194a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 800194e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001952:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 8001956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800195a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 800195e:	2220      	movs	r2, #32
 8001960:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 8001964:	2200      	movs	r2, #0
 8001966:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001968:	480e      	ldr	r0, [pc, #56]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 800196a:	f002 f827 	bl	80039bc <HAL_DMA_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001974:	f7ff ff76 	bl	8001864 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 800197c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800197e:	4a09      	ldr	r2, [pc, #36]	@ (80019a4 <HAL_ADC_MspInit+0xec>)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001984:	2200      	movs	r2, #0
 8001986:	2100      	movs	r1, #0
 8001988:	2012      	movs	r0, #18
 800198a:	f001 fef6 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800198e:	2012      	movs	r0, #18
 8001990:	f001 ff0f 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001994:	bf00      	nop
 8001996:	3760      	adds	r7, #96	@ 0x60
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	50040000 	.word	0x50040000
 80019a0:	40021000 	.word	0x40021000
 80019a4:	20000254 	.word	0x20000254
 80019a8:	40020008 	.word	0x40020008

080019ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0a      	ldr	r2, [pc, #40]	@ (80019e4 <HAL_CRC_MspInit+0x38>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10b      	bne.n	80019d6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_CRC_MspInit+0x3c>)
 80019c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <HAL_CRC_MspInit+0x3c>)
 80019c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80019ca:	4b07      	ldr	r3, [pc, #28]	@ (80019e8 <HAL_CRC_MspInit+0x3c>)
 80019cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40023000 	.word	0x40023000
 80019e8:	40021000 	.word	0x40021000

080019ec <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b09e      	sub	sp, #120	@ 0x78
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	2254      	movs	r2, #84	@ 0x54
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f006 fd2b 	bl	8008468 <memset>
  if(hsmbus->Instance==I2C1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a27      	ldr	r2, [pc, #156]	@ (8001ab4 <HAL_SMBUS_MspInit+0xc8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d147      	bne.n	8001aac <HAL_SMBUS_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a1c:	2340      	movs	r3, #64	@ 0x40
 8001a1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f003 fa07 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_SMBUS_MspInit+0x4c>
    {
      Error_Handler();
 8001a34:	f7ff ff16 	bl	8001864 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a38:	4b1f      	ldr	r3, [pc, #124]	@ (8001ab8 <HAL_SMBUS_MspInit+0xcc>)
 8001a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab8 <HAL_SMBUS_MspInit+0xcc>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a44:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab8 <HAL_SMBUS_MspInit+0xcc>)
 8001a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a48:	f003 0301 	and.w	r3, r3, #1
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a50:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a54:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a56:	2312      	movs	r3, #18
 8001a58:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a62:	2304      	movs	r3, #4
 8001a64:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a70:	f002 f99c 	bl	8003dac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a74:	4b10      	ldr	r3, [pc, #64]	@ (8001ab8 <HAL_SMBUS_MspInit+0xcc>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a78:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab8 <HAL_SMBUS_MspInit+0xcc>)
 8001a7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <HAL_SMBUS_MspInit+0xcc>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2100      	movs	r1, #0
 8001a90:	201f      	movs	r0, #31
 8001a92:	f001 fe72 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a96:	201f      	movs	r0, #31
 8001a98:	f001 fe8b 	bl	80037b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2020      	movs	r0, #32
 8001aa2:	f001 fe6a 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001aa6:	2020      	movs	r0, #32
 8001aa8:	f001 fe83 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aac:	bf00      	nop
 8001aae:	3778      	adds	r7, #120	@ 0x78
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	40021000 	.word	0x40021000

08001abc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b098      	sub	sp, #96	@ 0x60
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	2254      	movs	r2, #84	@ 0x54
 8001aca:	2100      	movs	r1, #0
 8001acc:	4618      	mov	r0, r3
 8001ace:	f006 fccb 	bl	8008468 <memset>
  if(hrtc->Instance==RTC)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8001b14 <HAL_RTC_MspInit+0x58>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d117      	bne.n	8001b0c <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001adc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ae0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ae2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ae6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ae8:	f107 030c 	add.w	r3, r7, #12
 8001aec:	4618      	mov	r0, r3
 8001aee:	f003 f9a5 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001af8:	f7ff feb4 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_RTC_MspInit+0x5c>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <HAL_RTC_MspInit+0x5c>)
 8001b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3760      	adds	r7, #96	@ 0x60
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40002800 	.word	0x40002800
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <HAL_TIM_Base_MspInit+0x44>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d113      	bne.n	8001b56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <HAL_TIM_Base_MspInit+0x48>)
 8001b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b32:	4a0c      	ldr	r2, [pc, #48]	@ (8001b64 <HAL_TIM_Base_MspInit+0x48>)
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <HAL_TIM_Base_MspInit+0x48>)
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2036      	movs	r0, #54	@ 0x36
 8001b4c:	f001 fe15 	bl	800377a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b50:	2036      	movs	r0, #54	@ 0x36
 8001b52:	f001 fe2e 	bl	80037b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40001000 	.word	0x40001000
 8001b64:	40021000 	.word	0x40021000

08001b68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b09e      	sub	sp, #120	@ 0x78
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	2254      	movs	r2, #84	@ 0x54
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f006 fc6d 	bl	8008468 <memset>
  if(huart->Instance==USART2)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a51      	ldr	r2, [pc, #324]	@ (8001cd8 <HAL_UART_MspInit+0x170>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	f040 809b 	bne.w	8001cd0 <HAL_UART_MspInit+0x168>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 f948 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001bb2:	f7ff fe57 	bl	8001864 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bb6:	4b49      	ldr	r3, [pc, #292]	@ (8001cdc <HAL_UART_MspInit+0x174>)
 8001bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bba:	4a48      	ldr	r2, [pc, #288]	@ (8001cdc <HAL_UART_MspInit+0x174>)
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc2:	4b46      	ldr	r3, [pc, #280]	@ (8001cdc <HAL_UART_MspInit+0x174>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	4b43      	ldr	r3, [pc, #268]	@ (8001cdc <HAL_UART_MspInit+0x174>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	4a42      	ldr	r2, [pc, #264]	@ (8001cdc <HAL_UART_MspInit+0x174>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bda:	4b40      	ldr	r3, [pc, #256]	@ (8001cdc <HAL_UART_MspInit+0x174>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001be6:	2304      	movs	r3, #4
 8001be8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf6:	2307      	movs	r3, #7
 8001bf8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c04:	f002 f8d2 	bl	8003dac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001c08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c0c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c22:	4619      	mov	r1, r3
 8001c24:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c28:	f002 f8c0 	bl	8003dac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce4 <HAL_UART_MspInit+0x17c>)
 8001c30:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8001c32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c34:	2202      	movs	r2, #2
 8001c36:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c38:	4b29      	ldr	r3, [pc, #164]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c44:	4b26      	ldr	r3, [pc, #152]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c46:	2280      	movs	r2, #128	@ 0x80
 8001c48:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c50:	4b23      	ldr	r3, [pc, #140]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001c56:	4b22      	ldr	r3, [pc, #136]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c58:	2220      	movs	r2, #32
 8001c5a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c62:	481f      	ldr	r0, [pc, #124]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c64:	f001 feaa 	bl	80039bc <HAL_DMA_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8001c6e:	f7ff fdf9 	bl	8001864 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a1a      	ldr	r2, [pc, #104]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c76:	671a      	str	r2, [r3, #112]	@ 0x70
 8001c78:	4a19      	ldr	r2, [pc, #100]	@ (8001ce0 <HAL_UART_MspInit+0x178>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001c80:	4a1a      	ldr	r2, [pc, #104]	@ (8001cec <HAL_UART_MspInit+0x184>)
 8001c82:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 8001c84:	4b18      	ldr	r3, [pc, #96]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001c86:	2202      	movs	r2, #2
 8001c88:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c96:	4b14      	ldr	r3, [pc, #80]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001c98:	2280      	movs	r2, #128	@ 0x80
 8001c9a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001caa:	2220      	movs	r2, #32
 8001cac:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001cb4:	480c      	ldr	r0, [pc, #48]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001cb6:	f001 fe81 	bl	80039bc <HAL_DMA_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_UART_MspInit+0x15c>
    {
      Error_Handler();
 8001cc0:	f7ff fdd0 	bl	8001864 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a08      	ldr	r2, [pc, #32]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001cc8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001cca:	4a07      	ldr	r2, [pc, #28]	@ (8001ce8 <HAL_UART_MspInit+0x180>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cd0:	bf00      	nop
 8001cd2:	3778      	adds	r7, #120	@ 0x78
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40004400 	.word	0x40004400
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	20000404 	.word	0x20000404
 8001ce4:	4002006c 	.word	0x4002006c
 8001ce8:	2000044c 	.word	0x2000044c
 8001cec:	40020080 	.word	0x40020080

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <MemManage_Handler+0x4>

08001d08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d46:	f000 f983 	bl	8002050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d54:	4802      	ldr	r0, [pc, #8]	@ (8001d60 <DMA1_Channel1_IRQHandler+0x10>)
 8001d56:	f001 ff49 	bl	8003bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000254 	.word	0x20000254

08001d64 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d68:	4802      	ldr	r0, [pc, #8]	@ (8001d74 <DMA1_Channel6_IRQHandler+0x10>)
 8001d6a:	f001 ff3f 	bl	8003bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000404 	.word	0x20000404

08001d78 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <DMA1_Channel7_IRQHandler+0x10>)
 8001d7e:	f001 ff35 	bl	8003bec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000044c 	.word	0x2000044c

08001d8c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d90:	4802      	ldr	r0, [pc, #8]	@ (8001d9c <ADC1_IRQHandler+0x10>)
 8001d92:	f000 fd23 	bl	80027dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	200001f0 	.word	0x200001f0

08001da0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_SMBUS_EV_IRQHandler(&hsmbus1);
 8001da4:	4802      	ldr	r0, [pc, #8]	@ (8001db0 <I2C1_EV_IRQHandler+0x10>)
 8001da6:	f003 fd0b 	bl	80057c0 <HAL_SMBUS_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	200002c0 	.word	0x200002c0

08001db4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_SMBUS_ER_IRQHandler(&hsmbus1);
 8001db8:	4802      	ldr	r0, [pc, #8]	@ (8001dc4 <I2C1_ER_IRQHandler+0x10>)
 8001dba:	f003 fd9f 	bl	80058fc <HAL_SMBUS_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200002c0 	.word	0x200002c0

08001dc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dcc:	4802      	ldr	r0, [pc, #8]	@ (8001dd8 <TIM6_DAC_IRQHandler+0x10>)
 8001dce:	f004 fbc9 	bl	8006564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000334 	.word	0x20000334

08001ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return 1;
 8001de0:	2301      	movs	r3, #1
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_kill>:

int _kill(int pid, int sig)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001df6:	f006 fb89 	bl	800850c <__errno>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2216      	movs	r2, #22
 8001dfe:	601a      	str	r2, [r3, #0]
  return -1;
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <_exit>:

void _exit (int status)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff ffe7 	bl	8001dec <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e1e:	bf00      	nop
 8001e20:	e7fd      	b.n	8001e1e <_exit+0x12>

08001e22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e00a      	b.n	8001e4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e34:	f3af 8000 	nop.w
 8001e38:	4601      	mov	r1, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	b2ca      	uxtb	r2, r1
 8001e42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3301      	adds	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	dbf0      	blt.n	8001e34 <_read+0x12>
  }

  return len;
 8001e52:	687b      	ldr	r3, [r7, #4]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e84:	605a      	str	r2, [r3, #4]
  return 0;
 8001e86:	2300      	movs	r3, #0
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <_isatty>:

int _isatty(int file)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr

08001eaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b085      	sub	sp, #20
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3714      	adds	r7, #20
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	@ (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	@ (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f006 fb0a 	bl	800850c <__errno>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	220c      	movs	r2, #12
 8001efc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	@ (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20010000 	.word	0x20010000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	20000500 	.word	0x20000500
 8001f2c:	20000658 	.word	0x20000658

08001f30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f34:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <SystemInit+0x20>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f3a:	4a05      	ldr	r2, [pc, #20]	@ (8001f50 <SystemInit+0x20>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f8c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f58:	f7ff ffea 	bl	8001f30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f5c:	480c      	ldr	r0, [pc, #48]	@ (8001f90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f5e:	490d      	ldr	r1, [pc, #52]	@ (8001f94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f60:	4a0d      	ldr	r2, [pc, #52]	@ (8001f98 <LoopForever+0xe>)
  movs r3, #0
 8001f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f64:	e002      	b.n	8001f6c <LoopCopyDataInit>

08001f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6a:	3304      	adds	r3, #4

08001f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f70:	d3f9      	bcc.n	8001f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f72:	4a0a      	ldr	r2, [pc, #40]	@ (8001f9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f74:	4c0a      	ldr	r4, [pc, #40]	@ (8001fa0 <LoopForever+0x16>)
  movs r3, #0
 8001f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f78:	e001      	b.n	8001f7e <LoopFillZerobss>

08001f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f7c:	3204      	adds	r2, #4

08001f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f80:	d3fb      	bcc.n	8001f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f82:	f006 fac9 	bl	8008518 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f86:	f7ff f95b 	bl	8001240 <main>

08001f8a <LoopForever>:

LoopForever:
    b LoopForever
 8001f8a:	e7fe      	b.n	8001f8a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f94:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001f98:	0800c078 	.word	0x0800c078
  ldr r2, =_sbss
 8001f9c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001fa0:	20000654 	.word	0x20000654

08001fa4 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <CAN1_RX0_IRQHandler>

08001fa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fac:	2300      	movs	r3, #0
 8001fae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fb0:	2003      	movs	r0, #3
 8001fb2:	f001 fbd7 	bl	8003764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 f80e 	bl	8001fd8 <HAL_InitTick>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	71fb      	strb	r3, [r7, #7]
 8001fc6:	e001      	b.n	8001fcc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fc8:	f7ff fc52 	bl	8001870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fcc:	79fb      	ldrb	r3, [r7, #7]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fe4:	4b17      	ldr	r3, [pc, #92]	@ (8002044 <HAL_InitTick+0x6c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d023      	beq.n	8002034 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <HAL_InitTick+0x70>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b14      	ldr	r3, [pc, #80]	@ (8002044 <HAL_InitTick+0x6c>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f001 fbe3 	bl	80037ce <HAL_SYSTICK_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10f      	bne.n	800202e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2b0f      	cmp	r3, #15
 8002012:	d809      	bhi.n	8002028 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	2200      	movs	r2, #0
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800201c:	f001 fbad 	bl	800377a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002020:	4a0a      	ldr	r2, [pc, #40]	@ (800204c <HAL_InitTick+0x74>)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e007      	b.n	8002038 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e004      	b.n	8002038 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
 8002032:	e001      	b.n	8002038 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000008 	.word	0x20000008
 8002048:	20000000 	.word	0x20000000
 800204c:	20000004 	.word	0x20000004

08002050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_IncTick+0x20>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	461a      	mov	r2, r3
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_IncTick+0x24>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4a04      	ldr	r2, [pc, #16]	@ (8002074 <HAL_IncTick+0x24>)
 8002062:	6013      	str	r3, [r2, #0]
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000008 	.word	0x20000008
 8002074:	20000504 	.word	0x20000504

08002078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return uwTick;
 800207c:	4b03      	ldr	r3, [pc, #12]	@ (800208c <HAL_GetTick+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000504 	.word	0x20000504

08002090 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	431a      	orrs	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	609a      	str	r2, [r3, #8]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	609a      	str	r2, [r3, #8]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b087      	sub	sp, #28
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	3360      	adds	r3, #96	@ 0x60
 800210a:	461a      	mov	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b08      	ldr	r3, [pc, #32]	@ (800213c <LL_ADC_SetOffset+0x44>)
 800211a:	4013      	ands	r3, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	4313      	orrs	r3, r2
 8002128:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002130:	bf00      	nop
 8002132:	371c      	adds	r7, #28
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	03fff000 	.word	0x03fff000

08002140 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3360      	adds	r3, #96	@ 0x60
 800214e:	461a      	mov	r2, r3
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3360      	adds	r3, #96	@ 0x60
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	431a      	orrs	r2, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3330      	adds	r3, #48	@ 0x30
 80021d8:	461a      	mov	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	4413      	add	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	f003 031f 	and.w	r3, r3, #31
 80021f2:	211f      	movs	r1, #31
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	401a      	ands	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	0e9b      	lsrs	r3, r3, #26
 8002200:	f003 011f 	and.w	r1, r3, #31
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	fa01 f303 	lsl.w	r3, r1, r3
 800220e:	431a      	orrs	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002214:	bf00      	nop
 8002216:	371c      	adds	r7, #28
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	370c      	adds	r7, #12
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr

08002246 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002246:	b480      	push	{r7}
 8002248:	b087      	sub	sp, #28
 800224a:	af00      	add	r7, sp, #0
 800224c:	60f8      	str	r0, [r7, #12]
 800224e:	60b9      	str	r1, [r7, #8]
 8002250:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	3314      	adds	r3, #20
 8002256:	461a      	mov	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	0e5b      	lsrs	r3, r3, #25
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	f003 0304 	and.w	r3, r3, #4
 8002262:	4413      	add	r3, r2
 8002264:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	0d1b      	lsrs	r3, r3, #20
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2107      	movs	r1, #7
 8002274:	fa01 f303 	lsl.w	r3, r1, r3
 8002278:	43db      	mvns	r3, r3
 800227a:	401a      	ands	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	0d1b      	lsrs	r3, r3, #20
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	431a      	orrs	r2, r3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002290:	bf00      	nop
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022b4:	43db      	mvns	r3, r3
 80022b6:	401a      	ands	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0318 	and.w	r3, r3, #24
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022c0:	40d9      	lsrs	r1, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	400b      	ands	r3, r1
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	431a      	orrs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	0007ffff 	.word	0x0007ffff

080022e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80022f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6093      	str	r3, [r2, #8]
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002318:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800231c:	d101      	bne.n	8002322 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800231e:	2301      	movs	r3, #1
 8002320:	e000      	b.n	8002324 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002344:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002368:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800236c:	d101      	bne.n	8002372 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002372:	2300      	movs	r3, #0
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002390:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002394:	f043 0201 	orr.w	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d101      	bne.n	80023c0 <LL_ADC_IsEnabled+0x18>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <LL_ADC_IsEnabled+0x1a>
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023ce:	b480      	push	{r7}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80023e2:	f043 0204 	orr.w	r2, r3, #4
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023ea:	bf00      	nop
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b04      	cmp	r3, #4
 8002408:	d101      	bne.n	800240e <LL_ADC_REG_IsConversionOngoing+0x18>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0308 	and.w	r3, r3, #8
 800242c:	2b08      	cmp	r3, #8
 800242e:	d101      	bne.n	8002434 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e12c      	b.n	80026b8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f7ff fa23 	bl	80018b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff3f 	bl	8002308 <LL_ADC_IsDeepPowerDownEnabled>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d004      	beq.n	800249a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff ff25 	bl	80022e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff ff5a 	bl	8002358 <LL_ADC_IsInternalRegulatorEnabled>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d115      	bne.n	80024d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff3e 	bl	8002330 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b4:	4b82      	ldr	r3, [pc, #520]	@ (80026c0 <HAL_ADC_Init+0x27c>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	099b      	lsrs	r3, r3, #6
 80024ba:	4a82      	ldr	r2, [pc, #520]	@ (80026c4 <HAL_ADC_Init+0x280>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024c8:	e002      	b.n	80024d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f9      	bne.n	80024ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff ff3c 	bl	8002358 <LL_ADC_IsInternalRegulatorEnabled>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10d      	bne.n	8002502 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ea:	f043 0210 	orr.w	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff75 	bl	80023f6 <LL_ADC_REG_IsConversionOngoing>
 800250c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b00      	cmp	r3, #0
 8002518:	f040 80c5 	bne.w	80026a6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 80c1 	bne.w	80026a6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002528:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800252c:	f043 0202 	orr.w	r2, r3, #2
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff35 	bl	80023a8 <LL_ADC_IsEnabled>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002544:	4860      	ldr	r0, [pc, #384]	@ (80026c8 <HAL_ADC_Init+0x284>)
 8002546:	f7ff ff2f 	bl	80023a8 <LL_ADC_IsEnabled>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	4619      	mov	r1, r3
 8002556:	485d      	ldr	r0, [pc, #372]	@ (80026cc <HAL_ADC_Init+0x288>)
 8002558:	f7ff fd9a 	bl	8002090 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7e5b      	ldrb	r3, [r3, #25]
 8002560:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002566:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800256c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002572:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d106      	bne.n	8002598 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	3b01      	subs	r3, #1
 8002590:	045b      	lsls	r3, r3, #17
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ac:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	4b45      	ldr	r3, [pc, #276]	@ (80026d0 <HAL_ADC_Init+0x28c>)
 80025bc:	4013      	ands	r3, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	69b9      	ldr	r1, [r7, #24]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff ff12 	bl	80023f6 <LL_ADC_REG_IsConversionOngoing>
 80025d2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff1f 	bl	800241c <LL_ADC_INJ_IsConversionOngoing>
 80025de:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d13d      	bne.n	8002662 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d13a      	bne.n	8002662 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025f0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025f8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002608:	f023 0302 	bic.w	r3, r3, #2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	69b9      	ldr	r1, [r7, #24]
 8002612:	430b      	orrs	r3, r1
 8002614:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800261c:	2b01      	cmp	r3, #1
 800261e:	d118      	bne.n	8002652 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800262a:	f023 0304 	bic.w	r3, r3, #4
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002636:	4311      	orrs	r1, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800263c:	4311      	orrs	r1, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002642:	430a      	orrs	r2, r1
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f042 0201 	orr.w	r2, r2, #1
 800264e:	611a      	str	r2, [r3, #16]
 8002650:	e007      	b.n	8002662 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0201 	bic.w	r2, r2, #1
 8002660:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10c      	bne.n	8002684 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	f023 010f 	bic.w	r1, r3, #15
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	1e5a      	subs	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	631a      	str	r2, [r3, #48]	@ 0x30
 8002682:	e007      	b.n	8002694 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 020f 	bic.w	r2, r2, #15
 8002692:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002698:	f023 0303 	bic.w	r3, r3, #3
 800269c:	f043 0201 	orr.w	r2, r3, #1
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80026a4:	e007      	b.n	80026b6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026aa:	f043 0210 	orr.w	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3720      	adds	r7, #32
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000000 	.word	0x20000000
 80026c4:	053e2d63 	.word	0x053e2d63
 80026c8:	50040000 	.word	0x50040000
 80026cc:	50040300 	.word	0x50040300
 80026d0:	fff0c007 	.word	0xfff0c007

080026d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fe86 	bl	80023f6 <LL_ADC_REG_IsConversionOngoing>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d167      	bne.n	80027c0 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_ADC_Start_DMA+0x2a>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e063      	b.n	80027c6 <HAL_ADC_Start_DMA+0xf2>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	f000 fe10 	bl	800332c <ADC_Enable>
 800270c:	4603      	mov	r3, r0
 800270e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d14f      	bne.n	80027b6 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800271a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	655a      	str	r2, [r3, #84]	@ 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	f023 0206 	bic.w	r2, r3, #6
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	659a      	str	r2, [r3, #88]	@ 0x58
 8002742:	e002      	b.n	800274a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	4a20      	ldr	r2, [pc, #128]	@ (80027d0 <HAL_ADC_Start_DMA+0xfc>)
 8002750:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002756:	4a1f      	ldr	r2, [pc, #124]	@ (80027d4 <HAL_ADC_Start_DMA+0x100>)
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275e:	4a1e      	ldr	r2, [pc, #120]	@ (80027d8 <HAL_ADC_Start_DMA+0x104>)
 8002760:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	221c      	movs	r2, #28
 8002768:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0210 	orr.w	r2, r2, #16
 8002780:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3340      	adds	r3, #64	@ 0x40
 800279c:	4619      	mov	r1, r3
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f001 f9c3 	bl	8003b2c <HAL_DMA_Start_IT>
 80027a6:	4603      	mov	r3, r0
 80027a8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fe0d 	bl	80023ce <LL_ADC_REG_StartConversion>
 80027b4:	e006      	b.n	80027c4 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80027be:	e001      	b.n	80027c4 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027c0:	2302      	movs	r3, #2
 80027c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	08003439 	.word	0x08003439
 80027d4:	08003511 	.word	0x08003511
 80027d8:	0800352d 	.word	0x0800352d

080027dc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d017      	beq.n	8002832 <HAL_ADC_IRQHandler+0x56>
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d012      	beq.n	8002832 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fec3 	bl	80035b0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2202      	movs	r2, #2
 8002830:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <HAL_ADC_IRQHandler+0x6a>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800284c:	2b00      	cmp	r3, #0
 800284e:	d05e      	beq.n	800290e <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d059      	beq.n	800290e <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fc93 	bl	80021a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d03e      	beq.n	8002900 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	613b      	str	r3, [r7, #16]
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d135      	bne.n	8002900 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d12e      	bne.n	8002900 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fda5 	bl	80023f6 <LL_ADC_REG_IsConversionOngoing>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d11a      	bne.n	80028e8 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 020c 	bic.w	r2, r2, #12
 80028c0:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d112      	bne.n	8002900 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80028e6:	e00b      	b.n	8002900 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ec:	f043 0210 	orr.w	r2, r3, #16
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f8:	f043 0201 	orr.w	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7fe fc8f 	bl	8001224 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	220c      	movs	r2, #12
 800290c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <HAL_ADC_IRQHandler+0x146>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002928:	2b00      	cmp	r3, #0
 800292a:	d072      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	d06d      	beq.n	8002a12 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002946:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fc64 	bl	8002220 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002958:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fc1f 	bl	80021a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002964:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d047      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d007      	beq.n	800298e <HAL_ADC_IRQHandler+0x1b2>
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d03f      	beq.n	8002a04 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800298a:	2b00      	cmp	r3, #0
 800298c:	d13a      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002998:	2b40      	cmp	r3, #64	@ 0x40
 800299a:	d133      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d12e      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fd36 	bl	800241c <LL_ADC_INJ_IsConversionOngoing>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d11a      	bne.n	80029ec <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029c4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d112      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	f043 0201 	orr.w	r2, r3, #1
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80029ea:	e00b      	b.n	8002a04 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	f043 0210 	orr.w	r2, r3, #16
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fdab 	bl	8003560 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2260      	movs	r2, #96	@ 0x60
 8002a10:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d011      	beq.n	8002a40 <HAL_ADC_IRQHandler+0x264>
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f886 	bl	8002b44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2280      	movs	r2, #128	@ 0x80
 8002a3e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d012      	beq.n	8002a70 <HAL_ADC_IRQHandler+0x294>
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00d      	beq.n	8002a70 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a58:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fd91 	bl	8003588 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d012      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0x2c4>
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00d      	beq.n	8002aa0 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a88:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fd83 	bl	800359c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	f003 0310 	and.w	r3, r3, #16
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d02a      	beq.n	8002b00 <HAL_ADC_IRQHandler+0x324>
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d025      	beq.n	8002b00 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d102      	bne.n	8002ac2 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002abc:	2301      	movs	r3, #1
 8002abe:	61fb      	str	r3, [r7, #28]
 8002ac0:	e008      	b.n	8002ad4 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10e      	bne.n	8002af8 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ade:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	f043 0202 	orr.w	r2, r3, #2
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f830 	bl	8002b58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2210      	movs	r2, #16
 8002afe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d018      	beq.n	8002b3c <HAL_ADC_IRQHandler+0x360>
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d013      	beq.n	8002b3c <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b18:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b24:	f043 0208 	orr.w	r2, r3, #8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b34:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 fd1c 	bl	8003574 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002b3c:	bf00      	nop
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b0b6      	sub	sp, #216	@ 0xd8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x22>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e3b9      	b.n	8003302 <HAL_ADC_ConfigChannel+0x796>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7ff fc2b 	bl	80023f6 <LL_ADC_REG_IsConversionOngoing>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 839e 	bne.w	80032e4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	d824      	bhi.n	8002bfa <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	3b02      	subs	r3, #2
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d81b      	bhi.n	8002bf2 <HAL_ADC_ConfigChannel+0x86>
 8002bba:	a201      	add	r2, pc, #4	@ (adr r2, 8002bc0 <HAL_ADC_ConfigChannel+0x54>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002bd1 	.word	0x08002bd1
 8002bc4:	08002bd9 	.word	0x08002bd9
 8002bc8:	08002be1 	.word	0x08002be1
 8002bcc:	08002be9 	.word	0x08002be9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	605a      	str	r2, [r3, #4]
          break;
 8002bd6:	e010      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	2212      	movs	r2, #18
 8002bdc:	605a      	str	r2, [r3, #4]
          break;
 8002bde:	e00c      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	2218      	movs	r2, #24
 8002be4:	605a      	str	r2, [r3, #4]
          break;
 8002be6:	e008      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bee:	605a      	str	r2, [r3, #4]
          break;
 8002bf0:	e003      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2206      	movs	r2, #6
 8002bf6:	605a      	str	r2, [r3, #4]
          break;
 8002bf8:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6818      	ldr	r0, [r3, #0]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6859      	ldr	r1, [r3, #4]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f7ff fade 	bl	80021c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fbf0 	bl	80023f6 <LL_ADC_REG_IsConversionOngoing>
 8002c16:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff fbfc 	bl	800241c <LL_ADC_INJ_IsConversionOngoing>
 8002c24:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 81a6 	bne.w	8002f7e <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	f040 81a1 	bne.w	8002f7e <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6819      	ldr	r1, [r3, #0]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f7ff fafc 	bl	8002246 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	08db      	lsrs	r3, r3, #3
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d00a      	beq.n	8002c86 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6818      	ldr	r0, [r3, #0]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	6919      	ldr	r1, [r3, #16]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002c80:	f7ff fa3a 	bl	80020f8 <LL_ADC_SetOffset>
 8002c84:	e17b      	b.n	8002f7e <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2100      	movs	r1, #0
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fa57 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10a      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x146>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fa4c 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	0e9b      	lsrs	r3, r3, #26
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	e01e      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x184>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fa41 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002cc8:	fa93 f3a3 	rbit	r3, r3
 8002ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002cd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8002ce0:	2320      	movs	r3, #32
 8002ce2:	e004      	b.n	8002cee <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8002ce4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ce8:	fab3 f383 	clz	r3, r3
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x19c>
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	0e9b      	lsrs	r3, r3, #26
 8002d02:	f003 031f 	and.w	r3, r3, #31
 8002d06:	e018      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1ce>
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002d14:	fa93 f3a3 	rbit	r3, r3
 8002d18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002d24:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8002d2c:	2320      	movs	r3, #32
 8002d2e:	e004      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8002d30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002d34:	fab3 f383 	clz	r3, r3
 8002d38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d106      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2100      	movs	r1, #0
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff fa10 	bl	800216c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2101      	movs	r1, #1
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f9f4 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x20c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f9e9 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	0e9b      	lsrs	r3, r3, #26
 8002d72:	f003 021f 	and.w	r2, r3, #31
 8002d76:	e01e      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x24a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff f9de 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002d9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8002da6:	2320      	movs	r3, #32
 8002da8:	e004      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8002daa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x262>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	0e9b      	lsrs	r3, r3, #26
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	e018      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x294>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002de2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002de6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002dea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8002df2:	2320      	movs	r3, #32
 8002df4:	e004      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8002df6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d106      	bne.n	8002e12 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff f9ad 	bl	800216c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2102      	movs	r1, #2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff f991 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x2d2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2102      	movs	r1, #2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7ff f986 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002e34:	4603      	mov	r3, r0
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	e01e      	b.n	8002e7c <HAL_ADC_ConfigChannel+0x310>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2102      	movs	r1, #2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff f97b 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e54:	fa93 f3a3 	rbit	r3, r3
 8002e58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002e60:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e004      	b.n	8002e7a <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002e70:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x328>
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	0e9b      	lsrs	r3, r3, #26
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	e016      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x356>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ea0:	fa93 f3a3 	rbit	r3, r3
 8002ea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ea6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8002eb4:	2320      	movs	r3, #32
 8002eb6:	e004      	b.n	8002ec2 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8002eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ebc:	fab3 f383 	clz	r3, r3
 8002ec0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d106      	bne.n	8002ed4 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	2102      	movs	r1, #2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff f94c 	bl	800216c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2103      	movs	r1, #3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff f930 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x394>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2103      	movs	r1, #3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff f925 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	f003 021f 	and.w	r2, r3, #31
 8002efe:	e017      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x3c4>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2103      	movs	r1, #3
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff f91a 	bl	8002140 <LL_ADC_GetOffsetChannel>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f12:	fa93 f3a3 	rbit	r3, r3
 8002f16:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002f18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f1a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002f1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002f22:	2320      	movs	r3, #32
 8002f24:	e003      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8002f26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x3dc>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	e011      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x400>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002f56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002f58:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e003      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8002f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d106      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2200      	movs	r2, #0
 8002f76:	2103      	movs	r1, #3
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff f8f7 	bl	800216c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fa10 	bl	80023a8 <LL_ADC_IsEnabled>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f040 8140 	bne.w	8003210 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	6819      	ldr	r1, [r3, #0]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f7ff f97d 	bl	800229c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	4a8f      	ldr	r2, [pc, #572]	@ (80031e4 <HAL_ADC_ConfigChannel+0x678>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	f040 8131 	bne.w	8003210 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x46a>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	0e9b      	lsrs	r3, r3, #26
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	bf94      	ite	ls
 8002fce:	2301      	movls	r3, #1
 8002fd0:	2300      	movhi	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	e019      	b.n	800300a <HAL_ADC_ConfigChannel+0x49e>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fde:	fa93 f3a3 	rbit	r3, r3
 8002fe2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002fe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fe6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002fe8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	e003      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8002ff2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2b09      	cmp	r3, #9
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800300a:	2b00      	cmp	r3, #0
 800300c:	d079      	beq.n	8003102 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003016:	2b00      	cmp	r3, #0
 8003018:	d107      	bne.n	800302a <HAL_ADC_ConfigChannel+0x4be>
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	0e9b      	lsrs	r3, r3, #26
 8003020:	3301      	adds	r3, #1
 8003022:	069b      	lsls	r3, r3, #26
 8003024:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003028:	e015      	b.n	8003056 <HAL_ADC_ConfigChannel+0x4ea>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003038:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800303a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800303c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e003      	b.n	800304e <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	069b      	lsls	r3, r3, #26
 8003052:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x50a>
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	3301      	adds	r3, #1
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2101      	movs	r1, #1
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	e017      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x53a>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003084:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003086:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8003088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 800308e:	2320      	movs	r3, #32
 8003090:	e003      	b.n	800309a <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8003092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003094:	fab3 f383 	clz	r3, r3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	3301      	adds	r3, #1
 800309c:	f003 031f 	and.w	r3, r3, #31
 80030a0:	2101      	movs	r1, #1
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	ea42 0103 	orr.w	r1, r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x560>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	0e9b      	lsrs	r3, r3, #26
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 021f 	and.w	r2, r3, #31
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	051b      	lsls	r3, r3, #20
 80030ca:	e018      	b.n	80030fe <HAL_ADC_ConfigChannel+0x592>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d4:	fa93 f3a3 	rbit	r3, r3
 80030d8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80030da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80030de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80030e4:	2320      	movs	r3, #32
 80030e6:	e003      	b.n	80030f0 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80030e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ea:	fab3 f383 	clz	r3, r3
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	3301      	adds	r3, #1
 80030f2:	f003 021f 	and.w	r2, r3, #31
 80030f6:	4613      	mov	r3, r2
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	4413      	add	r3, r2
 80030fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030fe:	430b      	orrs	r3, r1
 8003100:	e081      	b.n	8003206 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310a:	2b00      	cmp	r3, #0
 800310c:	d107      	bne.n	800311e <HAL_ADC_ConfigChannel+0x5b2>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	0e9b      	lsrs	r3, r3, #26
 8003114:	3301      	adds	r3, #1
 8003116:	069b      	lsls	r3, r3, #26
 8003118:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800311c:	e015      	b.n	800314a <HAL_ADC_ConfigChannel+0x5de>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800312c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800312e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8003136:	2320      	movs	r3, #32
 8003138:	e003      	b.n	8003142 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 800313a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	3301      	adds	r3, #1
 8003144:	069b      	lsls	r3, r3, #26
 8003146:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_ADC_ConfigChannel+0x5fe>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e9b      	lsrs	r3, r3, #26
 800315c:	3301      	adds	r3, #1
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2101      	movs	r1, #1
 8003164:	fa01 f303 	lsl.w	r3, r1, r3
 8003168:	e017      	b.n	800319a <HAL_ADC_ConfigChannel+0x62e>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	61fb      	str	r3, [r7, #28]
  return result;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8003182:	2320      	movs	r3, #32
 8003184:	e003      	b.n	800318e <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8003186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003188:	fab3 f383 	clz	r3, r3
 800318c:	b2db      	uxtb	r3, r3
 800318e:	3301      	adds	r3, #1
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	2101      	movs	r1, #1
 8003196:	fa01 f303 	lsl.w	r3, r1, r3
 800319a:	ea42 0103 	orr.w	r1, r2, r3
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10d      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x65a>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	0e9b      	lsrs	r3, r3, #26
 80031b0:	3301      	adds	r3, #1
 80031b2:	f003 021f 	and.w	r2, r3, #31
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	3b1e      	subs	r3, #30
 80031be:	051b      	lsls	r3, r3, #20
 80031c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031c4:	e01e      	b.n	8003204 <HAL_ADC_ConfigChannel+0x698>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	613b      	str	r3, [r7, #16]
  return result;
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d104      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80031de:	2320      	movs	r3, #32
 80031e0:	e006      	b.n	80031f0 <HAL_ADC_ConfigChannel+0x684>
 80031e2:	bf00      	nop
 80031e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fab3 f383 	clz	r3, r3
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	3301      	adds	r3, #1
 80031f2:	f003 021f 	and.w	r2, r3, #31
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	3b1e      	subs	r3, #30
 80031fe:	051b      	lsls	r3, r3, #20
 8003200:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003204:	430b      	orrs	r3, r1
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	6892      	ldr	r2, [r2, #8]
 800320a:	4619      	mov	r1, r3
 800320c:	f7ff f81b 	bl	8002246 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b3d      	ldr	r3, [pc, #244]	@ (800330c <HAL_ADC_ConfigChannel+0x7a0>)
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d06c      	beq.n	80032f6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800321c:	483c      	ldr	r0, [pc, #240]	@ (8003310 <HAL_ADC_ConfigChannel+0x7a4>)
 800321e:	f7fe ff5d 	bl	80020dc <LL_ADC_GetCommonPathInternalCh>
 8003222:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a3a      	ldr	r2, [pc, #232]	@ (8003314 <HAL_ADC_ConfigChannel+0x7a8>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d127      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003234:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d121      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a35      	ldr	r2, [pc, #212]	@ (8003318 <HAL_ADC_ConfigChannel+0x7ac>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d157      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003246:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800324a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800324e:	4619      	mov	r1, r3
 8003250:	482f      	ldr	r0, [pc, #188]	@ (8003310 <HAL_ADC_ConfigChannel+0x7a4>)
 8003252:	f7fe ff30 	bl	80020b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003256:	4b31      	ldr	r3, [pc, #196]	@ (800331c <HAL_ADC_ConfigChannel+0x7b0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	4a30      	ldr	r2, [pc, #192]	@ (8003320 <HAL_ADC_ConfigChannel+0x7b4>)
 800325e:	fba2 2303 	umull	r2, r3, r2, r3
 8003262:	099b      	lsrs	r3, r3, #6
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	4613      	mov	r3, r2
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	4413      	add	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003270:	e002      	b.n	8003278 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	3b01      	subs	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f9      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327e:	e03a      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a27      	ldr	r2, [pc, #156]	@ (8003324 <HAL_ADC_ConfigChannel+0x7b8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d113      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x746>
 800328a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800328e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10d      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1f      	ldr	r2, [pc, #124]	@ (8003318 <HAL_ADC_ConfigChannel+0x7ac>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d12a      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032a8:	4619      	mov	r1, r3
 80032aa:	4819      	ldr	r0, [pc, #100]	@ (8003310 <HAL_ADC_ConfigChannel+0x7a4>)
 80032ac:	f7fe ff03 	bl	80020b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032b0:	e021      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003328 <HAL_ADC_ConfigChannel+0x7bc>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d11c      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d116      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a12      	ldr	r2, [pc, #72]	@ (8003318 <HAL_ADC_ConfigChannel+0x7ac>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d111      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80032d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032da:	4619      	mov	r1, r3
 80032dc:	480c      	ldr	r0, [pc, #48]	@ (8003310 <HAL_ADC_ConfigChannel+0x7a4>)
 80032de:	f7fe feea 	bl	80020b6 <LL_ADC_SetCommonPathInternalCh>
 80032e2:	e008      	b.n	80032f6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e8:	f043 0220 	orr.w	r2, r3, #32
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80032fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003302:	4618      	mov	r0, r3
 8003304:	37d8      	adds	r7, #216	@ 0xd8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	80080000 	.word	0x80080000
 8003310:	50040300 	.word	0x50040300
 8003314:	c7520000 	.word	0xc7520000
 8003318:	50040000 	.word	0x50040000
 800331c:	20000000 	.word	0x20000000
 8003320:	053e2d63 	.word	0x053e2d63
 8003324:	cb840000 	.word	0xcb840000
 8003328:	80000001 	.word	0x80000001

0800332c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003334:	2300      	movs	r3, #0
 8003336:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff f833 	bl	80023a8 <LL_ADC_IsEnabled>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d169      	bne.n	800341c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	4b36      	ldr	r3, [pc, #216]	@ (8003428 <ADC_Enable+0xfc>)
 8003350:	4013      	ands	r3, r2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00d      	beq.n	8003372 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335a:	f043 0210 	orr.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003366:	f043 0201 	orr.w	r2, r3, #1
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e055      	b.n	800341e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff f802 	bl	8002380 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800337c:	482b      	ldr	r0, [pc, #172]	@ (800342c <ADC_Enable+0x100>)
 800337e:	f7fe fead 	bl	80020dc <LL_ADC_GetCommonPathInternalCh>
 8003382:	4603      	mov	r3, r0
 8003384:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d013      	beq.n	80033b4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800338c:	4b28      	ldr	r3, [pc, #160]	@ (8003430 <ADC_Enable+0x104>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	4a28      	ldr	r2, [pc, #160]	@ (8003434 <ADC_Enable+0x108>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80033a6:	e002      	b.n	80033ae <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f9      	bne.n	80033a8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033b4:	f7fe fe60 	bl	8002078 <HAL_GetTick>
 80033b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033ba:	e028      	b.n	800340e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fe fff1 	bl	80023a8 <LL_ADC_IsEnabled>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d104      	bne.n	80033d6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7fe ffd5 	bl	8002380 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033d6:	f7fe fe4f 	bl	8002078 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d914      	bls.n	800340e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d00d      	beq.n	800340e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f6:	f043 0210 	orr.w	r2, r3, #16
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e007      	b.n	800341e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b01      	cmp	r3, #1
 800341a:	d1cf      	bne.n	80033bc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	8000003f 	.word	0x8000003f
 800342c:	50040300 	.word	0x50040300
 8003430:	20000000 	.word	0x20000000
 8003434:	053e2d63 	.word	0x053e2d63

08003438 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003444:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800344a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800344e:	2b00      	cmp	r3, #0
 8003450:	d14b      	bne.n	80034ea <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003456:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0308 	and.w	r3, r3, #8
 8003468:	2b00      	cmp	r3, #0
 800346a:	d021      	beq.n	80034b0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fe96 	bl	80021a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d032      	beq.n	80034e2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d12b      	bne.n	80034e2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800348e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d11f      	bne.n	80034e2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a6:	f043 0201 	orr.w	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80034ae:	e018      	b.n	80034e2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d111      	bne.n	80034e2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d105      	bne.n	80034e2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	f7fd fe9e 	bl	8001224 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034e8:	e00e      	b.n	8003508 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f7ff fb2e 	bl	8002b58 <HAL_ADC_ErrorCallback>
}
 80034fc:	e004      	b.n	8003508 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	4798      	blx	r3
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f7fd fe72 	bl	8001208 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003538:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	f043 0204 	orr.w	r2, r3, #4
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f7ff fb00 	bl	8002b58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80035e0:	4013      	ands	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80035f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f6:	4a04      	ldr	r2, [pc, #16]	@ (8003608 <__NVIC_SetPriorityGrouping+0x44>)
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	60d3      	str	r3, [r2, #12]
}
 80035fc:	bf00      	nop
 80035fe:	3714      	adds	r7, #20
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	e000ed00 	.word	0xe000ed00

0800360c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003610:	4b04      	ldr	r3, [pc, #16]	@ (8003624 <__NVIC_GetPriorityGrouping+0x18>)
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	0a1b      	lsrs	r3, r3, #8
 8003616:	f003 0307 	and.w	r3, r3, #7
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000ed00 	.word	0xe000ed00

08003628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003636:	2b00      	cmp	r3, #0
 8003638:	db0b      	blt.n	8003652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800363a:	79fb      	ldrb	r3, [r7, #7]
 800363c:	f003 021f 	and.w	r2, r3, #31
 8003640:	4907      	ldr	r1, [pc, #28]	@ (8003660 <__NVIC_EnableIRQ+0x38>)
 8003642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003646:	095b      	lsrs	r3, r3, #5
 8003648:	2001      	movs	r0, #1
 800364a:	fa00 f202 	lsl.w	r2, r0, r2
 800364e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e100 	.word	0xe000e100

08003664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	6039      	str	r1, [r7, #0]
 800366e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003674:	2b00      	cmp	r3, #0
 8003676:	db0a      	blt.n	800368e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	b2da      	uxtb	r2, r3
 800367c:	490c      	ldr	r1, [pc, #48]	@ (80036b0 <__NVIC_SetPriority+0x4c>)
 800367e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003682:	0112      	lsls	r2, r2, #4
 8003684:	b2d2      	uxtb	r2, r2
 8003686:	440b      	add	r3, r1
 8003688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800368c:	e00a      	b.n	80036a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	b2da      	uxtb	r2, r3
 8003692:	4908      	ldr	r1, [pc, #32]	@ (80036b4 <__NVIC_SetPriority+0x50>)
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	3b04      	subs	r3, #4
 800369c:	0112      	lsls	r2, r2, #4
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	440b      	add	r3, r1
 80036a2:	761a      	strb	r2, [r3, #24]
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	e000e100 	.word	0xe000e100
 80036b4:	e000ed00 	.word	0xe000ed00

080036b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	@ 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	bf28      	it	cs
 80036d6:	2304      	movcs	r3, #4
 80036d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3304      	adds	r3, #4
 80036de:	2b06      	cmp	r3, #6
 80036e0:	d902      	bls.n	80036e8 <NVIC_EncodePriority+0x30>
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3b03      	subs	r3, #3
 80036e6:	e000      	b.n	80036ea <NVIC_EncodePriority+0x32>
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43da      	mvns	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	401a      	ands	r2, r3
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003700:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	fa01 f303 	lsl.w	r3, r1, r3
 800370a:	43d9      	mvns	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003710:	4313      	orrs	r3, r2
         );
}
 8003712:	4618      	mov	r0, r3
 8003714:	3724      	adds	r7, #36	@ 0x24
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003730:	d301      	bcc.n	8003736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003732:	2301      	movs	r3, #1
 8003734:	e00f      	b.n	8003756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003736:	4a0a      	ldr	r2, [pc, #40]	@ (8003760 <SysTick_Config+0x40>)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800373e:	210f      	movs	r1, #15
 8003740:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003744:	f7ff ff8e 	bl	8003664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003748:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <SysTick_Config+0x40>)
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800374e:	4b04      	ldr	r3, [pc, #16]	@ (8003760 <SysTick_Config+0x40>)
 8003750:	2207      	movs	r2, #7
 8003752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3708      	adds	r7, #8
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	e000e010 	.word	0xe000e010

08003764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff ff29 	bl	80035c4 <__NVIC_SetPriorityGrouping>
}
 8003772:	bf00      	nop
 8003774:	3708      	adds	r7, #8
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b086      	sub	sp, #24
 800377e:	af00      	add	r7, sp, #0
 8003780:	4603      	mov	r3, r0
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003788:	2300      	movs	r3, #0
 800378a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800378c:	f7ff ff3e 	bl	800360c <__NVIC_GetPriorityGrouping>
 8003790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68b9      	ldr	r1, [r7, #8]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff ff8e 	bl	80036b8 <NVIC_EncodePriority>
 800379c:	4602      	mov	r2, r0
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff ff5d 	bl	8003664 <__NVIC_SetPriority>
}
 80037aa:	bf00      	nop
 80037ac:	3718      	adds	r7, #24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4603      	mov	r3, r0
 80037ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff31 	bl	8003628 <__NVIC_EnableIRQ>
}
 80037c6:	bf00      	nop
 80037c8:	3708      	adds	r7, #8
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff ffa2 	bl	8003720 <SysTick_Config>
 80037dc:	4603      	mov	r3, r0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e054      	b.n	80038a4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	7f5b      	ldrb	r3, [r3, #29]
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d105      	bne.n	8003810 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fe f8ce 	bl	80019ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	791b      	ldrb	r3, [r3, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10c      	bne.n	8003838 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a22      	ldr	r2, [pc, #136]	@ (80038ac <HAL_CRC_Init+0xc4>)
 8003824:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0218 	bic.w	r2, r2, #24
 8003834:	609a      	str	r2, [r3, #8]
 8003836:	e00c      	b.n	8003852 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6899      	ldr	r1, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	461a      	mov	r2, r3
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f834 	bl	80038b0 <HAL_CRCEx_Polynomial_Set>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e028      	b.n	80038a4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	795b      	ldrb	r3, [r3, #5]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003862:	611a      	str	r2, [r3, #16]
 8003864:	e004      	b.n	8003870 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6912      	ldr	r2, [r2, #16]
 800386e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699a      	ldr	r2, [r3, #24]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	04c11db7 	.word	0x04c11db7

080038b0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80038c0:	231f      	movs	r3, #31
 80038c2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80038c4:	bf00      	nop
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1e5a      	subs	r2, r3, #1
 80038ca:	613a      	str	r2, [r7, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d009      	beq.n	80038e4 <HAL_CRCEx_Polynomial_Set+0x34>
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 031f 	and.w	r3, r3, #31
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b18      	cmp	r3, #24
 80038e8:	d846      	bhi.n	8003978 <HAL_CRCEx_Polynomial_Set+0xc8>
 80038ea:	a201      	add	r2, pc, #4	@ (adr r2, 80038f0 <HAL_CRCEx_Polynomial_Set+0x40>)
 80038ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f0:	0800397f 	.word	0x0800397f
 80038f4:	08003979 	.word	0x08003979
 80038f8:	08003979 	.word	0x08003979
 80038fc:	08003979 	.word	0x08003979
 8003900:	08003979 	.word	0x08003979
 8003904:	08003979 	.word	0x08003979
 8003908:	08003979 	.word	0x08003979
 800390c:	08003979 	.word	0x08003979
 8003910:	0800396d 	.word	0x0800396d
 8003914:	08003979 	.word	0x08003979
 8003918:	08003979 	.word	0x08003979
 800391c:	08003979 	.word	0x08003979
 8003920:	08003979 	.word	0x08003979
 8003924:	08003979 	.word	0x08003979
 8003928:	08003979 	.word	0x08003979
 800392c:	08003979 	.word	0x08003979
 8003930:	08003961 	.word	0x08003961
 8003934:	08003979 	.word	0x08003979
 8003938:	08003979 	.word	0x08003979
 800393c:	08003979 	.word	0x08003979
 8003940:	08003979 	.word	0x08003979
 8003944:	08003979 	.word	0x08003979
 8003948:	08003979 	.word	0x08003979
 800394c:	08003979 	.word	0x08003979
 8003950:	08003955 	.word	0x08003955
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	2b06      	cmp	r3, #6
 8003958:	d913      	bls.n	8003982 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800395e:	e010      	b.n	8003982 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b07      	cmp	r3, #7
 8003964:	d90f      	bls.n	8003986 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800396a:	e00c      	b.n	8003986 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	2b0f      	cmp	r3, #15
 8003970:	d90b      	bls.n	800398a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003976:	e008      	b.n	800398a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	75fb      	strb	r3, [r7, #23]
      break;
 800397c:	e006      	b.n	800398c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800397e:	bf00      	nop
 8003980:	e004      	b.n	800398c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800398a:	bf00      	nop
  }
  if (status == HAL_OK)
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10d      	bne.n	80039ae <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 0118 	bic.w	r1, r3, #24
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	371c      	adds	r7, #28
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e098      	b.n	8003b00 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	461a      	mov	r2, r3
 80039d4:	4b4d      	ldr	r3, [pc, #308]	@ (8003b0c <HAL_DMA_Init+0x150>)
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d80f      	bhi.n	80039fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003b10 <HAL_DMA_Init+0x154>)
 80039e2:	4413      	add	r3, r2
 80039e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003b14 <HAL_DMA_Init+0x158>)
 80039e6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	009a      	lsls	r2, r3, #2
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a48      	ldr	r2, [pc, #288]	@ (8003b18 <HAL_DMA_Init+0x15c>)
 80039f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80039f8:	e00e      	b.n	8003a18 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	4b46      	ldr	r3, [pc, #280]	@ (8003b1c <HAL_DMA_Init+0x160>)
 8003a02:	4413      	add	r3, r2
 8003a04:	4a43      	ldr	r2, [pc, #268]	@ (8003b14 <HAL_DMA_Init+0x158>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	009a      	lsls	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a42      	ldr	r2, [pc, #264]	@ (8003b20 <HAL_DMA_Init+0x164>)
 8003a16:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a72:	d039      	beq.n	8003ae8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	4a27      	ldr	r2, [pc, #156]	@ (8003b18 <HAL_DMA_Init+0x15c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d11a      	bne.n	8003ab4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003a7e:	4b29      	ldr	r3, [pc, #164]	@ (8003b24 <HAL_DMA_Init+0x168>)
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a86:	f003 031c 	and.w	r3, r3, #28
 8003a8a:	210f      	movs	r1, #15
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	4924      	ldr	r1, [pc, #144]	@ (8003b24 <HAL_DMA_Init+0x168>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003a98:	4b22      	ldr	r3, [pc, #136]	@ (8003b24 <HAL_DMA_Init+0x168>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6859      	ldr	r1, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aa4:	f003 031c 	and.w	r3, r3, #28
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	491d      	ldr	r1, [pc, #116]	@ (8003b24 <HAL_DMA_Init+0x168>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	600b      	str	r3, [r1, #0]
 8003ab2:	e019      	b.n	8003ae8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8003b28 <HAL_DMA_Init+0x16c>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abc:	f003 031c 	and.w	r3, r3, #28
 8003ac0:	210f      	movs	r1, #15
 8003ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	4917      	ldr	r1, [pc, #92]	@ (8003b28 <HAL_DMA_Init+0x16c>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003ace:	4b16      	ldr	r3, [pc, #88]	@ (8003b28 <HAL_DMA_Init+0x16c>)
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6859      	ldr	r1, [r3, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ada:	f003 031c 	and.w	r3, r3, #28
 8003ade:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae2:	4911      	ldr	r1, [pc, #68]	@ (8003b28 <HAL_DMA_Init+0x16c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003afe:	2300      	movs	r3, #0
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40020407 	.word	0x40020407
 8003b10:	bffdfff8 	.word	0xbffdfff8
 8003b14:	cccccccd 	.word	0xcccccccd
 8003b18:	40020000 	.word	0x40020000
 8003b1c:	bffdfbf8 	.word	0xbffdfbf8
 8003b20:	40020400 	.word	0x40020400
 8003b24:	400200a8 	.word	0x400200a8
 8003b28:	400204a8 	.word	0x400204a8

08003b2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d101      	bne.n	8003b4c <HAL_DMA_Start_IT+0x20>
 8003b48:	2302      	movs	r3, #2
 8003b4a:	e04b      	b.n	8003be4 <HAL_DMA_Start_IT+0xb8>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d13a      	bne.n	8003bd6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0201 	bic.w	r2, r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	68b9      	ldr	r1, [r7, #8]
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f8e0 	bl	8003d4a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d008      	beq.n	8003ba4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f042 020e 	orr.w	r2, r2, #14
 8003ba0:	601a      	str	r2, [r3, #0]
 8003ba2:	e00f      	b.n	8003bc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0204 	bic.w	r2, r2, #4
 8003bb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 020a 	orr.w	r2, r2, #10
 8003bc2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e005      	b.n	8003be2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
 8003be0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c08:	f003 031c 	and.w	r3, r3, #28
 8003c0c:	2204      	movs	r2, #4
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d026      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x7a>
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d021      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d107      	bne.n	8003c40 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0204 	bic.w	r2, r2, #4
 8003c3e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c44:	f003 021c 	and.w	r2, r3, #28
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4c:	2104      	movs	r1, #4
 8003c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c52:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d071      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8003c64:	e06c      	b.n	8003d40 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f003 031c 	and.w	r3, r3, #28
 8003c6e:	2202      	movs	r2, #2
 8003c70:	409a      	lsls	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4013      	ands	r3, r2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d02e      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0xec>
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d029      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0320 	and.w	r3, r3, #32
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 020a 	bic.w	r2, r2, #10
 8003ca0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	f003 021c 	and.w	r2, r3, #28
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cbc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if(hdma->XferCpltCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d038      	beq.n	8003d40 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003cd6:	e033      	b.n	8003d40 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cdc:	f003 031c 	and.w	r3, r3, #28
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d02a      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x156>
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d025      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 020e 	bic.w	r2, r2, #14
 8003d04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	f003 021c 	and.w	r2, r3, #28
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	2101      	movs	r1, #1
 8003d14:	fa01 f202 	lsl.w	r2, r1, r2
 8003d18:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003d40:	bf00      	nop
 8003d42:	bf00      	nop
}
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b085      	sub	sp, #20
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5c:	f003 021c 	and.w	r2, r3, #28
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	2101      	movs	r1, #1
 8003d66:	fa01 f202 	lsl.w	r2, r1, r2
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	2b10      	cmp	r3, #16
 8003d7a:	d108      	bne.n	8003d8e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003d8c:	e007      	b.n	8003d9e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	60da      	str	r2, [r3, #12]
}
 8003d9e:	bf00      	nop
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dba:	e148      	b.n	800404e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	4013      	ands	r3, r2
 8003dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f000 813a 	beq.w	8004048 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0303 	and.w	r3, r3, #3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d005      	beq.n	8003dec <HAL_GPIO_Init+0x40>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0303 	and.w	r3, r3, #3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d130      	bne.n	8003e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	005b      	lsls	r3, r3, #1
 8003df6:	2203      	movs	r2, #3
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43db      	mvns	r3, r3
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e22:	2201      	movs	r2, #1
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	f003 0201 	and.w	r2, r3, #1
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d017      	beq.n	8003e8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	2203      	movs	r2, #3
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d123      	bne.n	8003ede <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	08da      	lsrs	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3208      	adds	r2, #8
 8003e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	220f      	movs	r2, #15
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	691a      	ldr	r2, [r3, #16]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	08da      	lsrs	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3208      	adds	r2, #8
 8003ed8:	6939      	ldr	r1, [r7, #16]
 8003eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	2203      	movs	r2, #3
 8003eea:	fa02 f303 	lsl.w	r3, r2, r3
 8003eee:	43db      	mvns	r3, r3
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f003 0203 	and.w	r2, r3, #3
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	fa02 f303 	lsl.w	r3, r2, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8094 	beq.w	8004048 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f20:	4b52      	ldr	r3, [pc, #328]	@ (800406c <HAL_GPIO_Init+0x2c0>)
 8003f22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f24:	4a51      	ldr	r2, [pc, #324]	@ (800406c <HAL_GPIO_Init+0x2c0>)
 8003f26:	f043 0301 	orr.w	r3, r3, #1
 8003f2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f2c:	4b4f      	ldr	r3, [pc, #316]	@ (800406c <HAL_GPIO_Init+0x2c0>)
 8003f2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f30:	f003 0301 	and.w	r3, r3, #1
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003f38:	4a4d      	ldr	r2, [pc, #308]	@ (8004070 <HAL_GPIO_Init+0x2c4>)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	220f      	movs	r2, #15
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f62:	d00d      	beq.n	8003f80 <HAL_GPIO_Init+0x1d4>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	4a43      	ldr	r2, [pc, #268]	@ (8004074 <HAL_GPIO_Init+0x2c8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <HAL_GPIO_Init+0x1d0>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	4a42      	ldr	r2, [pc, #264]	@ (8004078 <HAL_GPIO_Init+0x2cc>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d101      	bne.n	8003f78 <HAL_GPIO_Init+0x1cc>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e004      	b.n	8003f82 <HAL_GPIO_Init+0x1d6>
 8003f78:	2307      	movs	r3, #7
 8003f7a:	e002      	b.n	8003f82 <HAL_GPIO_Init+0x1d6>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <HAL_GPIO_Init+0x1d6>
 8003f80:	2300      	movs	r3, #0
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	f002 0203 	and.w	r2, r2, #3
 8003f88:	0092      	lsls	r2, r2, #2
 8003f8a:	4093      	lsls	r3, r2
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f92:	4937      	ldr	r1, [pc, #220]	@ (8004070 <HAL_GPIO_Init+0x2c4>)
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	3302      	adds	r3, #2
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003fa0:	4b36      	ldr	r3, [pc, #216]	@ (800407c <HAL_GPIO_Init+0x2d0>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	43db      	mvns	r3, r3
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fc4:	4a2d      	ldr	r2, [pc, #180]	@ (800407c <HAL_GPIO_Init+0x2d0>)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003fca:	4b2c      	ldr	r3, [pc, #176]	@ (800407c <HAL_GPIO_Init+0x2d0>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	43db      	mvns	r3, r3
 8003fd4:	693a      	ldr	r2, [r7, #16]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d003      	beq.n	8003fee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fee:	4a23      	ldr	r2, [pc, #140]	@ (800407c <HAL_GPIO_Init+0x2d0>)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ff4:	4b21      	ldr	r3, [pc, #132]	@ (800407c <HAL_GPIO_Init+0x2d0>)
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d003      	beq.n	8004018 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	4313      	orrs	r3, r2
 8004016:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004018:	4a18      	ldr	r2, [pc, #96]	@ (800407c <HAL_GPIO_Init+0x2d0>)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800401e:	4b17      	ldr	r3, [pc, #92]	@ (800407c <HAL_GPIO_Init+0x2d0>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	43db      	mvns	r3, r3
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4313      	orrs	r3, r2
 8004040:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004042:	4a0e      	ldr	r2, [pc, #56]	@ (800407c <HAL_GPIO_Init+0x2d0>)
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	3301      	adds	r3, #1
 800404c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	fa22 f303 	lsr.w	r3, r2, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	f47f aeaf 	bne.w	8003dbc <HAL_GPIO_Init+0x10>
  }
}
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	371c      	adds	r7, #28
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	40021000 	.word	0x40021000
 8004070:	40010000 	.word	0x40010000
 8004074:	48000400 	.word	0x48000400
 8004078:	48000800 	.word	0x48000800
 800407c:	40010400 	.word	0x40010400

08004080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	807b      	strh	r3, [r7, #2]
 800408c:	4613      	mov	r3, r2
 800408e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004090:	787b      	ldrb	r3, [r7, #1]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800409c:	e002      	b.n	80040a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800409e:	887a      	ldrh	r2, [r7, #2]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4013      	ands	r3, r2
 80040c8:	041a      	lsls	r2, r3, #16
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	43d9      	mvns	r1, r3
 80040ce:	887b      	ldrh	r3, [r7, #2]
 80040d0:	400b      	ands	r3, r1
 80040d2:	431a      	orrs	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	619a      	str	r2, [r3, #24]
}
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e8:	4b05      	ldr	r3, [pc, #20]	@ (8004100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a04      	ldr	r2, [pc, #16]	@ (8004100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f2:	6013      	str	r3, [r2, #0]
}
 80040f4:	bf00      	nop
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40007000 	.word	0x40007000

08004104 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004108:	4b04      	ldr	r3, [pc, #16]	@ (800411c <HAL_PWREx_GetVoltageRange+0x18>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004110:	4618      	mov	r0, r3
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	40007000 	.word	0x40007000

08004120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800412e:	d130      	bne.n	8004192 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004130:	4b23      	ldr	r3, [pc, #140]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800413c:	d038      	beq.n	80041b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800413e:	4b20      	ldr	r3, [pc, #128]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004146:	4a1e      	ldr	r2, [pc, #120]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004148:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800414c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800414e:	4b1d      	ldr	r3, [pc, #116]	@ (80041c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2232      	movs	r2, #50	@ 0x32
 8004154:	fb02 f303 	mul.w	r3, r2, r3
 8004158:	4a1b      	ldr	r2, [pc, #108]	@ (80041c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	0c9b      	lsrs	r3, r3, #18
 8004160:	3301      	adds	r3, #1
 8004162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004164:	e002      	b.n	800416c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3b01      	subs	r3, #1
 800416a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800416c:	4b14      	ldr	r3, [pc, #80]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004178:	d102      	bne.n	8004180 <HAL_PWREx_ControlVoltageScaling+0x60>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1f2      	bne.n	8004166 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004180:	4b0f      	ldr	r3, [pc, #60]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800418c:	d110      	bne.n	80041b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e00f      	b.n	80041b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004192:	4b0b      	ldr	r3, [pc, #44]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800419a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800419e:	d007      	beq.n	80041b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041a0:	4b07      	ldr	r3, [pc, #28]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80041a8:	4a05      	ldr	r2, [pc, #20]	@ (80041c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40007000 	.word	0x40007000
 80041c4:	20000000 	.word	0x20000000
 80041c8:	431bde83 	.word	0x431bde83

080041cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d102      	bne.n	80041e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	f000 bc02 	b.w	80049e4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041e0:	4b96      	ldr	r3, [pc, #600]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 030c 	and.w	r3, r3, #12
 80041e8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ea:	4b94      	ldr	r3, [pc, #592]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80e4 	beq.w	80043ca <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_RCC_OscConfig+0x4c>
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	2b0c      	cmp	r3, #12
 800420c:	f040 808b 	bne.w	8004326 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	2b01      	cmp	r3, #1
 8004214:	f040 8087 	bne.w	8004326 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004218:	4b88      	ldr	r3, [pc, #544]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d005      	beq.n	8004230 <HAL_RCC_OscConfig+0x64>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e3d9      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1a      	ldr	r2, [r3, #32]
 8004234:	4b81      	ldr	r3, [pc, #516]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d004      	beq.n	800424a <HAL_RCC_OscConfig+0x7e>
 8004240:	4b7e      	ldr	r3, [pc, #504]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004248:	e005      	b.n	8004256 <HAL_RCC_OscConfig+0x8a>
 800424a:	4b7c      	ldr	r3, [pc, #496]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 800424c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004250:	091b      	lsrs	r3, r3, #4
 8004252:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004256:	4293      	cmp	r3, r2
 8004258:	d223      	bcs.n	80042a2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fd8c 	bl	8004d7c <RCC_SetFlashLatencyFromMSIRange>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	d001      	beq.n	800426e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e3ba      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800426e:	4b73      	ldr	r3, [pc, #460]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a72      	ldr	r2, [pc, #456]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004274:	f043 0308 	orr.w	r3, r3, #8
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b70      	ldr	r3, [pc, #448]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	496d      	ldr	r1, [pc, #436]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800428c:	4b6b      	ldr	r3, [pc, #428]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	021b      	lsls	r3, r3, #8
 800429a:	4968      	ldr	r1, [pc, #416]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 800429c:	4313      	orrs	r3, r2
 800429e:	604b      	str	r3, [r1, #4]
 80042a0:	e025      	b.n	80042ee <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042a2:	4b66      	ldr	r3, [pc, #408]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a65      	ldr	r2, [pc, #404]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80042a8:	f043 0308 	orr.w	r3, r3, #8
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	4b63      	ldr	r3, [pc, #396]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4960      	ldr	r1, [pc, #384]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c0:	4b5e      	ldr	r3, [pc, #376]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	021b      	lsls	r3, r3, #8
 80042ce:	495b      	ldr	r1, [pc, #364]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fd4c 	bl	8004d7c <RCC_SetFlashLatencyFromMSIRange>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e37a      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ee:	f000 fc81 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 80042f2:	4602      	mov	r2, r0
 80042f4:	4b51      	ldr	r3, [pc, #324]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	091b      	lsrs	r3, r3, #4
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	4950      	ldr	r1, [pc, #320]	@ (8004440 <HAL_RCC_OscConfig+0x274>)
 8004300:	5ccb      	ldrb	r3, [r1, r3]
 8004302:	f003 031f 	and.w	r3, r3, #31
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	4a4e      	ldr	r2, [pc, #312]	@ (8004444 <HAL_RCC_OscConfig+0x278>)
 800430c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800430e:	4b4e      	ldr	r3, [pc, #312]	@ (8004448 <HAL_RCC_OscConfig+0x27c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fd fe60 	bl	8001fd8 <HAL_InitTick>
 8004318:	4603      	mov	r3, r0
 800431a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800431c:	7bfb      	ldrb	r3, [r7, #15]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d052      	beq.n	80043c8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	e35e      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d032      	beq.n	8004394 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800432e:	4b43      	ldr	r3, [pc, #268]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a42      	ldr	r2, [pc, #264]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800433a:	f7fd fe9d 	bl	8002078 <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004342:	f7fd fe99 	bl	8002078 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e347      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004354:	4b39      	ldr	r3, [pc, #228]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004360:	4b36      	ldr	r3, [pc, #216]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a35      	ldr	r2, [pc, #212]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004366:	f043 0308 	orr.w	r3, r3, #8
 800436a:	6013      	str	r3, [r2, #0]
 800436c:	4b33      	ldr	r3, [pc, #204]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4930      	ldr	r1, [pc, #192]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 800437a:	4313      	orrs	r3, r2
 800437c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800437e:	4b2f      	ldr	r3, [pc, #188]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	021b      	lsls	r3, r3, #8
 800438c:	492b      	ldr	r1, [pc, #172]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]
 8004392:	e01a      	b.n	80043ca <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004394:	4b29      	ldr	r3, [pc, #164]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a28      	ldr	r2, [pc, #160]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043a0:	f7fd fe6a 	bl	8002078 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043a8:	f7fd fe66 	bl	8002078 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e314      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043ba:	4b20      	ldr	r3, [pc, #128]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1f0      	bne.n	80043a8 <HAL_RCC_OscConfig+0x1dc>
 80043c6:	e000      	b.n	80043ca <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d073      	beq.n	80044be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_OscConfig+0x21c>
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d10e      	bne.n	8004400 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b03      	cmp	r3, #3
 80043e6:	d10b      	bne.n	8004400 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e8:	4b14      	ldr	r3, [pc, #80]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d063      	beq.n	80044bc <HAL_RCC_OscConfig+0x2f0>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d15f      	bne.n	80044bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e2f1      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004408:	d106      	bne.n	8004418 <HAL_RCC_OscConfig+0x24c>
 800440a:	4b0c      	ldr	r3, [pc, #48]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a0b      	ldr	r2, [pc, #44]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004414:	6013      	str	r3, [r2, #0]
 8004416:	e025      	b.n	8004464 <HAL_RCC_OscConfig+0x298>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004420:	d114      	bne.n	800444c <HAL_RCC_OscConfig+0x280>
 8004422:	4b06      	ldr	r3, [pc, #24]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a05      	ldr	r2, [pc, #20]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b03      	ldr	r3, [pc, #12]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a02      	ldr	r2, [pc, #8]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e013      	b.n	8004464 <HAL_RCC_OscConfig+0x298>
 800443c:	40021000 	.word	0x40021000
 8004440:	0800bbf4 	.word	0x0800bbf4
 8004444:	20000000 	.word	0x20000000
 8004448:	20000004 	.word	0x20000004
 800444c:	4ba0      	ldr	r3, [pc, #640]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a9f      	ldr	r2, [pc, #636]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4b9d      	ldr	r3, [pc, #628]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a9c      	ldr	r2, [pc, #624]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 800445e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d013      	beq.n	8004494 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800446c:	f7fd fe04 	bl	8002078 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004474:	f7fd fe00 	bl	8002078 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b64      	cmp	r3, #100	@ 0x64
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e2ae      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004486:	4b92      	ldr	r3, [pc, #584]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x2a8>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fd fdf0 	bl	8002078 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800449c:	f7fd fdec 	bl	8002078 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	@ 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e29a      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ae:	4b88      	ldr	r3, [pc, #544]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x2d0>
 80044ba:	e000      	b.n	80044be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 0302 	and.w	r3, r3, #2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d060      	beq.n	800458c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2b04      	cmp	r3, #4
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_OscConfig+0x310>
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d119      	bne.n	800450a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d116      	bne.n	800450a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044dc:	4b7c      	ldr	r3, [pc, #496]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_OscConfig+0x328>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d101      	bne.n	80044f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e277      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f4:	4b76      	ldr	r3, [pc, #472]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	4973      	ldr	r1, [pc, #460]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004508:	e040      	b.n	800458c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d023      	beq.n	800455a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004512:	4b6f      	ldr	r3, [pc, #444]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a6e      	ldr	r2, [pc, #440]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800451c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fd fdab 	bl	8002078 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004526:	f7fd fda7 	bl	8002078 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e255      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004538:	4b65      	ldr	r3, [pc, #404]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b62      	ldr	r3, [pc, #392]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	495f      	ldr	r1, [pc, #380]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004554:	4313      	orrs	r3, r2
 8004556:	604b      	str	r3, [r1, #4]
 8004558:	e018      	b.n	800458c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b5d      	ldr	r3, [pc, #372]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a5c      	ldr	r2, [pc, #368]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004560:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004566:	f7fd fd87 	bl	8002078 <HAL_GetTick>
 800456a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800456e:	f7fd fd83 	bl	8002078 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e231      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004580:	4b53      	ldr	r3, [pc, #332]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f0      	bne.n	800456e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d03c      	beq.n	8004612 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d01c      	beq.n	80045da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045a0:	4b4b      	ldr	r3, [pc, #300]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80045a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045a6:	4a4a      	ldr	r2, [pc, #296]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b0:	f7fd fd62 	bl	8002078 <HAL_GetTick>
 80045b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045b6:	e008      	b.n	80045ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045b8:	f7fd fd5e 	bl	8002078 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d901      	bls.n	80045ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e20c      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ca:	4b41      	ldr	r3, [pc, #260]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80045cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045d0:	f003 0302 	and.w	r3, r3, #2
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d0ef      	beq.n	80045b8 <HAL_RCC_OscConfig+0x3ec>
 80045d8:	e01b      	b.n	8004612 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045da:	4b3d      	ldr	r3, [pc, #244]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80045dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e0:	4a3b      	ldr	r2, [pc, #236]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80045e2:	f023 0301 	bic.w	r3, r3, #1
 80045e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ea:	f7fd fd45 	bl	8002078 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f2:	f7fd fd41 	bl	8002078 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e1ef      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004604:	4b32      	ldr	r3, [pc, #200]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1ef      	bne.n	80045f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80a6 	beq.w	800476c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004620:	2300      	movs	r3, #0
 8004622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004624:	4b2a      	ldr	r3, [pc, #168]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10d      	bne.n	800464c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004630:	4b27      	ldr	r3, [pc, #156]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004634:	4a26      	ldr	r2, [pc, #152]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004636:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800463a:	6593      	str	r3, [r2, #88]	@ 0x58
 800463c:	4b24      	ldr	r3, [pc, #144]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004640:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004644:	60bb      	str	r3, [r7, #8]
 8004646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004648:	2301      	movs	r3, #1
 800464a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800464c:	4b21      	ldr	r3, [pc, #132]	@ (80046d4 <HAL_RCC_OscConfig+0x508>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004654:	2b00      	cmp	r3, #0
 8004656:	d118      	bne.n	800468a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004658:	4b1e      	ldr	r3, [pc, #120]	@ (80046d4 <HAL_RCC_OscConfig+0x508>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <HAL_RCC_OscConfig+0x508>)
 800465e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004664:	f7fd fd08 	bl	8002078 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466c:	f7fd fd04 	bl	8002078 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b02      	cmp	r3, #2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e1b2      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800467e:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <HAL_RCC_OscConfig+0x508>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d108      	bne.n	80046a4 <HAL_RCC_OscConfig+0x4d8>
 8004692:	4b0f      	ldr	r3, [pc, #60]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004698:	4a0d      	ldr	r2, [pc, #52]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046a2:	e029      	b.n	80046f8 <HAL_RCC_OscConfig+0x52c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b05      	cmp	r3, #5
 80046aa:	d115      	bne.n	80046d8 <HAL_RCC_OscConfig+0x50c>
 80046ac:	4b08      	ldr	r3, [pc, #32]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046b2:	4a07      	ldr	r2, [pc, #28]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80046b4:	f043 0304 	orr.w	r3, r3, #4
 80046b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046bc:	4b04      	ldr	r3, [pc, #16]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046c2:	4a03      	ldr	r2, [pc, #12]	@ (80046d0 <HAL_RCC_OscConfig+0x504>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046cc:	e014      	b.n	80046f8 <HAL_RCC_OscConfig+0x52c>
 80046ce:	bf00      	nop
 80046d0:	40021000 	.word	0x40021000
 80046d4:	40007000 	.word	0x40007000
 80046d8:	4b9a      	ldr	r3, [pc, #616]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046de:	4a99      	ldr	r2, [pc, #612]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046e8:	4b96      	ldr	r3, [pc, #600]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ee:	4a95      	ldr	r2, [pc, #596]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80046f0:	f023 0304 	bic.w	r3, r3, #4
 80046f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d016      	beq.n	800472e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004700:	f7fd fcba 	bl	8002078 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004706:	e00a      	b.n	800471e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fd fcb6 	bl	8002078 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e162      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471e:	4b89      	ldr	r3, [pc, #548]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0ed      	beq.n	8004708 <HAL_RCC_OscConfig+0x53c>
 800472c:	e015      	b.n	800475a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fd fca3 	bl	8002078 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004734:	e00a      	b.n	800474c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fd fc9f 	bl	8002078 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e14b      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800474c:	4b7d      	ldr	r3, [pc, #500]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1ed      	bne.n	8004736 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800475a:	7ffb      	ldrb	r3, [r7, #31]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d105      	bne.n	800476c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004760:	4b78      	ldr	r3, [pc, #480]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004764:	4a77      	ldr	r2, [pc, #476]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800476a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d03c      	beq.n	80047f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01c      	beq.n	80047ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004780:	4b70      	ldr	r3, [pc, #448]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004786:	4a6f      	ldr	r2, [pc, #444]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fd fc72 	bl	8002078 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004798:	f7fd fc6e 	bl	8002078 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e11c      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047aa:	4b66      	ldr	r3, [pc, #408]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80047ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ef      	beq.n	8004798 <HAL_RCC_OscConfig+0x5cc>
 80047b8:	e01b      	b.n	80047f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047ba:	4b62      	ldr	r3, [pc, #392]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80047bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047c0:	4a60      	ldr	r2, [pc, #384]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ca:	f7fd fc55 	bl	8002078 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047d0:	e008      	b.n	80047e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047d2:	f7fd fc51 	bl	8002078 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e0ff      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80047e4:	4b57      	ldr	r3, [pc, #348]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80047e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1ef      	bne.n	80047d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 80f3 	beq.w	80049e2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004800:	2b02      	cmp	r3, #2
 8004802:	f040 80c9 	bne.w	8004998 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004806:	4b4f      	ldr	r3, [pc, #316]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f003 0203 	and.w	r2, r3, #3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004816:	429a      	cmp	r2, r3
 8004818:	d12c      	bne.n	8004874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004824:	3b01      	subs	r3, #1
 8004826:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d123      	bne.n	8004874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004836:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d11b      	bne.n	8004874 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004848:	429a      	cmp	r2, r3
 800484a:	d113      	bne.n	8004874 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	3b01      	subs	r3, #1
 800485a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d109      	bne.n	8004874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486a:	085b      	lsrs	r3, r3, #1
 800486c:	3b01      	subs	r3, #1
 800486e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004870:	429a      	cmp	r2, r3
 8004872:	d06b      	beq.n	800494c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b0c      	cmp	r3, #12
 8004878:	d062      	beq.n	8004940 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800487a:	4b32      	ldr	r3, [pc, #200]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d001      	beq.n	800488a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0ac      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800488a:	4b2e      	ldr	r3, [pc, #184]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a2d      	ldr	r2, [pc, #180]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004890:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004894:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004896:	f7fd fbef 	bl	8002078 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489e:	f7fd fbeb 	bl	8002078 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e099      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b0:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f0      	bne.n	800489e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048bc:	4b21      	ldr	r3, [pc, #132]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	4b21      	ldr	r3, [pc, #132]	@ (8004948 <HAL_RCC_OscConfig+0x77c>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048cc:	3a01      	subs	r2, #1
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	4311      	orrs	r1, r2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048d6:	0212      	lsls	r2, r2, #8
 80048d8:	4311      	orrs	r1, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80048de:	0852      	lsrs	r2, r2, #1
 80048e0:	3a01      	subs	r2, #1
 80048e2:	0552      	lsls	r2, r2, #21
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80048ea:	0852      	lsrs	r2, r2, #1
 80048ec:	3a01      	subs	r2, #1
 80048ee:	0652      	lsls	r2, r2, #25
 80048f0:	4311      	orrs	r1, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80048f6:	06d2      	lsls	r2, r2, #27
 80048f8:	430a      	orrs	r2, r1
 80048fa:	4912      	ldr	r1, [pc, #72]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004900:	4b10      	ldr	r3, [pc, #64]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a0f      	ldr	r2, [pc, #60]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800490a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800490c:	4b0d      	ldr	r3, [pc, #52]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a0c      	ldr	r2, [pc, #48]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004918:	f7fd fbae 	bl	8002078 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd fbaa 	bl	8002078 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e058      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004932:	4b04      	ldr	r3, [pc, #16]	@ (8004944 <HAL_RCC_OscConfig+0x778>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800493e:	e050      	b.n	80049e2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e04f      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
 8004944:	40021000 	.word	0x40021000
 8004948:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494c:	4b27      	ldr	r3, [pc, #156]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d144      	bne.n	80049e2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004958:	4b24      	ldr	r3, [pc, #144]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a23      	ldr	r2, [pc, #140]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 800495e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004962:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004964:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	4a20      	ldr	r2, [pc, #128]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 800496a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800496e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004970:	f7fd fb82 	bl	8002078 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004978:	f7fd fb7e 	bl	8002078 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e02c      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498a:	4b18      	ldr	r3, [pc, #96]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d0f0      	beq.n	8004978 <HAL_RCC_OscConfig+0x7ac>
 8004996:	e024      	b.n	80049e2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b0c      	cmp	r3, #12
 800499c:	d01f      	beq.n	80049de <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499e:	4b13      	ldr	r3, [pc, #76]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a12      	ldr	r2, [pc, #72]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 80049a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fd fb65 	bl	8002078 <HAL_GetTick>
 80049ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b2:	f7fd fb61 	bl	8002078 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e00f      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c4:	4b09      	ldr	r3, [pc, #36]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80049d0:	4b06      	ldr	r3, [pc, #24]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	4905      	ldr	r1, [pc, #20]	@ (80049ec <HAL_RCC_OscConfig+0x820>)
 80049d6:	4b06      	ldr	r3, [pc, #24]	@ (80049f0 <HAL_RCC_OscConfig+0x824>)
 80049d8:	4013      	ands	r3, r2
 80049da:	60cb      	str	r3, [r1, #12]
 80049dc:	e001      	b.n	80049e2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000
 80049f0:	feeefffc 	.word	0xfeeefffc

080049f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0e7      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b75      	ldr	r3, [pc, #468]	@ (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d910      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b72      	ldr	r3, [pc, #456]	@ (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 0207 	bic.w	r2, r3, #7
 8004a1e:	4970      	ldr	r1, [pc, #448]	@ (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b6e      	ldr	r3, [pc, #440]	@ (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0cf      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d010      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	4b66      	ldr	r3, [pc, #408]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d908      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a54:	4b63      	ldr	r3, [pc, #396]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4960      	ldr	r1, [pc, #384]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04c      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d107      	bne.n	8004a8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d121      	bne.n	8004aca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0a6      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a92:	4b54      	ldr	r3, [pc, #336]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d115      	bne.n	8004aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e09a      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e08e      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aba:	4b4a      	ldr	r3, [pc, #296]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e086      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004aca:	4b46      	ldr	r3, [pc, #280]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f023 0203 	bic.w	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4943      	ldr	r1, [pc, #268]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004adc:	f7fd facc 	bl	8002078 <HAL_GetTick>
 8004ae0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae4:	f7fd fac8 	bl	8002078 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e06e      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	4b3a      	ldr	r3, [pc, #232]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 020c 	and.w	r2, r3, #12
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d1eb      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	4b31      	ldr	r3, [pc, #196]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d208      	bcs.n	8004b3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b2e      	ldr	r3, [pc, #184]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	492b      	ldr	r1, [pc, #172]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3a:	4b29      	ldr	r3, [pc, #164]	@ (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d210      	bcs.n	8004b6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b48:	4b25      	ldr	r3, [pc, #148]	@ (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 0207 	bic.w	r2, r3, #7
 8004b50:	4923      	ldr	r1, [pc, #140]	@ (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b58:	4b21      	ldr	r3, [pc, #132]	@ (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d001      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e036      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b76:	4b1b      	ldr	r3, [pc, #108]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4918      	ldr	r1, [pc, #96]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b94:	4b13      	ldr	r3, [pc, #76]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4910      	ldr	r1, [pc, #64]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ba8:	f000 f824 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	490b      	ldr	r1, [pc, #44]	@ (8004be8 <HAL_RCC_ClockConfig+0x1f4>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc4:	4a09      	ldr	r2, [pc, #36]	@ (8004bec <HAL_RCC_ClockConfig+0x1f8>)
 8004bc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bc8:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_RCC_ClockConfig+0x1fc>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fd fa03 	bl	8001fd8 <HAL_InitTick>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bd6:	7afb      	ldrb	r3, [r7, #11]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40022000 	.word	0x40022000
 8004be4:	40021000 	.word	0x40021000
 8004be8:	0800bbf4 	.word	0x0800bbf4
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	20000004 	.word	0x20000004

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	@ 0x24
 8004bf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c02:	4b3e      	ldr	r3, [pc, #248]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x34>
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d121      	bne.n	8004c66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d11e      	bne.n	8004c66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c28:	4b34      	ldr	r3, [pc, #208]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c34:	4b31      	ldr	r3, [pc, #196]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e005      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c44:	4b2d      	ldr	r3, [pc, #180]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c50:	4a2b      	ldr	r2, [pc, #172]	@ (8004d00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10d      	bne.n	8004c7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c64:	e00a      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d102      	bne.n	8004c72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c6c:	4b25      	ldr	r3, [pc, #148]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	e004      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c78:	4b23      	ldr	r3, [pc, #140]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d134      	bne.n	8004cec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c82:	4b1e      	ldr	r3, [pc, #120]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d003      	beq.n	8004c9a <HAL_RCC_GetSysClockFreq+0xa6>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d003      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xac>
 8004c98:	e005      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c9c:	617b      	str	r3, [r7, #20]
      break;
 8004c9e:	e005      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ca0:	4b19      	ldr	r3, [pc, #100]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ca2:	617b      	str	r3, [r7, #20]
      break;
 8004ca4:	e002      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	617b      	str	r3, [r7, #20]
      break;
 8004caa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cac:	4b13      	ldr	r3, [pc, #76]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cba:	4b10      	ldr	r3, [pc, #64]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	fb03 f202 	mul.w	r2, r3, r2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	0e5b      	lsrs	r3, r3, #25
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cec:	69bb      	ldr	r3, [r7, #24]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3724      	adds	r7, #36	@ 0x24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	0800bc0c 	.word	0x0800bc0c
 8004d04:	00f42400 	.word	0x00f42400
 8004d08:	007a1200 	.word	0x007a1200

08004d0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d10:	4b03      	ldr	r3, [pc, #12]	@ (8004d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000000 	.word	0x20000000

08004d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d28:	f7ff fff0 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b06      	ldr	r3, [pc, #24]	@ (8004d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	4904      	ldr	r1, [pc, #16]	@ (8004d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	0800bc04 	.word	0x0800bc04

08004d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d54:	f7ff ffda 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4b06      	ldr	r3, [pc, #24]	@ (8004d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	0adb      	lsrs	r3, r3, #11
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	4904      	ldr	r1, [pc, #16]	@ (8004d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d66:	5ccb      	ldrb	r3, [r1, r3]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	0800bc04 	.word	0x0800bc04

08004d7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d88:	4b2a      	ldr	r3, [pc, #168]	@ (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d94:	f7ff f9b6 	bl	8004104 <HAL_PWREx_GetVoltageRange>
 8004d98:	6178      	str	r0, [r7, #20]
 8004d9a:	e014      	b.n	8004dc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d9c:	4b25      	ldr	r3, [pc, #148]	@ (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004da0:	4a24      	ldr	r2, [pc, #144]	@ (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004da8:	4b22      	ldr	r3, [pc, #136]	@ (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004db4:	f7ff f9a6 	bl	8004104 <HAL_PWREx_GetVoltageRange>
 8004db8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dba:	4b1e      	ldr	r3, [pc, #120]	@ (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dcc:	d10b      	bne.n	8004de6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b80      	cmp	r3, #128	@ 0x80
 8004dd2:	d919      	bls.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2ba0      	cmp	r3, #160	@ 0xa0
 8004dd8:	d902      	bls.n	8004de0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dda:	2302      	movs	r3, #2
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	e013      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004de0:	2301      	movs	r3, #1
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	e010      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b80      	cmp	r3, #128	@ 0x80
 8004dea:	d902      	bls.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dec:	2303      	movs	r3, #3
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e00a      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b80      	cmp	r3, #128	@ 0x80
 8004df6:	d102      	bne.n	8004dfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004df8:	2302      	movs	r3, #2
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	e004      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b70      	cmp	r3, #112	@ 0x70
 8004e02:	d101      	bne.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e04:	2301      	movs	r3, #1
 8004e06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e08:	4b0b      	ldr	r3, [pc, #44]	@ (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 0207 	bic.w	r2, r3, #7
 8004e10:	4909      	ldr	r1, [pc, #36]	@ (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e18:	4b07      	ldr	r3, [pc, #28]	@ (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d001      	beq.n	8004e2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40022000 	.word	0x40022000

08004e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e44:	2300      	movs	r3, #0
 8004e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e48:	2300      	movs	r3, #0
 8004e4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d031      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e60:	d01a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004e62:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e66:	d814      	bhi.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e70:	d10f      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004e72:	4b5d      	ldr	r3, [pc, #372]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	4a5c      	ldr	r2, [pc, #368]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e7c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e7e:	e00c      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	2100      	movs	r1, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 f9de 	bl	8005248 <RCCEx_PLLSAI1_Config>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e90:	e003      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	74fb      	strb	r3, [r7, #19]
      break;
 8004e96:	e000      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004e98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ea0:	4b51      	ldr	r3, [pc, #324]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eae:	494e      	ldr	r1, [pc, #312]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004eb6:	e001      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eb8:	7cfb      	ldrb	r3, [r7, #19]
 8004eba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 809e 	beq.w	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ece:	4b46      	ldr	r3, [pc, #280]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d101      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00d      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ee4:	4b40      	ldr	r3, [pc, #256]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee8:	4a3f      	ldr	r2, [pc, #252]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004eea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004efc:	2301      	movs	r3, #1
 8004efe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f00:	4b3a      	ldr	r3, [pc, #232]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a39      	ldr	r2, [pc, #228]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f0c:	f7fd f8b4 	bl	8002078 <HAL_GetTick>
 8004f10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f12:	e009      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f14:	f7fd f8b0 	bl	8002078 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d902      	bls.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	74fb      	strb	r3, [r7, #19]
        break;
 8004f26:	e005      	b.n	8004f34 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f28:	4b30      	ldr	r3, [pc, #192]	@ (8004fec <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0ef      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d15a      	bne.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01e      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d019      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f62:	4b21      	ldr	r3, [pc, #132]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f68:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f72:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f78:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f82:	4a19      	ldr	r2, [pc, #100]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d016      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f94:	f7fd f870 	bl	8002078 <HAL_GetTick>
 8004f98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f9a:	e00b      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9c:	f7fd f86c 	bl	8002078 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d902      	bls.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	74fb      	strb	r3, [r7, #19]
            break;
 8004fb2:	e006      	b.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0ec      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004fc2:	7cfb      	ldrb	r3, [r7, #19]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10b      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004fc8:	4b07      	ldr	r3, [pc, #28]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fd6:	4904      	ldr	r1, [pc, #16]	@ (8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004fde:	e009      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004fe0:	7cfb      	ldrb	r3, [r7, #19]
 8004fe2:	74bb      	strb	r3, [r7, #18]
 8004fe4:	e006      	b.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff0:	7cfb      	ldrb	r3, [r7, #19]
 8004ff2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ff4:	7c7b      	ldrb	r3, [r7, #17]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d105      	bne.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ffa:	4b8a      	ldr	r3, [pc, #552]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ffe:	4a89      	ldr	r2, [pc, #548]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005000:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005004:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005012:	4b84      	ldr	r3, [pc, #528]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005014:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005018:	f023 0203 	bic.w	r2, r3, #3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	4980      	ldr	r1, [pc, #512]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005034:	4b7b      	ldr	r3, [pc, #492]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005036:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503a:	f023 020c 	bic.w	r2, r3, #12
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	4978      	ldr	r1, [pc, #480]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005056:	4b73      	ldr	r3, [pc, #460]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005064:	496f      	ldr	r1, [pc, #444]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005078:	4b6a      	ldr	r3, [pc, #424]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800507a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005086:	4967      	ldr	r1, [pc, #412]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800509a:	4b62      	ldr	r3, [pc, #392]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800509c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050a8:	495e      	ldr	r1, [pc, #376]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050bc:	4b59      	ldr	r3, [pc, #356]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ca:	4956      	ldr	r1, [pc, #344]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050de:	4b51      	ldr	r3, [pc, #324]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	494d      	ldr	r1, [pc, #308]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d028      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005100:	4b48      	ldr	r3, [pc, #288]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005106:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	4945      	ldr	r1, [pc, #276]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800511a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800511e:	d106      	bne.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005120:	4b40      	ldr	r3, [pc, #256]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	4a3f      	ldr	r2, [pc, #252]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800512a:	60d3      	str	r3, [r2, #12]
 800512c:	e011      	b.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005136:	d10c      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	2101      	movs	r1, #1
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f882 	bl	8005248 <RCCEx_PLLSAI1_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005148:	7cfb      	ldrb	r3, [r7, #19]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800514e:	7cfb      	ldrb	r3, [r7, #19]
 8005150:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d028      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800515e:	4b31      	ldr	r3, [pc, #196]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005164:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516c:	492d      	ldr	r1, [pc, #180]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005178:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800517c:	d106      	bne.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800517e:	4b29      	ldr	r3, [pc, #164]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	4a28      	ldr	r2, [pc, #160]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005184:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005188:	60d3      	str	r3, [r2, #12]
 800518a:	e011      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005190:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005194:	d10c      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3304      	adds	r3, #4
 800519a:	2101      	movs	r1, #1
 800519c:	4618      	mov	r0, r3
 800519e:	f000 f853 	bl	8005248 <RCCEx_PLLSAI1_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d001      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80051ac:	7cfb      	ldrb	r3, [r7, #19]
 80051ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01c      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051bc:	4b19      	ldr	r3, [pc, #100]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ca:	4916      	ldr	r1, [pc, #88]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051da:	d10c      	bne.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3304      	adds	r3, #4
 80051e0:	2102      	movs	r1, #2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f830 	bl	8005248 <RCCEx_PLLSAI1_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051ec:	7cfb      	ldrb	r3, [r7, #19]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80051f2:	7cfb      	ldrb	r3, [r7, #19]
 80051f4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005202:	4b08      	ldr	r3, [pc, #32]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005208:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005210:	4904      	ldr	r1, [pc, #16]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005218:	7cbb      	ldrb	r3, [r7, #18]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	40021000 	.word	0x40021000

08005228 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800522c:	4b05      	ldr	r3, [pc, #20]	@ (8005244 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a04      	ldr	r2, [pc, #16]	@ (8005244 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005232:	f043 0304 	orr.w	r3, r3, #4
 8005236:	6013      	str	r3, [r2, #0]
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	40021000 	.word	0x40021000

08005248 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005252:	2300      	movs	r3, #0
 8005254:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005256:	4b74      	ldr	r3, [pc, #464]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d018      	beq.n	8005294 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005262:	4b71      	ldr	r3, [pc, #452]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f003 0203 	and.w	r2, r3, #3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	429a      	cmp	r2, r3
 8005270:	d10d      	bne.n	800528e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
       ||
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800527a:	4b6b      	ldr	r3, [pc, #428]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	1c5a      	adds	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
       ||
 800528a:	429a      	cmp	r2, r3
 800528c:	d047      	beq.n	800531e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	e044      	b.n	800531e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b03      	cmp	r3, #3
 800529a:	d018      	beq.n	80052ce <RCCEx_PLLSAI1_Config+0x86>
 800529c:	2b03      	cmp	r3, #3
 800529e:	d825      	bhi.n	80052ec <RCCEx_PLLSAI1_Config+0xa4>
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d002      	beq.n	80052aa <RCCEx_PLLSAI1_Config+0x62>
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d009      	beq.n	80052bc <RCCEx_PLLSAI1_Config+0x74>
 80052a8:	e020      	b.n	80052ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 0302 	and.w	r3, r3, #2
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d11d      	bne.n	80052f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052ba:	e01a      	b.n	80052f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d116      	bne.n	80052f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052cc:	e013      	b.n	80052f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052ce:	4b56      	ldr	r3, [pc, #344]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d10f      	bne.n	80052fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052da:	4b53      	ldr	r3, [pc, #332]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052ea:	e006      	b.n	80052fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
      break;
 80052f0:	e004      	b.n	80052fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052f2:	bf00      	nop
 80052f4:	e002      	b.n	80052fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052f6:	bf00      	nop
 80052f8:	e000      	b.n	80052fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80052fc:	7bfb      	ldrb	r3, [r7, #15]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10d      	bne.n	800531e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005302:	4b49      	ldr	r3, [pc, #292]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6819      	ldr	r1, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	3b01      	subs	r3, #1
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	430b      	orrs	r3, r1
 8005318:	4943      	ldr	r1, [pc, #268]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800531a:	4313      	orrs	r3, r2
 800531c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800531e:	7bfb      	ldrb	r3, [r7, #15]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d17c      	bne.n	800541e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005324:	4b40      	ldr	r3, [pc, #256]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a3f      	ldr	r2, [pc, #252]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800532a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800532e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005330:	f7fc fea2 	bl	8002078 <HAL_GetTick>
 8005334:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005336:	e009      	b.n	800534c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005338:	f7fc fe9e 	bl	8002078 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d902      	bls.n	800534c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	73fb      	strb	r3, [r7, #15]
        break;
 800534a:	e005      	b.n	8005358 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800534c:	4b36      	ldr	r3, [pc, #216]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1ef      	bne.n	8005338 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d15f      	bne.n	800541e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d110      	bne.n	8005386 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005364:	4b30      	ldr	r3, [pc, #192]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800536c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	6892      	ldr	r2, [r2, #8]
 8005374:	0211      	lsls	r1, r2, #8
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	68d2      	ldr	r2, [r2, #12]
 800537a:	06d2      	lsls	r2, r2, #27
 800537c:	430a      	orrs	r2, r1
 800537e:	492a      	ldr	r1, [pc, #168]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005380:	4313      	orrs	r3, r2
 8005382:	610b      	str	r3, [r1, #16]
 8005384:	e027      	b.n	80053d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d112      	bne.n	80053b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800538c:	4b26      	ldr	r3, [pc, #152]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005394:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6892      	ldr	r2, [r2, #8]
 800539c:	0211      	lsls	r1, r2, #8
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	6912      	ldr	r2, [r2, #16]
 80053a2:	0852      	lsrs	r2, r2, #1
 80053a4:	3a01      	subs	r2, #1
 80053a6:	0552      	lsls	r2, r2, #21
 80053a8:	430a      	orrs	r2, r1
 80053aa:	491f      	ldr	r1, [pc, #124]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	610b      	str	r3, [r1, #16]
 80053b0:	e011      	b.n	80053d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80053ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6892      	ldr	r2, [r2, #8]
 80053c2:	0211      	lsls	r1, r2, #8
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6952      	ldr	r2, [r2, #20]
 80053c8:	0852      	lsrs	r2, r2, #1
 80053ca:	3a01      	subs	r2, #1
 80053cc:	0652      	lsls	r2, r2, #25
 80053ce:	430a      	orrs	r2, r1
 80053d0:	4915      	ldr	r1, [pc, #84]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d2:	4313      	orrs	r3, r2
 80053d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053d6:	4b14      	ldr	r3, [pc, #80]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a13      	ldr	r2, [pc, #76]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e2:	f7fc fe49 	bl	8002078 <HAL_GetTick>
 80053e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053e8:	e009      	b.n	80053fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053ea:	f7fc fe45 	bl	8002078 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d902      	bls.n	80053fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	73fb      	strb	r3, [r7, #15]
          break;
 80053fc:	e005      	b.n	800540a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0ef      	beq.n	80053ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d106      	bne.n	800541e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005410:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	4903      	ldr	r1, [pc, #12]	@ (8005428 <RCCEx_PLLSAI1_Config+0x1e0>)
 800541a:	4313      	orrs	r3, r2
 800541c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800541e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	40021000 	.word	0x40021000

0800542c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d06c      	beq.n	8005518 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fc fb32 	bl	8001abc <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	22ca      	movs	r2, #202	@ 0xca
 8005466:	625a      	str	r2, [r3, #36]	@ 0x24
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2253      	movs	r2, #83	@ 0x53
 800546e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f87c 	bl	800556e <RTC_EnterInitMode>
 8005476:	4603      	mov	r3, r0
 8005478:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d14b      	bne.n	8005518 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	6812      	ldr	r2, [r2, #0]
 800548a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800548e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005492:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6899      	ldr	r1, [r3, #8]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	430a      	orrs	r2, r1
 80054b0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	68d2      	ldr	r2, [r2, #12]
 80054ba:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6919      	ldr	r1, [r3, #16]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	041a      	lsls	r2, r3, #16
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f87f 	bl	80055d4 <RTC_ExitInitMode>
 80054d6:	4603      	mov	r3, r0
 80054d8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80054da:	7bfb      	ldrb	r3, [r7, #15]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d11b      	bne.n	8005518 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0203 	bic.w	r2, r2, #3
 80054ee:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	69da      	ldr	r2, [r3, #28]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	22ff      	movs	r2, #255	@ 0xff
 800550e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      }
    }
  }

  return status;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b084      	sub	sp, #16
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68da      	ldr	r2, [r3, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005538:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800553a:	f7fc fd9d 	bl	8002078 <HAL_GetTick>
 800553e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005540:	e009      	b.n	8005556 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005542:	f7fc fd99 	bl	8002078 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005550:	d901      	bls.n	8005556 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e007      	b.n	8005566 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0ee      	beq.n	8005542 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d120      	bne.n	80055ca <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005590:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005592:	f7fc fd71 	bl	8002078 <HAL_GetTick>
 8005596:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005598:	e00d      	b.n	80055b6 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800559a:	f7fc fd6d 	bl	8002078 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80055a8:	d905      	bls.n	80055b6 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2203      	movs	r2, #3
 80055b2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d102      	bne.n	80055ca <RTC_EnterInitMode+0x5c>
 80055c4:	7bfb      	ldrb	r3, [r7, #15]
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d1e7      	bne.n	800559a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80055ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3710      	adds	r7, #16
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80055e0:	4b1a      	ldr	r3, [pc, #104]	@ (800564c <RTC_ExitInitMode+0x78>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	4a19      	ldr	r2, [pc, #100]	@ (800564c <RTC_ExitInitMode+0x78>)
 80055e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ea:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80055ec:	4b17      	ldr	r3, [pc, #92]	@ (800564c <RTC_ExitInitMode+0x78>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 0320 	and.w	r3, r3, #32
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10c      	bne.n	8005612 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff ff92 	bl	8005522 <HAL_RTC_WaitForSynchro>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01e      	beq.n	8005642 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2203      	movs	r2, #3
 8005608:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	73fb      	strb	r3, [r7, #15]
 8005610:	e017      	b.n	8005642 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005612:	4b0e      	ldr	r3, [pc, #56]	@ (800564c <RTC_ExitInitMode+0x78>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	4a0d      	ldr	r2, [pc, #52]	@ (800564c <RTC_ExitInitMode+0x78>)
 8005618:	f023 0320 	bic.w	r3, r3, #32
 800561c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f7ff ff7f 	bl	8005522 <HAL_RTC_WaitForSynchro>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d005      	beq.n	8005636 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2203      	movs	r2, #3
 800562e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005636:	4b05      	ldr	r3, [pc, #20]	@ (800564c <RTC_ExitInitMode+0x78>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	4a04      	ldr	r2, [pc, #16]	@ (800564c <RTC_ExitInitMode+0x78>)
 800563c:	f043 0320 	orr.w	r3, r3, #32
 8005640:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005642:	7bfb      	ldrb	r3, [r7, #15]
}
 8005644:	4618      	mov	r0, r3
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	40002800 	.word	0x40002800

08005650 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e0aa      	b.n	80057b8 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005666:	2b00      	cmp	r3, #0
 8005668:	d106      	bne.n	8005678 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7fc f9ba 	bl	80019ec <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2202      	movs	r2, #2
 800567c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0201 	bic.w	r2, r2, #1
 800568c:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800569a:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	695a      	ldr	r2, [r3, #20]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056aa:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695a      	ldr	r2, [r3, #20]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80056ba:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80056c4:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80056d4:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d012      	beq.n	8005704 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d107      	bne.n	80056f6 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056f2:	609a      	str	r2, [r3, #8]
 80056f4:	e006      	b.n	8005704 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68da      	ldr	r2, [r3, #12]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005702:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	691b      	ldr	r3, [r3, #16]
 8005708:	2b02      	cmp	r3, #2
 800570a:	d104      	bne.n	8005716 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005714:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005728:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1a      	ldr	r2, [r3, #32]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574c:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8005752:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005758:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8005764:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8005766:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005770:	d110      	bne.n	8005794 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 800577e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005782:	d107      	bne.n	8005794 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005792:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f042 0201 	orr.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	649a      	str	r2, [r3, #72]	@ 0x48

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_SMBUS_EV_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Use a local variable to store the current ISR flags */
  /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
  uint32_t tmpisrvalue = READ_REG(hsmbus->Instance->ISR);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr1value = READ_REG(hsmbus->Instance->CR1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60bb      	str	r3, [r7, #8]

  /* SMBUS in mode Transmitter ---------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	f003 0372 	and.w	r3, r3, #114	@ 0x72
 80057de:	2b72      	cmp	r3, #114	@ 0x72
 80057e0:	d12d      	bne.n	800583e <HAL_SMBUS_EV_IRQHandler+0x7e>
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f003 0302 	and.w	r3, r3, #2
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d113      	bne.n	8005814 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10e      	bne.n	8005814 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0320 	and.w	r3, r3, #32
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8005806:	2b00      	cmp	r3, #0
 8005808:	d104      	bne.n	8005814 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8005810:	2b00      	cmp	r3, #0
 8005812:	d014      	beq.n	800583e <HAL_SMBUS_EV_IRQHandler+0x7e>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005818:	f003 0332 	and.w	r3, r3, #50	@ 0x32
 800581c:	2b32      	cmp	r3, #50	@ 0x32
 800581e:	d104      	bne.n	800582a <HAL_SMBUS_EV_IRQHandler+0x6a>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8005820:	68f9      	ldr	r1, [r7, #12]
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa92 	bl	8005d4c <SMBUS_Slave_ISR>
 8005828:	e009      	b.n	800583e <HAL_SMBUS_EV_IRQHandler+0x7e>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800582e:	f003 0312 	and.w	r3, r3, #18
 8005832:	2b12      	cmp	r3, #18
 8005834:	d103      	bne.n	800583e <HAL_SMBUS_EV_IRQHandler+0x7e>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8005836:	68f9      	ldr	r1, [r7, #12]
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f8b5 	bl	80059a8 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Receiver ----------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	f003 0374 	and.w	r3, r3, #116	@ 0x74
 8005844:	2b74      	cmp	r3, #116	@ 0x74
 8005846:	d12d      	bne.n	80058a4 <HAL_SMBUS_EV_IRQHandler+0xe4>
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f003 0304 	and.w	r3, r3, #4
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 800584e:	2b00      	cmp	r3, #0
 8005850:	d113      	bne.n	800587a <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10e      	bne.n	800587a <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0320 	and.w	r3, r3, #32
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800586c:	2b00      	cmp	r3, #0
 800586e:	d104      	bne.n	800587a <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8005876:	2b00      	cmp	r3, #0
 8005878:	d014      	beq.n	80058a4 <HAL_SMBUS_EV_IRQHandler+0xe4>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800587e:	f003 0342 	and.w	r3, r3, #66	@ 0x42
 8005882:	2b42      	cmp	r3, #66	@ 0x42
 8005884:	d104      	bne.n	8005890 <HAL_SMBUS_EV_IRQHandler+0xd0>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8005886:	68f9      	ldr	r1, [r7, #12]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fa5f 	bl	8005d4c <SMBUS_Slave_ISR>
 800588e:	e009      	b.n	80058a4 <HAL_SMBUS_EV_IRQHandler+0xe4>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005894:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005898:	2b22      	cmp	r3, #34	@ 0x22
 800589a:	d103      	bne.n	80058a4 <HAL_SMBUS_EV_IRQHandler+0xe4>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 800589c:	68f9      	ldr	r1, [r7, #12]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f882 	bl	80059a8 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Listener Only --------------------------------------------------*/
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 0308 	and.w	r3, r3, #8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d109      	bne.n	80058c2 <HAL_SMBUS_EV_IRQHandler+0x102>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f003 0320 	and.w	r3, r3, #32
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <HAL_SMBUS_EV_IRQHandler+0x102>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d018      	beq.n	80058f4 <HAL_SMBUS_EV_IRQHandler+0x134>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0308 	and.w	r3, r3, #8
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d109      	bne.n	80058e0 <HAL_SMBUS_EV_IRQHandler+0x120>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f003 0320 	and.w	r3, r3, #32
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d104      	bne.n	80058e0 <HAL_SMBUS_EV_IRQHandler+0x120>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d009      	beq.n	80058f4 <HAL_SMBUS_EV_IRQHandler+0x134>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e4:	f003 0308 	and.w	r3, r3, #8
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d103      	bne.n	80058f4 <HAL_SMBUS_EV_IRQHandler+0x134>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 80058ec:	68f9      	ldr	r1, [r7, #12]
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f000 fa2c 	bl	8005d4c <SMBUS_Slave_ISR>
    }
  }
}
 80058f4:	bf00      	nop
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_SMBUS_ER_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ER_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  SMBUS_ITErrorHandler(hsmbus);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fc7a 	bl	80061fe <SMBUS_ITErrorHandler>
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_SMBUS_MasterTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterTxCpltCallback() could be implemented in the user file
   */
}
 800591a:	bf00      	nop
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr

08005926 <HAL_SMBUS_MasterRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8005926:	b480      	push	{r7}
 8005928:	b083      	sub	sp, #12
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_MasterRxCpltCallback() could be implemented in the user file
   */
}
 800592e:	bf00      	nop
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <HAL_SMBUS_SlaveTxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveTxCpltCallback() could be implemented in the user file
   */
}
 8005942:	bf00      	nop
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr

0800594e <HAL_SMBUS_SlaveRxCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_SlaveRxCpltCallback() could be implemented in the user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_SMBUS_AddrCallback>:
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection,
                                   uint16_t AddrMatchCode)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
 800596a:	460b      	mov	r3, r1
 800596c:	70fb      	strb	r3, [r7, #3]
 800596e:	4613      	mov	r3, r2
 8005970:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_AddrCallback() could be implemented in the user file
   */
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <HAL_SMBUS_ListenCpltCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ListenCpltCallback() could be implemented in the user file
   */
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <HAL_SMBUS_ErrorCallback>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  UNUSED(hsmbus);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SMBUS_ErrorCallback() could be implemented in the user file
   */
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <SMBUS_Master_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint16_t DevAddress;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <SMBUS_Master_ISR+0x18>
 80059bc:	2302      	movs	r3, #2
 80059be:	e1c1      	b.n	8005d44 <SMBUS_Master_ISR+0x39c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d014      	beq.n	80059fc <SMBUS_Master_ISR+0x54>
  {
    /* Clear NACK Flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2210      	movs	r2, #16
 80059d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059de:	f043 0204 	orr.w	r2, r3, #4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Flush TX register */
    SMBUS_Flush_TXDR(hsmbus);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 fcbe 	bl	8006368 <SMBUS_Flush_TXDR>

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ffcc 	bl	8005992 <HAL_SMBUS_ErrorCallback>
 80059fa:	e19e      	b.n	8005d3a <SMBUS_Master_ISR+0x392>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d079      	beq.n	8005afa <SMBUS_Master_ISR+0x152>
  {
    /* Check and treat errors if errors occurs during STOP process */
    SMBUS_ITErrorHandler(hsmbus);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 fbf9 	bl	80061fe <SMBUS_ITErrorHandler>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a10:	2b12      	cmp	r3, #18
 8005a12:	d12d      	bne.n	8005a70 <SMBUS_Master_ISR+0xc8>
    {
      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8005a14:	21f2      	movs	r1, #242	@ 0xf2
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fb74 	bl	8006104 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2220      	movs	r2, #32
 8005a22:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c6c <SMBUS_Master_ISR+0x2c4>)
 8005a30:	400b      	ands	r3, r1
 8005a32:	6053      	str	r3, [r2, #4]

      /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
      /* Disable the selected SMBUS peripheral */
      __HAL_SMBUS_DISABLE(hsmbus);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	641a      	str	r2, [r3, #64]	@ 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Re-enable the selected SMBUS peripheral */
      __HAL_SMBUS_ENABLE(hsmbus);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7ff ff52 	bl	8005912 <HAL_SMBUS_MasterTxCpltCallback>
 8005a6e:	e164      	b.n	8005d3a <SMBUS_Master_ISR+0x392>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a74:	2b22      	cmp	r3, #34	@ 0x22
 8005a76:	f040 8160 	bne.w	8005d3a <SMBUS_Master_ISR+0x392>
    {
      /* Store Last receive data if any */
      if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d01c      	beq.n	8005abe <SMBUS_Master_ISR+0x116>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a8e:	b2d2      	uxtb	r2, r2
 8005a90:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	635a      	str	r2, [r3, #52]	@ 0x34

        if ((hsmbus->XferSize > 0U))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00c      	beq.n	8005abe <SMBUS_Master_ISR+0x116>
        {
          hsmbus->XferSize--;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	871a      	strh	r2, [r3, #56]	@ 0x38
          hsmbus->XferCount--;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	b29a      	uxth	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	875a      	strh	r2, [r3, #58]	@ 0x3a
        }
      }

      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8005abe:	21d4      	movs	r1, #212	@ 0xd4
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fb1f 	bl	8006104 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	2220      	movs	r2, #32
 8005acc:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6859      	ldr	r1, [r3, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	4b64      	ldr	r3, [pc, #400]	@ (8005c6c <SMBUS_Master_ISR+0x2c4>)
 8005ada:	400b      	ands	r3, r1
 8005adc:	6053      	str	r3, [r2, #4]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	641a      	str	r2, [r3, #64]	@ 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterRxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff ff17 	bl	8005926 <HAL_SMBUS_MasterRxCpltCallback>
 8005af8:	e11f      	b.n	8005d3a <SMBUS_Master_ISR+0x392>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d019      	beq.n	8005b38 <SMBUS_Master_ISR+0x190>
  {
    /* Read data from RXDR */
    *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005b20:	3b01      	subs	r3, #1
 8005b22:	b29a      	uxth	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	871a      	strh	r2, [r3, #56]	@ 0x38
    hsmbus->XferCount--;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8005b36:	e100      	b.n	8005d3a <SMBUS_Master_ISR+0x392>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d018      	beq.n	8005b74 <SMBUS_Master_ISR+0x1cc>
  {
    /* Write data to TXDR */
    hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b46:	781a      	ldrb	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b52:	1c5a      	adds	r2, r3, #1
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	b29a      	uxth	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	871a      	strh	r2, [r3, #56]	@ 0x38
    hsmbus->XferCount--;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	875a      	strh	r2, [r3, #58]	@ 0x3a
 8005b72:	e0e2      	b.n	8005d3a <SMBUS_Master_ISR+0x392>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 808f 	beq.w	8005c9e <SMBUS_Master_ISR+0x2f6>
  {
    if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d046      	beq.n	8005c18 <SMBUS_Master_ISR+0x270>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d142      	bne.n	8005c18 <SMBUS_Master_ISR+0x270>
    {
      DevAddress = (uint16_t)(hsmbus->Instance->CR2 & I2C_CR2_SADD);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b9e:	81fb      	strh	r3, [r7, #14]

      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	2bff      	cmp	r3, #255	@ 0xff
 8005ba8:	d910      	bls.n	8005bcc <SMBUS_Master_ISR+0x224>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
                             (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
 8005bb2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005bb6:	89f9      	ldrh	r1, [r7, #14]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	9200      	str	r2, [sp, #0]
 8005bbc:	22ff      	movs	r2, #255	@ 0xff
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 fbf6 	bl	80063b0 <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        hsmbus->XferSize = MAX_NBYTE_SIZE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	22ff      	movs	r2, #255	@ 0xff
 8005bc8:	871a      	strh	r2, [r3, #56]	@ 0x38
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8005bca:	e0b5      	b.n	8005d38 <SMBUS_Master_ISR+0x390>
      }
      else
      {
        hsmbus->XferSize = hsmbus->XferCount;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	871a      	strh	r2, [r3, #56]	@ 0x38
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be0:	89f9      	ldrh	r1, [r7, #14]
 8005be2:	2000      	movs	r0, #0
 8005be4:	9000      	str	r0, [sp, #0]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fbe2 	bl	80063b0 <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
        /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
        if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	f000 809e 	beq.w	8005d38 <SMBUS_Master_ISR+0x390>
        {
          hsmbus->XferSize--;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005c00:	3b01      	subs	r3, #1
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	871a      	strh	r2, [r3, #56]	@ 0x38
          hsmbus->XferCount--;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	875a      	strh	r2, [r3, #58]	@ 0x3a
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8005c16:	e08f      	b.n	8005d38 <SMBUS_Master_ISR+0x390>
        }
      }
    }
    else if ((hsmbus->XferCount == 0U) && (hsmbus->XferSize == 0U))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f040 808b 	bne.w	8005d3a <SMBUS_Master_ISR+0x392>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f040 8086 	bne.w	8005d3a <SMBUS_Master_ISR+0x392>
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c3c:	d07d      	beq.n	8005d3a <SMBUS_Master_ISR+0x392>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c42:	2b12      	cmp	r3, #18
 8005c44:	d114      	bne.n	8005c70 <SMBUS_Master_ISR+0x2c8>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8005c46:	21f2      	movs	r1, #242	@ 0xf2
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fa5b 	bl	8006104 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	641a      	str	r2, [r3, #64]	@ 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff fe54 	bl	8005912 <HAL_SMBUS_MasterTxCpltCallback>
 8005c6a:	e066      	b.n	8005d3a <SMBUS_Master_ISR+0x392>
 8005c6c:	fe00e800 	.word	0xfe00e800
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c74:	2b22      	cmp	r3, #34	@ 0x22
 8005c76:	d160      	bne.n	8005d3a <SMBUS_Master_ISR+0x392>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8005c78:	21d4      	movs	r1, #212	@ 0xd4
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 fa42 	bl	8006104 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	641a      	str	r2, [r3, #64]	@ 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7ff fe45 	bl	8005926 <HAL_SMBUS_MasterRxCpltCallback>
 8005c9c:	e04d      	b.n	8005d3a <SMBUS_Master_ISR+0x392>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TC) != RESET)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d048      	beq.n	8005d3a <SMBUS_Master_ISR+0x392>
  {
    if (hsmbus->XferCount == 0U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d143      	bne.n	8005d3a <SMBUS_Master_ISR+0x392>
    {
      /* Specific use case for Quick command */
      if (hsmbus->pBuffPtr == NULL)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d108      	bne.n	8005ccc <SMBUS_Master_ISR+0x324>
      {
        /* Generate a Stop command */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cc8:	605a      	str	r2, [r3, #4]
 8005cca:	e036      	b.n	8005d3a <SMBUS_Master_ISR+0x392>
      }
      /* Call TxCpltCallback() if no stop mode is set */
      else if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cd6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cda:	d02e      	beq.n	8005d3a <SMBUS_Master_ISR+0x392>
      {
        /* No Generate Stop, to permit restart mode */
        /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */

        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce0:	2b12      	cmp	r3, #18
 8005ce2:	d112      	bne.n	8005d0a <SMBUS_Master_ISR+0x362>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8005ce4:	21f2      	movs	r1, #242	@ 0xf2
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fa0c 	bl	8006104 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	641a      	str	r2, [r3, #64]	@ 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff fe05 	bl	8005912 <HAL_SMBUS_MasterTxCpltCallback>
 8005d08:	e017      	b.n	8005d3a <SMBUS_Master_ISR+0x392>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d0e:	2b22      	cmp	r3, #34	@ 0x22
 8005d10:	d113      	bne.n	8005d3a <SMBUS_Master_ISR+0x392>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8005d12:	21d4      	movs	r1, #212	@ 0xd4
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f9f5 	bl	8006104 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	641a      	str	r2, [r3, #64]	@ 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7ff fdf8 	bl	8005926 <HAL_SMBUS_MasterRxCpltCallback>
 8005d36:	e000      	b.n	8005d3a <SMBUS_Master_ISR+0x392>
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8005d38:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <SMBUS_Slave_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection;
  uint16_t SlaveAddrCode;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d101      	bne.n	8005d64 <SMBUS_Slave_ISR+0x18>
 8005d60:	2302      	movs	r3, #2
 8005d62:	e1c8      	b.n	80060f6 <SMBUS_Slave_ISR+0x3aa>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f003 0310 	and.w	r3, r3, #16
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d039      	beq.n	8005dea <SMBUS_Slave_ISR+0x9e>
  {
    /* Check that SMBUS transfer finished */
    /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hsmbus->XferCount == 0U)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <SMBUS_Slave_ISR+0x4c>
    {
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2210      	movs	r2, #16
 8005d86:	61da      	str	r2, [r3, #28]

      /* Flush TX register */
      SMBUS_Flush_TXDR(hsmbus);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 faed 	bl	8006368 <SMBUS_Flush_TXDR>

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d96:	e149      	b.n	800602c <SMBUS_Slave_ISR+0x2e0>
    }
    else
    {
      /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2210      	movs	r2, #16
 8005d9e:	61da      	str	r2, [r3, #28]

      /* Set HAL State to "Idle" State, mean to LISTEN state */
      /* So reset Slave Busy state */
      hsmbus->PreviousState = hsmbus->State;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dac:	f023 0232 	bic.w	r2, r3, #50	@ 0x32
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	649a      	str	r2, [r3, #72]	@ 0x48
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005db8:	f023 0242 	bic.w	r2, r3, #66	@ 0x42
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 8005dc0:	21f6      	movs	r1, #246	@ 0xf6
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 f99e 	bl	8006104 <SMBUS_Disable_IRQ>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dcc:	f043 0204 	orr.w	r2, r3, #4
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Flush TX register */
      SMBUS_Flush_TXDR(hsmbus);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fac7 	bl	8006368 <SMBUS_Flush_TXDR>

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ErrorCallback(hsmbus);
#else
      HAL_SMBUS_ErrorCallback(hsmbus);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff fdd5 	bl	8005992 <HAL_SMBUS_ErrorCallback>
 8005de8:	e120      	b.n	800602c <SMBUS_Slave_ISR+0x2e0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_ADDR) != RESET)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	f003 0308 	and.w	r3, r3, #8
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d022      	beq.n	8005e3a <SMBUS_Slave_ISR+0xee>
  {
    TransferDirection = (uint8_t)(SMBUS_GET_DIR(hsmbus));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	0c1b      	lsrs	r3, r3, #16
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
    SlaveAddrCode = (uint16_t)(SMBUS_GET_ADDR_MATCH(hsmbus));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	0c5b      	lsrs	r3, r3, #17
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e12:	81bb      	strh	r3, [r7, #12]

    /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
    /* Other ADDRInterrupt will be treat in next Listen usecase */
    __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0208 	bic.w	r2, r2, #8
 8005e22:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Call Slave Addr callback */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
#else
    HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
 8005e2c:	89ba      	ldrh	r2, [r7, #12]
 8005e2e:	7bfb      	ldrb	r3, [r7, #15]
 8005e30:	4619      	mov	r1, r3
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff fd95 	bl	8005962 <HAL_SMBUS_AddrCallback>
 8005e38:	e0f8      	b.n	800602c <SMBUS_Slave_ISR+0x2e0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d105      	bne.n	8005e50 <SMBUS_Slave_ISR+0x104>
           (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET))
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 80b0 	beq.w	8005fb0 <SMBUS_Slave_ISR+0x264>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e54:	f003 0342 	and.w	r3, r3, #66	@ 0x42
 8005e58:	2b42      	cmp	r3, #66	@ 0x42
 8005e5a:	d15e      	bne.n	8005f1a <SMBUS_Slave_ISR+0x1ce>
    {
      /* Read data from RXDR */
      *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	635a      	str	r2, [r3, #52]	@ 0x34

      hsmbus->XferSize--;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	871a      	strh	r2, [r3, #56]	@ 0x38
      hsmbus->XferCount--;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	875a      	strh	r2, [r3, #58]	@ 0x3a

      if (hsmbus->XferCount == 1U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d10f      	bne.n	8005eb8 <SMBUS_Slave_ISR+0x16c>
      {
        /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
        /* or only the last Byte of Transfer */
        /* So reset the RELOAD bit mode */
        hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	63da      	str	r2, [r3, #60]	@ 0x3c
        SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	9200      	str	r2, [sp, #0]
 8005eac:	2201      	movs	r2, #1
 8005eae:	2100      	movs	r1, #0
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fa7d 	bl	80063b0 <SMBUS_TransferConfig>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005eb6:	e0b8      	b.n	800602a <SMBUS_Slave_ISR+0x2de>
      }
      else if (hsmbus->XferCount == 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d115      	bne.n	8005eee <SMBUS_Slave_ISR+0x1a2>
      {
        /* Last Byte is received, disable Interrupt */
        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8005ec2:	21d4      	movs	r1, #212	@ 0xd4
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f91d 	bl	8006104 <SMBUS_Disable_IRQ>

        /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
        hsmbus->PreviousState = hsmbus->State;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	641a      	str	r2, [r3, #64]	@ 0x40
        hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed6:	f023 0242 	bic.w	r2, r3, #66	@ 0x42
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	649a      	str	r2, [r3, #72]	@ 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

        /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
        hsmbus->SlaveRxCpltCallback(hsmbus);
#else
        HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fd31 	bl	800594e <HAL_SMBUS_SlaveRxCpltCallback>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005eec:	e09d      	b.n	800602a <SMBUS_Slave_ISR+0x2de>
      }
      else
      {
        /* Set Reload for next Bytes */
        SMBUS_TransferConfig(hsmbus, 0, 1,
                             SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        SMBUS_TransferConfig(hsmbus, 0, 1,
 8005ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005efa:	2200      	movs	r2, #0
 8005efc:	9200      	str	r2, [sp, #0]
 8005efe:	2201      	movs	r2, #1
 8005f00:	2100      	movs	r1, #0
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa54 	bl	80063b0 <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);

        /* Ack last Byte Read */
        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f16:	605a      	str	r2, [r3, #4]
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005f18:	e087      	b.n	800602a <SMBUS_Slave_ISR+0x2de>
      }
    }
    else if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f1e:	f003 0332 	and.w	r3, r3, #50	@ 0x32
 8005f22:	2b32      	cmp	r3, #50	@ 0x32
 8005f24:	f040 8081 	bne.w	800602a <SMBUS_Slave_ISR+0x2de>
    {
      if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d07b      	beq.n	800602a <SMBUS_Slave_ISR+0x2de>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d177      	bne.n	800602a <SMBUS_Slave_ISR+0x2de>
      {
        if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	2bff      	cmp	r3, #255	@ 0xff
 8005f42:	d910      	bls.n	8005f66 <SMBUS_Slave_ISR+0x21a>
        {
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
                               (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
 8005f4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f50:	2200      	movs	r2, #0
 8005f52:	9200      	str	r2, [sp, #0]
 8005f54:	22ff      	movs	r2, #255	@ 0xff
 8005f56:	2100      	movs	r1, #0
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fa29 	bl	80063b0 <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          hsmbus->XferSize = MAX_NBYTE_SIZE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	22ff      	movs	r2, #255	@ 0xff
 8005f62:	871a      	strh	r2, [r3, #56]	@ 0x38
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005f64:	e061      	b.n	800602a <SMBUS_Slave_ISR+0x2de>
        }
        else
        {
          hsmbus->XferSize = hsmbus->XferCount;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	871a      	strh	r2, [r3, #56]	@ 0x38
          SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	9100      	str	r1, [sp, #0]
 8005f7e:	2100      	movs	r1, #0
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fa15 	bl	80063b0 <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
          if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d04a      	beq.n	800602a <SMBUS_Slave_ISR+0x2de>
          {
            hsmbus->XferSize--;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	871a      	strh	r2, [r3, #56]	@ 0x38
            hsmbus->XferCount--;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	3b01      	subs	r3, #1
 8005fa8:	b29a      	uxth	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	875a      	strh	r2, [r3, #58]	@ 0x3a
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8005fae:	e03c      	b.n	800602a <SMBUS_Slave_ISR+0x2de>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	f003 0302 	and.w	r3, r3, #2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d038      	beq.n	800602c <SMBUS_Slave_ISR+0x2e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hsmbus->XferCount > 0U)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d017      	beq.n	8005ff4 <SMBUS_Slave_ISR+0x2a8>
    {
      /* Write data to TXDR */
      hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc8:	781a      	ldrb	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fd4:	1c5a      	adds	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	635a      	str	r2, [r3, #52]	@ 0x34

      hsmbus->XferCount--;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	875a      	strh	r2, [r3, #58]	@ 0x3a
      hsmbus->XferSize--;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	871a      	strh	r2, [r3, #56]	@ 0x38
    }

    if (hsmbus->XferCount == 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d116      	bne.n	800602c <SMBUS_Slave_ISR+0x2e0>
    {
      /* Last Byte is Transmitted */
      /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8005ffe:	21f2      	movs	r1, #242	@ 0xf2
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 f87f 	bl	8006104 <SMBUS_Disable_IRQ>
      hsmbus->PreviousState = hsmbus->State;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006012:	f023 0232 	bic.w	r2, r3, #50	@ 0x32
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->SlaveTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7ff fc89 	bl	800593a <HAL_SMBUS_SlaveTxCpltCallback>
 8006028:	e000      	b.n	800602c <SMBUS_Slave_ISR+0x2e0>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800602a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b00      	cmp	r3, #0
 8006034:	d05a      	beq.n	80060ec <SMBUS_Slave_ISR+0x3a0>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800603a:	f003 0308 	and.w	r3, r3, #8
 800603e:	2b08      	cmp	r3, #8
 8006040:	d154      	bne.n	80060ec <SMBUS_Slave_ISR+0x3a0>
    {
      /* Store Last receive data if any */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b04      	cmp	r3, #4
 800604e:	d11c      	bne.n	800608a <SMBUS_Slave_ISR+0x33e>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	635a      	str	r2, [r3, #52]	@ 0x34

        if ((hsmbus->XferSize > 0U))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00c      	beq.n	800608a <SMBUS_Slave_ISR+0x33e>
        {
          hsmbus->XferSize--;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	871a      	strh	r2, [r3, #56]	@ 0x38
          hsmbus->XferCount--;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8f5b      	ldrh	r3, [r3, #58]	@ 0x3a
 8006080:	b29b      	uxth	r3, r3
 8006082:	3b01      	subs	r3, #1
 8006084:	b29a      	uxth	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	875a      	strh	r2, [r3, #58]	@ 0x3a
        }
      }

      /* Disable RX and TX Interrupts */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800608a:	21f6      	movs	r1, #246	@ 0xf6
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f839 	bl	8006104 <SMBUS_Disable_IRQ>

      /* Disable ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 8006092:	2138      	movs	r1, #56	@ 0x38
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f835 	bl	8006104 <SMBUS_Disable_IRQ>

      /* Disable Address Acknowledge */
      hsmbus->Instance->CR2 |= I2C_CR2_NACK;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	685a      	ldr	r2, [r3, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80060a8:	605a      	str	r2, [r3, #4]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6859      	ldr	r1, [r3, #4]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	4b12      	ldr	r3, [pc, #72]	@ (8006100 <SMBUS_Slave_ISR+0x3b4>)
 80060b6:	400b      	ands	r3, r1
 80060b8:	6053      	str	r3, [r2, #4]

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2220      	movs	r2, #32
 80060c0:	61da      	str	r2, [r3, #28]

      /* Clear ADDR flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2208      	movs	r2, #8
 80060c8:	61da      	str	r2, [r3, #28]

      hsmbus->XferOptions = 0;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	63da      	str	r2, [r3, #60]	@ 0x3c
      hsmbus->PreviousState = hsmbus->State;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	649a      	str	r2, [r3, #72]	@ 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ListenCpltCallback(hsmbus);
#else
      HAL_SMBUS_ListenCpltCallback(hsmbus);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f7ff fc49 	bl	800597e <HAL_SMBUS_ListenCpltCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	fe00e800 	.word	0xfe00e800

08006104 <SMBUS_Disable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
  uint32_t tmpstate = hsmbus->State;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006116:	60bb      	str	r3, [r7, #8]

  if ((tmpstate == HAL_SMBUS_STATE_READY) && ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d108      	bne.n	8006130 <SMBUS_Disable_IRQ+0x2c>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <SMBUS_Disable_IRQ+0x2c>
  {
    /* Disable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800612e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 8006136:	2bf2      	cmp	r3, #242	@ 0xf2
 8006138:	d11c      	bne.n	8006174 <SMBUS_Disable_IRQ+0x70>
  {
    /* Disable TC, STOP, NACK and TXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006140:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d108      	bne.n	8006162 <SMBUS_Disable_IRQ+0x5e>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <SMBUS_Disable_IRQ+0x5e>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006160:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d103      	bne.n	8006174 <SMBUS_Disable_IRQ+0x70>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8006172:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	f003 03d4 	and.w	r3, r3, #212	@ 0xd4
 800617a:	2bd4      	cmp	r3, #212	@ 0xd4
 800617c:	d11c      	bne.n	80061b8 <SMBUS_Disable_IRQ+0xb4>
  {
    /* Disable TC, STOP, NACK and RXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006184:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d108      	bne.n	80061a6 <SMBUS_Disable_IRQ+0xa2>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d103      	bne.n	80061a6 <SMBUS_Disable_IRQ+0xa2>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a4:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f003 0308 	and.w	r3, r3, #8
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d103      	bne.n	80061b8 <SMBUS_Disable_IRQ+0xb4>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80061b6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061be:	2b38      	cmp	r3, #56	@ 0x38
 80061c0:	d10e      	bne.n	80061e0 <SMBUS_Disable_IRQ+0xdc>
  {
    /* Disable ADDR, STOP and NACK interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80061c8:	60fb      	str	r3, [r7, #12]

    if (SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d103      	bne.n	80061e0 <SMBUS_Disable_IRQ+0xdc>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061de:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6819      	ldr	r1, [r3, #0]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	43da      	mvns	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	400a      	ands	r2, r1
 80061f0:	601a      	str	r2, [r3, #0]
}
 80061f2:	bf00      	nop
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <SMBUS_ITErrorHandler>:
  * @brief  SMBUS interrupts error handler.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ITErrorHandler(SMBUS_HandleTypeDef *hsmbus)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b086      	sub	sp, #24
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hsmbus->Instance->ISR);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hsmbus->Instance->CR1);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	613b      	str	r3, [r7, #16]
  uint32_t tmpstate;
  uint32_t tmperror;

  /* SMBUS Bus error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00f      	beq.n	8006240 <SMBUS_ITErrorHandler+0x42>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <SMBUS_ITErrorHandler+0x42>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800622e:	f043 0201 	orr.w	r2, r3, #1
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear BERR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800623e:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00f      	beq.n	800626a <SMBUS_ITErrorHandler+0x6c>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00a      	beq.n	800626a <SMBUS_ITErrorHandler+0x6c>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006258:	f043 0208 	orr.w	r2, r3, #8
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear OVR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006268:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00f      	beq.n	8006294 <SMBUS_ITErrorHandler+0x96>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <SMBUS_ITErrorHandler+0x96>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006282:	f043 0202 	orr.w	r2, r3, #2
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear ARLO flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006292:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00f      	beq.n	80062be <SMBUS_ITErrorHandler+0xc0>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <SMBUS_ITErrorHandler+0xc0>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062ac:	f043 0220 	orr.w	r2, r3, #32
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear TIMEOUT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80062bc:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00f      	beq.n	80062e8 <SMBUS_ITErrorHandler+0xea>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <SMBUS_ITErrorHandler+0xea>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear ALERT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80062e6:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00f      	beq.n	8006312 <SMBUS_ITErrorHandler+0x114>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <SMBUS_ITErrorHandler+0x114>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006300:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Clear PEC error flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006310:	61da      	str	r2, [r3, #28]
  }

  /* Flush TX register */
  SMBUS_Flush_TXDR(hsmbus);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f828 	bl	8006368 <SMBUS_Flush_TXDR>

  /* Store current volatile hsmbus->ErrorCode, misra rule */
  tmperror = hsmbus->ErrorCode;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800631c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror != HAL_SMBUS_ERROR_NONE) && (tmperror != HAL_SMBUS_ERROR_ACKF))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d01d      	beq.n	8006360 <SMBUS_ITErrorHandler+0x162>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b04      	cmp	r3, #4
 8006328:	d01a      	beq.n	8006360 <SMBUS_ITErrorHandler+0x162>
  {
    /* Do not Reset the HAL state in case of ALERT error */
    if ((tmperror & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006330:	2b00      	cmp	r3, #0
 8006332:	d112      	bne.n	800635a <SMBUS_ITErrorHandler+0x15c>
    {
      /* Store current volatile hsmbus->State, misra rule */
      tmpstate = hsmbus->State;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006338:	60bb      	str	r3, [r7, #8]

      if (((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f003 0332 	and.w	r3, r3, #50	@ 0x32
 8006340:	2b32      	cmp	r3, #50	@ 0x32
 8006342:	d004      	beq.n	800634e <SMBUS_ITErrorHandler+0x150>
          || ((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	f003 0342 	and.w	r3, r3, #66	@ 0x42
 800634a:	2b42      	cmp	r3, #66	@ 0x42
 800634c:	d105      	bne.n	800635a <SMBUS_ITErrorHandler+0x15c>
      {
        /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
        /* keep HAL_SMBUS_STATE_LISTEN if set */
        hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	641a      	str	r2, [r3, #64]	@ 0x40
        hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2208      	movs	r2, #8
 8006358:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff fb19 	bl	8005992 <HAL_SMBUS_ErrorCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
}
 8006360:	bf00      	nop
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <SMBUS_Flush_TXDR>:
  * @brief  SMBUS Tx data register flush process.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_Flush_TXDR(SMBUS_HandleTypeDef *hsmbus)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXIS) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	d103      	bne.n	8006386 <SMBUS_Flush_TXDR+0x1e>
  {
    hsmbus->Instance->TXDR = 0x00U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2200      	movs	r2, #0
 8006384:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXE) == RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b01      	cmp	r3, #1
 8006392:	d007      	beq.n	80063a4 <SMBUS_Flush_TXDR+0x3c>
  {
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TXE);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699a      	ldr	r2, [r3, #24]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	619a      	str	r2, [r3, #24]
  }
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <SMBUS_TransferConfig>:
  *     @arg @ref SMBUS_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size,
                                 uint32_t Mode, uint32_t Request)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	607b      	str	r3, [r7, #4]
 80063ba:	460b      	mov	r3, r1
 80063bc:	817b      	strh	r3, [r7, #10]
 80063be:	4613      	mov	r3, r2
 80063c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
  assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hsmbus->Instance->CR2,
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	0d5b      	lsrs	r3, r3, #21
 80063cc:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80063d0:	4b0d      	ldr	r3, [pc, #52]	@ (8006408 <SMBUS_TransferConfig+0x58>)
 80063d2:	430b      	orrs	r3, r1
 80063d4:	43db      	mvns	r3, r3
 80063d6:	ea02 0103 	and.w	r1, r2, r3
 80063da:	897b      	ldrh	r3, [r7, #10]
 80063dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80063e0:	7a7b      	ldrb	r3, [r7, #9]
 80063e2:	041b      	lsls	r3, r3, #16
 80063e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	431a      	orrs	r2, r3
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	431a      	orrs	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31UL - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_PECBYTE)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	07ff63ff 	.word	0x07ff63ff

0800640c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e049      	b.n	80064b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d106      	bne.n	8006438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f7fb fb72 	bl	8001b1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	3304      	adds	r3, #4
 8006448:	4619      	mov	r1, r3
 800644a:	4610      	mov	r0, r2
 800644c:	f000 f9d2 	bl	80067f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d001      	beq.n	80064d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e03b      	b.n	800654c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f042 0201 	orr.w	r2, r2, #1
 80064ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a19      	ldr	r2, [pc, #100]	@ (8006558 <HAL_TIM_Base_Start_IT+0x9c>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d009      	beq.n	800650a <HAL_TIM_Base_Start_IT+0x4e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064fe:	d004      	beq.n	800650a <HAL_TIM_Base_Start_IT+0x4e>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a15      	ldr	r2, [pc, #84]	@ (800655c <HAL_TIM_Base_Start_IT+0xa0>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d115      	bne.n	8006536 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	4b13      	ldr	r3, [pc, #76]	@ (8006560 <HAL_TIM_Base_Start_IT+0xa4>)
 8006512:	4013      	ands	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2b06      	cmp	r3, #6
 800651a:	d015      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x8c>
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006522:	d011      	beq.n	8006548 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006534:	e008      	b.n	8006548 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f042 0201 	orr.w	r2, r2, #1
 8006544:	601a      	str	r2, [r3, #0]
 8006546:	e000      	b.n	800654a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006548:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr
 8006558:	40012c00 	.word	0x40012c00
 800655c:	40014000 	.word	0x40014000
 8006560:	00010007 	.word	0x00010007

08006564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f003 0302 	and.w	r3, r3, #2
 8006576:	2b02      	cmp	r3, #2
 8006578:	d122      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f003 0302 	and.w	r3, r3, #2
 8006584:	2b02      	cmp	r3, #2
 8006586:	d11b      	bne.n	80065c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0202 	mvn.w	r2, #2
 8006590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	699b      	ldr	r3, [r3, #24]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f905 	bl	80067b6 <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f8f7 	bl	80067a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f908 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	f003 0304 	and.w	r3, r3, #4
 80065ca:	2b04      	cmp	r3, #4
 80065cc:	d122      	bne.n	8006614 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d11b      	bne.n	8006614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f06f 0204 	mvn.w	r2, #4
 80065e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2202      	movs	r2, #2
 80065ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f8db 	bl	80067b6 <HAL_TIM_IC_CaptureCallback>
 8006600:	e005      	b.n	800660e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f8cd 	bl	80067a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f8de 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	f003 0308 	and.w	r3, r3, #8
 800661e:	2b08      	cmp	r3, #8
 8006620:	d122      	bne.n	8006668 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f003 0308 	and.w	r3, r3, #8
 800662c:	2b08      	cmp	r3, #8
 800662e:	d11b      	bne.n	8006668 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f06f 0208 	mvn.w	r2, #8
 8006638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2204      	movs	r2, #4
 800663e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69db      	ldr	r3, [r3, #28]
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f8b1 	bl	80067b6 <HAL_TIM_IC_CaptureCallback>
 8006654:	e005      	b.n	8006662 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f8a3 	bl	80067a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f8b4 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b10      	cmp	r3, #16
 8006674:	d122      	bne.n	80066bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	f003 0310 	and.w	r3, r3, #16
 8006680:	2b10      	cmp	r3, #16
 8006682:	d11b      	bne.n	80066bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f06f 0210 	mvn.w	r2, #16
 800668c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2208      	movs	r2, #8
 8006692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d003      	beq.n	80066aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f887 	bl	80067b6 <HAL_TIM_IC_CaptureCallback>
 80066a8:	e005      	b.n	80066b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 f879 	bl	80067a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f88a 	bl	80067ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d10e      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	f003 0301 	and.w	r3, r3, #1
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d107      	bne.n	80066e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f06f 0201 	mvn.w	r2, #1
 80066e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f7fa fca4 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066f2:	2b80      	cmp	r3, #128	@ 0x80
 80066f4:	d10e      	bne.n	8006714 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006700:	2b80      	cmp	r3, #128	@ 0x80
 8006702:	d107      	bne.n	8006714 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800670c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f944 	bl	800699c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006722:	d10e      	bne.n	8006742 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672e:	2b80      	cmp	r3, #128	@ 0x80
 8006730:	d107      	bne.n	8006742 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800673a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f937 	bl	80069b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800674c:	2b40      	cmp	r3, #64	@ 0x40
 800674e:	d10e      	bne.n	800676e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675a:	2b40      	cmp	r3, #64	@ 0x40
 800675c:	d107      	bne.n	800676e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 f838 	bl	80067de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f003 0320 	and.w	r3, r3, #32
 8006778:	2b20      	cmp	r3, #32
 800677a:	d10e      	bne.n	800679a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b20      	cmp	r3, #32
 8006788:	d107      	bne.n	800679a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f06f 0220 	mvn.w	r2, #32
 8006792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f8f7 	bl	8006988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067aa:	bf00      	nop
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067be:	bf00      	nop
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067ca:	b480      	push	{r7}
 80067cc:	b083      	sub	sp, #12
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067d2:	bf00      	nop
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067de:	b480      	push	{r7}
 80067e0:	b083      	sub	sp, #12
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067e6:	bf00      	nop
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr
	...

080067f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4a2a      	ldr	r2, [pc, #168]	@ (80068b0 <TIM_Base_SetConfig+0xbc>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d003      	beq.n	8006814 <TIM_Base_SetConfig+0x20>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006812:	d108      	bne.n	8006826 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800681a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	4313      	orrs	r3, r2
 8006824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <TIM_Base_SetConfig+0xbc>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00b      	beq.n	8006846 <TIM_Base_SetConfig+0x52>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006834:	d007      	beq.n	8006846 <TIM_Base_SetConfig+0x52>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a1e      	ldr	r2, [pc, #120]	@ (80068b4 <TIM_Base_SetConfig+0xc0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <TIM_Base_SetConfig+0x52>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a1d      	ldr	r2, [pc, #116]	@ (80068b8 <TIM_Base_SetConfig+0xc4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d108      	bne.n	8006858 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800684c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a0c      	ldr	r2, [pc, #48]	@ (80068b0 <TIM_Base_SetConfig+0xbc>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <TIM_Base_SetConfig+0xa0>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a0b      	ldr	r2, [pc, #44]	@ (80068b4 <TIM_Base_SetConfig+0xc0>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_Base_SetConfig+0xa0>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a0a      	ldr	r2, [pc, #40]	@ (80068b8 <TIM_Base_SetConfig+0xc4>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d103      	bne.n	800689c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	615a      	str	r2, [r3, #20]
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40014400 	.word	0x40014400

080068bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e04f      	b.n	8006974 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a21      	ldr	r2, [pc, #132]	@ (8006980 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d108      	bne.n	8006910 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006904:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006916:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a14      	ldr	r2, [pc, #80]	@ (8006980 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d009      	beq.n	8006948 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800693c:	d004      	beq.n	8006948 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a10      	ldr	r2, [pc, #64]	@ (8006984 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d10c      	bne.n	8006962 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800694e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	4313      	orrs	r3, r2
 8006958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006972:	2300      	movs	r3, #0
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	40012c00 	.word	0x40012c00
 8006984:	40014000 	.word	0x40014000

08006988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069a4:	bf00      	nop
 80069a6:	370c      	adds	r7, #12
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b083      	sub	sp, #12
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80069b8:	bf00      	nop
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e040      	b.n	8006a58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d106      	bne.n	80069ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f7fb f8be 	bl	8001b68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2224      	movs	r2, #36	@ 0x24
 80069f0:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0201 	bic.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f8c0 	bl	8006b88 <UART_SetConfig>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e022      	b.n	8006a58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d002      	beq.n	8006a20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fae0 	bl	8006fe0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	689a      	ldr	r2, [r3, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fb67 	bl	8007124 <UART_CheckIdleState>
 8006a56:	4603      	mov	r3, r0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b08a      	sub	sp, #40	@ 0x28
 8006a64:	af02      	add	r7, sp, #8
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	4613      	mov	r3, r2
 8006a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a74:	2b20      	cmp	r3, #32
 8006a76:	f040 8081 	bne.w	8006b7c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <HAL_UART_Transmit+0x26>
 8006a80:	88fb      	ldrh	r3, [r7, #6]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	e079      	b.n	8006b7e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_UART_Transmit+0x38>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e072      	b.n	8006b7e <HAL_UART_Transmit+0x11e>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2221      	movs	r2, #33	@ 0x21
 8006aac:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006aae:	f7fb fae3 	bl	8002078 <HAL_GetTick>
 8006ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	88fa      	ldrh	r2, [r7, #6]
 8006ab8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	88fa      	ldrh	r2, [r7, #6]
 8006ac0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006acc:	d108      	bne.n	8006ae0 <HAL_UART_Transmit+0x80>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d104      	bne.n	8006ae0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	61bb      	str	r3, [r7, #24]
 8006ade:	e003      	b.n	8006ae8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 8006af0:	e02c      	b.n	8006b4c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2200      	movs	r2, #0
 8006afa:	2180      	movs	r1, #128	@ 0x80
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fb5a 	bl	80071b6 <UART_WaitOnFlagUntilTimeout>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e038      	b.n	8006b7e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10b      	bne.n	8006b2a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	881a      	ldrh	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b1e:	b292      	uxth	r2, r2
 8006b20:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	3302      	adds	r3, #2
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	e007      	b.n	8006b3a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006b34:	69fb      	ldr	r3, [r7, #28]
 8006b36:	3301      	adds	r3, #1
 8006b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d1cc      	bne.n	8006af2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2140      	movs	r1, #64	@ 0x40
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f000 fb27 	bl	80071b6 <UART_WaitOnFlagUntilTimeout>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e005      	b.n	8006b7e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2220      	movs	r2, #32
 8006b76:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	e000      	b.n	8006b7e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006b7c:	2302      	movs	r3, #2
  }
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3720      	adds	r7, #32
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b8c:	b08a      	sub	sp, #40	@ 0x28
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4bb4      	ldr	r3, [pc, #720]	@ (8006e88 <UART_SetConfig+0x300>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4aa9      	ldr	r2, [pc, #676]	@ (8006e8c <UART_SetConfig+0x304>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c04:	430a      	orrs	r2, r1
 8006c06:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4aa0      	ldr	r2, [pc, #640]	@ (8006e90 <UART_SetConfig+0x308>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d126      	bne.n	8006c60 <UART_SetConfig+0xd8>
 8006c12:	4ba0      	ldr	r3, [pc, #640]	@ (8006e94 <UART_SetConfig+0x30c>)
 8006c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c18:	f003 0303 	and.w	r3, r3, #3
 8006c1c:	2b03      	cmp	r3, #3
 8006c1e:	d81b      	bhi.n	8006c58 <UART_SetConfig+0xd0>
 8006c20:	a201      	add	r2, pc, #4	@ (adr r2, 8006c28 <UART_SetConfig+0xa0>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c49 	.word	0x08006c49
 8006c30:	08006c41 	.word	0x08006c41
 8006c34:	08006c51 	.word	0x08006c51
 8006c38:	2301      	movs	r3, #1
 8006c3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c3e:	e080      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006c40:	2302      	movs	r3, #2
 8006c42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c46:	e07c      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006c48:	2304      	movs	r3, #4
 8006c4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c4e:	e078      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006c50:	2308      	movs	r3, #8
 8006c52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c56:	e074      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006c58:	2310      	movs	r3, #16
 8006c5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c5e:	e070      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a8c      	ldr	r2, [pc, #560]	@ (8006e98 <UART_SetConfig+0x310>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d138      	bne.n	8006cdc <UART_SetConfig+0x154>
 8006c6a:	4b8a      	ldr	r3, [pc, #552]	@ (8006e94 <UART_SetConfig+0x30c>)
 8006c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c70:	f003 030c 	and.w	r3, r3, #12
 8006c74:	2b0c      	cmp	r3, #12
 8006c76:	d82d      	bhi.n	8006cd4 <UART_SetConfig+0x14c>
 8006c78:	a201      	add	r2, pc, #4	@ (adr r2, 8006c80 <UART_SetConfig+0xf8>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006cd5 	.word	0x08006cd5
 8006c88:	08006cd5 	.word	0x08006cd5
 8006c8c:	08006cd5 	.word	0x08006cd5
 8006c90:	08006cc5 	.word	0x08006cc5
 8006c94:	08006cd5 	.word	0x08006cd5
 8006c98:	08006cd5 	.word	0x08006cd5
 8006c9c:	08006cd5 	.word	0x08006cd5
 8006ca0:	08006cbd 	.word	0x08006cbd
 8006ca4:	08006cd5 	.word	0x08006cd5
 8006ca8:	08006cd5 	.word	0x08006cd5
 8006cac:	08006cd5 	.word	0x08006cd5
 8006cb0:	08006ccd 	.word	0x08006ccd
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cba:	e042      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cc2:	e03e      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cca:	e03a      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006ccc:	2308      	movs	r3, #8
 8006cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cd2:	e036      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cda:	e032      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a6a      	ldr	r2, [pc, #424]	@ (8006e8c <UART_SetConfig+0x304>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d12a      	bne.n	8006d3c <UART_SetConfig+0x1b4>
 8006ce6:	4b6b      	ldr	r3, [pc, #428]	@ (8006e94 <UART_SetConfig+0x30c>)
 8006ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cec:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006cf0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cf4:	d01a      	beq.n	8006d2c <UART_SetConfig+0x1a4>
 8006cf6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006cfa:	d81b      	bhi.n	8006d34 <UART_SetConfig+0x1ac>
 8006cfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d00:	d00c      	beq.n	8006d1c <UART_SetConfig+0x194>
 8006d02:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d06:	d815      	bhi.n	8006d34 <UART_SetConfig+0x1ac>
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d003      	beq.n	8006d14 <UART_SetConfig+0x18c>
 8006d0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d10:	d008      	beq.n	8006d24 <UART_SetConfig+0x19c>
 8006d12:	e00f      	b.n	8006d34 <UART_SetConfig+0x1ac>
 8006d14:	2300      	movs	r3, #0
 8006d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d1a:	e012      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d22:	e00e      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006d24:	2304      	movs	r3, #4
 8006d26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d2a:	e00a      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006d2c:	2308      	movs	r3, #8
 8006d2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d32:	e006      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006d34:	2310      	movs	r3, #16
 8006d36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d3a:	e002      	b.n	8006d42 <UART_SetConfig+0x1ba>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a51      	ldr	r2, [pc, #324]	@ (8006e8c <UART_SetConfig+0x304>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d17a      	bne.n	8006e42 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d824      	bhi.n	8006d9e <UART_SetConfig+0x216>
 8006d54:	a201      	add	r2, pc, #4	@ (adr r2, 8006d5c <UART_SetConfig+0x1d4>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d81 	.word	0x08006d81
 8006d60:	08006d9f 	.word	0x08006d9f
 8006d64:	08006d89 	.word	0x08006d89
 8006d68:	08006d9f 	.word	0x08006d9f
 8006d6c:	08006d8f 	.word	0x08006d8f
 8006d70:	08006d9f 	.word	0x08006d9f
 8006d74:	08006d9f 	.word	0x08006d9f
 8006d78:	08006d9f 	.word	0x08006d9f
 8006d7c:	08006d97 	.word	0x08006d97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d80:	f7fd ffd0 	bl	8004d24 <HAL_RCC_GetPCLK1Freq>
 8006d84:	61f8      	str	r0, [r7, #28]
        break;
 8006d86:	e010      	b.n	8006daa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d88:	4b44      	ldr	r3, [pc, #272]	@ (8006e9c <UART_SetConfig+0x314>)
 8006d8a:	61fb      	str	r3, [r7, #28]
        break;
 8006d8c:	e00d      	b.n	8006daa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d8e:	f7fd ff31 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006d92:	61f8      	str	r0, [r7, #28]
        break;
 8006d94:	e009      	b.n	8006daa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d9a:	61fb      	str	r3, [r7, #28]
        break;
 8006d9c:	e005      	b.n	8006daa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006da8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8107 	beq.w	8006fc0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	4613      	mov	r3, r2
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	4413      	add	r3, r2
 8006dbc:	69fa      	ldr	r2, [r7, #28]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d305      	bcc.n	8006dce <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dc8:	69fa      	ldr	r2, [r7, #28]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d903      	bls.n	8006dd6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006dd4:	e0f4      	b.n	8006fc0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	461c      	mov	r4, r3
 8006ddc:	4615      	mov	r5, r2
 8006dde:	f04f 0200 	mov.w	r2, #0
 8006de2:	f04f 0300 	mov.w	r3, #0
 8006de6:	022b      	lsls	r3, r5, #8
 8006de8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006dec:	0222      	lsls	r2, r4, #8
 8006dee:	68f9      	ldr	r1, [r7, #12]
 8006df0:	6849      	ldr	r1, [r1, #4]
 8006df2:	0849      	lsrs	r1, r1, #1
 8006df4:	2000      	movs	r0, #0
 8006df6:	4688      	mov	r8, r1
 8006df8:	4681      	mov	r9, r0
 8006dfa:	eb12 0a08 	adds.w	sl, r2, r8
 8006dfe:	eb43 0b09 	adc.w	fp, r3, r9
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	603b      	str	r3, [r7, #0]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e10:	4650      	mov	r0, sl
 8006e12:	4659      	mov	r1, fp
 8006e14:	f7f9 ff38 	bl	8000c88 <__aeabi_uldivmod>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e20:	69bb      	ldr	r3, [r7, #24]
 8006e22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e26:	d308      	bcc.n	8006e3a <UART_SetConfig+0x2b2>
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e2e:	d204      	bcs.n	8006e3a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	60da      	str	r2, [r3, #12]
 8006e38:	e0c2      	b.n	8006fc0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e40:	e0be      	b.n	8006fc0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e4a:	d16a      	bne.n	8006f22 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006e4c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d834      	bhi.n	8006ebe <UART_SetConfig+0x336>
 8006e54:	a201      	add	r2, pc, #4	@ (adr r2, 8006e5c <UART_SetConfig+0x2d4>)
 8006e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5a:	bf00      	nop
 8006e5c:	08006e81 	.word	0x08006e81
 8006e60:	08006ea1 	.word	0x08006ea1
 8006e64:	08006ea9 	.word	0x08006ea9
 8006e68:	08006ebf 	.word	0x08006ebf
 8006e6c:	08006eaf 	.word	0x08006eaf
 8006e70:	08006ebf 	.word	0x08006ebf
 8006e74:	08006ebf 	.word	0x08006ebf
 8006e78:	08006ebf 	.word	0x08006ebf
 8006e7c:	08006eb7 	.word	0x08006eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e80:	f7fd ff50 	bl	8004d24 <HAL_RCC_GetPCLK1Freq>
 8006e84:	61f8      	str	r0, [r7, #28]
        break;
 8006e86:	e020      	b.n	8006eca <UART_SetConfig+0x342>
 8006e88:	efff69f3 	.word	0xefff69f3
 8006e8c:	40008000 	.word	0x40008000
 8006e90:	40013800 	.word	0x40013800
 8006e94:	40021000 	.word	0x40021000
 8006e98:	40004400 	.word	0x40004400
 8006e9c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ea0:	f7fd ff56 	bl	8004d50 <HAL_RCC_GetPCLK2Freq>
 8006ea4:	61f8      	str	r0, [r7, #28]
        break;
 8006ea6:	e010      	b.n	8006eca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8006fdc <UART_SetConfig+0x454>)
 8006eaa:	61fb      	str	r3, [r7, #28]
        break;
 8006eac:	e00d      	b.n	8006eca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eae:	f7fd fea1 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006eb2:	61f8      	str	r0, [r7, #28]
        break;
 8006eb4:	e009      	b.n	8006eca <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006eba:	61fb      	str	r3, [r7, #28]
        break;
 8006ebc:	e005      	b.n	8006eca <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ec8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d077      	beq.n	8006fc0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	005a      	lsls	r2, r3, #1
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	085b      	lsrs	r3, r3, #1
 8006eda:	441a      	add	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	2b0f      	cmp	r3, #15
 8006eea:	d916      	bls.n	8006f1a <UART_SetConfig+0x392>
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef2:	d212      	bcs.n	8006f1a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	f023 030f 	bic.w	r3, r3, #15
 8006efc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	085b      	lsrs	r3, r3, #1
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	f003 0307 	and.w	r3, r3, #7
 8006f08:	b29a      	uxth	r2, r3
 8006f0a:	8afb      	ldrh	r3, [r7, #22]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	8afa      	ldrh	r2, [r7, #22]
 8006f16:	60da      	str	r2, [r3, #12]
 8006f18:	e052      	b.n	8006fc0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f20:	e04e      	b.n	8006fc0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f26:	2b08      	cmp	r3, #8
 8006f28:	d827      	bhi.n	8006f7a <UART_SetConfig+0x3f2>
 8006f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f30 <UART_SetConfig+0x3a8>)
 8006f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f30:	08006f55 	.word	0x08006f55
 8006f34:	08006f5d 	.word	0x08006f5d
 8006f38:	08006f65 	.word	0x08006f65
 8006f3c:	08006f7b 	.word	0x08006f7b
 8006f40:	08006f6b 	.word	0x08006f6b
 8006f44:	08006f7b 	.word	0x08006f7b
 8006f48:	08006f7b 	.word	0x08006f7b
 8006f4c:	08006f7b 	.word	0x08006f7b
 8006f50:	08006f73 	.word	0x08006f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f54:	f7fd fee6 	bl	8004d24 <HAL_RCC_GetPCLK1Freq>
 8006f58:	61f8      	str	r0, [r7, #28]
        break;
 8006f5a:	e014      	b.n	8006f86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f5c:	f7fd fef8 	bl	8004d50 <HAL_RCC_GetPCLK2Freq>
 8006f60:	61f8      	str	r0, [r7, #28]
        break;
 8006f62:	e010      	b.n	8006f86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f64:	4b1d      	ldr	r3, [pc, #116]	@ (8006fdc <UART_SetConfig+0x454>)
 8006f66:	61fb      	str	r3, [r7, #28]
        break;
 8006f68:	e00d      	b.n	8006f86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f6a:	f7fd fe43 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8006f6e:	61f8      	str	r0, [r7, #28]
        break;
 8006f70:	e009      	b.n	8006f86 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f76:	61fb      	str	r3, [r7, #28]
        break;
 8006f78:	e005      	b.n	8006f86 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006f84:	bf00      	nop
    }

    if (pclk != 0U)
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d019      	beq.n	8006fc0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	085a      	lsrs	r2, r3, #1
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	441a      	add	r2, r3
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	2b0f      	cmp	r3, #15
 8006fa4:	d909      	bls.n	8006fba <UART_SetConfig+0x432>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fac:	d205      	bcs.n	8006fba <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60da      	str	r2, [r3, #12]
 8006fb8:	e002      	b.n	8006fc0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8006fcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3728      	adds	r7, #40	@ 0x28
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fda:	bf00      	nop
 8006fdc:	00f42400 	.word	0x00f42400

08006fe0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00a      	beq.n	800700a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00a      	beq.n	800702c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d00a      	beq.n	800704e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	430a      	orrs	r2, r1
 800704c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00a      	beq.n	8007070 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	430a      	orrs	r2, r1
 800706e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007074:	f003 0310 	and.w	r3, r3, #16
 8007078:	2b00      	cmp	r3, #0
 800707a:	d00a      	beq.n	8007092 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007096:	f003 0320 	and.w	r3, r3, #32
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	430a      	orrs	r2, r1
 80070b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d01a      	beq.n	80070f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070de:	d10a      	bne.n	80070f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00a      	beq.n	8007118 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	430a      	orrs	r2, r1
 8007116:	605a      	str	r2, [r3, #4]
  }
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af02      	add	r7, sp, #8
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007134:	f7fa ffa0 	bl	8002078 <HAL_GetTick>
 8007138:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 0308 	and.w	r3, r3, #8
 8007144:	2b08      	cmp	r3, #8
 8007146:	d10e      	bne.n	8007166 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007148:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f82d 	bl	80071b6 <UART_WaitOnFlagUntilTimeout>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007162:	2303      	movs	r3, #3
 8007164:	e023      	b.n	80071ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b04      	cmp	r3, #4
 8007172:	d10e      	bne.n	8007192 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007178:	9300      	str	r3, [sp, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f817 	bl	80071b6 <UART_WaitOnFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	e00d      	b.n	80071ae <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2220      	movs	r2, #32
 8007196:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b09c      	sub	sp, #112	@ 0x70
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	603b      	str	r3, [r7, #0]
 80071c2:	4613      	mov	r3, r2
 80071c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071c6:	e0a5      	b.n	8007314 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071ce:	f000 80a1 	beq.w	8007314 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071d2:	f7fa ff51 	bl	8002078 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80071de:	429a      	cmp	r2, r3
 80071e0:	d302      	bcc.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80071e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d13e      	bne.n	8007266 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80071f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071f8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80071fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007206:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007208:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800720c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800720e:	e841 2300 	strex	r3, r2, [r1]
 8007212:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007216:	2b00      	cmp	r3, #0
 8007218:	d1e6      	bne.n	80071e8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3308      	adds	r3, #8
 8007220:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007224:	e853 3f00 	ldrex	r3, [r3]
 8007228:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800722a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800722c:	f023 0301 	bic.w	r3, r3, #1
 8007230:	663b      	str	r3, [r7, #96]	@ 0x60
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3308      	adds	r3, #8
 8007238:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800723a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800723c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007248:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e5      	bne.n	800721a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2220      	movs	r2, #32
 8007252:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2220      	movs	r2, #32
 8007258:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e067      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d04f      	beq.n	8007314 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	69db      	ldr	r3, [r3, #28]
 800727a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800727e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007282:	d147      	bne.n	8007314 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800728c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	e853 3f00 	ldrex	r3, [r3]
 800729a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80072a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	461a      	mov	r2, r3
 80072aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80072ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80072ae:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80072b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80072ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e6      	bne.n	800728e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3308      	adds	r3, #8
 80072c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	613b      	str	r3, [r7, #16]
   return(result);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f023 0301 	bic.w	r3, r3, #1
 80072d6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3308      	adds	r3, #8
 80072de:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80072e0:	623a      	str	r2, [r7, #32]
 80072e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	69f9      	ldr	r1, [r7, #28]
 80072e6:	6a3a      	ldr	r2, [r7, #32]
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e5      	bne.n	80072c0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2220      	movs	r2, #32
 80072f8:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2220      	movs	r2, #32
 8007304:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e010      	b.n	8007336 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69da      	ldr	r2, [r3, #28]
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4013      	ands	r3, r2
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	429a      	cmp	r2, r3
 8007322:	bf0c      	ite	eq
 8007324:	2301      	moveq	r3, #1
 8007326:	2300      	movne	r3, #0
 8007328:	b2db      	uxtb	r3, r3
 800732a:	461a      	mov	r2, r3
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	429a      	cmp	r2, r3
 8007330:	f43f af4a 	beq.w	80071c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3770      	adds	r7, #112	@ 0x70
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <__cvt>:
 800733e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007342:	ec57 6b10 	vmov	r6, r7, d0
 8007346:	2f00      	cmp	r7, #0
 8007348:	460c      	mov	r4, r1
 800734a:	4619      	mov	r1, r3
 800734c:	463b      	mov	r3, r7
 800734e:	bfbb      	ittet	lt
 8007350:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007354:	461f      	movlt	r7, r3
 8007356:	2300      	movge	r3, #0
 8007358:	232d      	movlt	r3, #45	@ 0x2d
 800735a:	700b      	strb	r3, [r1, #0]
 800735c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800735e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007362:	4691      	mov	r9, r2
 8007364:	f023 0820 	bic.w	r8, r3, #32
 8007368:	bfbc      	itt	lt
 800736a:	4632      	movlt	r2, r6
 800736c:	4616      	movlt	r6, r2
 800736e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007372:	d005      	beq.n	8007380 <__cvt+0x42>
 8007374:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007378:	d100      	bne.n	800737c <__cvt+0x3e>
 800737a:	3401      	adds	r4, #1
 800737c:	2102      	movs	r1, #2
 800737e:	e000      	b.n	8007382 <__cvt+0x44>
 8007380:	2103      	movs	r1, #3
 8007382:	ab03      	add	r3, sp, #12
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	ab02      	add	r3, sp, #8
 8007388:	9300      	str	r3, [sp, #0]
 800738a:	ec47 6b10 	vmov	d0, r6, r7
 800738e:	4653      	mov	r3, sl
 8007390:	4622      	mov	r2, r4
 8007392:	f001 f979 	bl	8008688 <_dtoa_r>
 8007396:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800739a:	4605      	mov	r5, r0
 800739c:	d119      	bne.n	80073d2 <__cvt+0x94>
 800739e:	f019 0f01 	tst.w	r9, #1
 80073a2:	d00e      	beq.n	80073c2 <__cvt+0x84>
 80073a4:	eb00 0904 	add.w	r9, r0, r4
 80073a8:	2200      	movs	r2, #0
 80073aa:	2300      	movs	r3, #0
 80073ac:	4630      	mov	r0, r6
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f9 fb8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80073b4:	b108      	cbz	r0, 80073ba <__cvt+0x7c>
 80073b6:	f8cd 900c 	str.w	r9, [sp, #12]
 80073ba:	2230      	movs	r2, #48	@ 0x30
 80073bc:	9b03      	ldr	r3, [sp, #12]
 80073be:	454b      	cmp	r3, r9
 80073c0:	d31e      	bcc.n	8007400 <__cvt+0xc2>
 80073c2:	9b03      	ldr	r3, [sp, #12]
 80073c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80073c6:	1b5b      	subs	r3, r3, r5
 80073c8:	4628      	mov	r0, r5
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	b004      	add	sp, #16
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073d6:	eb00 0904 	add.w	r9, r0, r4
 80073da:	d1e5      	bne.n	80073a8 <__cvt+0x6a>
 80073dc:	7803      	ldrb	r3, [r0, #0]
 80073de:	2b30      	cmp	r3, #48	@ 0x30
 80073e0:	d10a      	bne.n	80073f8 <__cvt+0xba>
 80073e2:	2200      	movs	r2, #0
 80073e4:	2300      	movs	r3, #0
 80073e6:	4630      	mov	r0, r6
 80073e8:	4639      	mov	r1, r7
 80073ea:	f7f9 fb6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ee:	b918      	cbnz	r0, 80073f8 <__cvt+0xba>
 80073f0:	f1c4 0401 	rsb	r4, r4, #1
 80073f4:	f8ca 4000 	str.w	r4, [sl]
 80073f8:	f8da 3000 	ldr.w	r3, [sl]
 80073fc:	4499      	add	r9, r3
 80073fe:	e7d3      	b.n	80073a8 <__cvt+0x6a>
 8007400:	1c59      	adds	r1, r3, #1
 8007402:	9103      	str	r1, [sp, #12]
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e7d9      	b.n	80073bc <__cvt+0x7e>

08007408 <__exponent>:
 8007408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800740a:	2900      	cmp	r1, #0
 800740c:	bfba      	itte	lt
 800740e:	4249      	neglt	r1, r1
 8007410:	232d      	movlt	r3, #45	@ 0x2d
 8007412:	232b      	movge	r3, #43	@ 0x2b
 8007414:	2909      	cmp	r1, #9
 8007416:	7002      	strb	r2, [r0, #0]
 8007418:	7043      	strb	r3, [r0, #1]
 800741a:	dd29      	ble.n	8007470 <__exponent+0x68>
 800741c:	f10d 0307 	add.w	r3, sp, #7
 8007420:	461d      	mov	r5, r3
 8007422:	270a      	movs	r7, #10
 8007424:	461a      	mov	r2, r3
 8007426:	fbb1 f6f7 	udiv	r6, r1, r7
 800742a:	fb07 1416 	mls	r4, r7, r6, r1
 800742e:	3430      	adds	r4, #48	@ 0x30
 8007430:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007434:	460c      	mov	r4, r1
 8007436:	2c63      	cmp	r4, #99	@ 0x63
 8007438:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800743c:	4631      	mov	r1, r6
 800743e:	dcf1      	bgt.n	8007424 <__exponent+0x1c>
 8007440:	3130      	adds	r1, #48	@ 0x30
 8007442:	1e94      	subs	r4, r2, #2
 8007444:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007448:	1c41      	adds	r1, r0, #1
 800744a:	4623      	mov	r3, r4
 800744c:	42ab      	cmp	r3, r5
 800744e:	d30a      	bcc.n	8007466 <__exponent+0x5e>
 8007450:	f10d 0309 	add.w	r3, sp, #9
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	42ac      	cmp	r4, r5
 8007458:	bf88      	it	hi
 800745a:	2300      	movhi	r3, #0
 800745c:	3302      	adds	r3, #2
 800745e:	4403      	add	r3, r0
 8007460:	1a18      	subs	r0, r3, r0
 8007462:	b003      	add	sp, #12
 8007464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007466:	f813 6b01 	ldrb.w	r6, [r3], #1
 800746a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800746e:	e7ed      	b.n	800744c <__exponent+0x44>
 8007470:	2330      	movs	r3, #48	@ 0x30
 8007472:	3130      	adds	r1, #48	@ 0x30
 8007474:	7083      	strb	r3, [r0, #2]
 8007476:	70c1      	strb	r1, [r0, #3]
 8007478:	1d03      	adds	r3, r0, #4
 800747a:	e7f1      	b.n	8007460 <__exponent+0x58>

0800747c <_printf_float>:
 800747c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007480:	b08d      	sub	sp, #52	@ 0x34
 8007482:	460c      	mov	r4, r1
 8007484:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007488:	4616      	mov	r6, r2
 800748a:	461f      	mov	r7, r3
 800748c:	4605      	mov	r5, r0
 800748e:	f000 fff3 	bl	8008478 <_localeconv_r>
 8007492:	6803      	ldr	r3, [r0, #0]
 8007494:	9304      	str	r3, [sp, #16]
 8007496:	4618      	mov	r0, r3
 8007498:	f7f8 feea 	bl	8000270 <strlen>
 800749c:	2300      	movs	r3, #0
 800749e:	930a      	str	r3, [sp, #40]	@ 0x28
 80074a0:	f8d8 3000 	ldr.w	r3, [r8]
 80074a4:	9005      	str	r0, [sp, #20]
 80074a6:	3307      	adds	r3, #7
 80074a8:	f023 0307 	bic.w	r3, r3, #7
 80074ac:	f103 0208 	add.w	r2, r3, #8
 80074b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80074b4:	f8d4 b000 	ldr.w	fp, [r4]
 80074b8:	f8c8 2000 	str.w	r2, [r8]
 80074bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80074c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80074c4:	9307      	str	r3, [sp, #28]
 80074c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80074ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80074ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074d2:	4b9c      	ldr	r3, [pc, #624]	@ (8007744 <_printf_float+0x2c8>)
 80074d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074d8:	f7f9 fb28 	bl	8000b2c <__aeabi_dcmpun>
 80074dc:	bb70      	cbnz	r0, 800753c <_printf_float+0xc0>
 80074de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074e2:	4b98      	ldr	r3, [pc, #608]	@ (8007744 <_printf_float+0x2c8>)
 80074e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074e8:	f7f9 fb02 	bl	8000af0 <__aeabi_dcmple>
 80074ec:	bb30      	cbnz	r0, 800753c <_printf_float+0xc0>
 80074ee:	2200      	movs	r2, #0
 80074f0:	2300      	movs	r3, #0
 80074f2:	4640      	mov	r0, r8
 80074f4:	4649      	mov	r1, r9
 80074f6:	f7f9 faf1 	bl	8000adc <__aeabi_dcmplt>
 80074fa:	b110      	cbz	r0, 8007502 <_printf_float+0x86>
 80074fc:	232d      	movs	r3, #45	@ 0x2d
 80074fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007502:	4a91      	ldr	r2, [pc, #580]	@ (8007748 <_printf_float+0x2cc>)
 8007504:	4b91      	ldr	r3, [pc, #580]	@ (800774c <_printf_float+0x2d0>)
 8007506:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800750a:	bf94      	ite	ls
 800750c:	4690      	movls	r8, r2
 800750e:	4698      	movhi	r8, r3
 8007510:	2303      	movs	r3, #3
 8007512:	6123      	str	r3, [r4, #16]
 8007514:	f02b 0304 	bic.w	r3, fp, #4
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	f04f 0900 	mov.w	r9, #0
 800751e:	9700      	str	r7, [sp, #0]
 8007520:	4633      	mov	r3, r6
 8007522:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007524:	4621      	mov	r1, r4
 8007526:	4628      	mov	r0, r5
 8007528:	f000 f9d2 	bl	80078d0 <_printf_common>
 800752c:	3001      	adds	r0, #1
 800752e:	f040 808d 	bne.w	800764c <_printf_float+0x1d0>
 8007532:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007536:	b00d      	add	sp, #52	@ 0x34
 8007538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800753c:	4642      	mov	r2, r8
 800753e:	464b      	mov	r3, r9
 8007540:	4640      	mov	r0, r8
 8007542:	4649      	mov	r1, r9
 8007544:	f7f9 faf2 	bl	8000b2c <__aeabi_dcmpun>
 8007548:	b140      	cbz	r0, 800755c <_printf_float+0xe0>
 800754a:	464b      	mov	r3, r9
 800754c:	2b00      	cmp	r3, #0
 800754e:	bfbc      	itt	lt
 8007550:	232d      	movlt	r3, #45	@ 0x2d
 8007552:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007556:	4a7e      	ldr	r2, [pc, #504]	@ (8007750 <_printf_float+0x2d4>)
 8007558:	4b7e      	ldr	r3, [pc, #504]	@ (8007754 <_printf_float+0x2d8>)
 800755a:	e7d4      	b.n	8007506 <_printf_float+0x8a>
 800755c:	6863      	ldr	r3, [r4, #4]
 800755e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007562:	9206      	str	r2, [sp, #24]
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	d13b      	bne.n	80075e0 <_printf_float+0x164>
 8007568:	2306      	movs	r3, #6
 800756a:	6063      	str	r3, [r4, #4]
 800756c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007570:	2300      	movs	r3, #0
 8007572:	6022      	str	r2, [r4, #0]
 8007574:	9303      	str	r3, [sp, #12]
 8007576:	ab0a      	add	r3, sp, #40	@ 0x28
 8007578:	e9cd a301 	strd	sl, r3, [sp, #4]
 800757c:	ab09      	add	r3, sp, #36	@ 0x24
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	6861      	ldr	r1, [r4, #4]
 8007582:	ec49 8b10 	vmov	d0, r8, r9
 8007586:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800758a:	4628      	mov	r0, r5
 800758c:	f7ff fed7 	bl	800733e <__cvt>
 8007590:	9b06      	ldr	r3, [sp, #24]
 8007592:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007594:	2b47      	cmp	r3, #71	@ 0x47
 8007596:	4680      	mov	r8, r0
 8007598:	d129      	bne.n	80075ee <_printf_float+0x172>
 800759a:	1cc8      	adds	r0, r1, #3
 800759c:	db02      	blt.n	80075a4 <_printf_float+0x128>
 800759e:	6863      	ldr	r3, [r4, #4]
 80075a0:	4299      	cmp	r1, r3
 80075a2:	dd41      	ble.n	8007628 <_printf_float+0x1ac>
 80075a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80075a8:	fa5f fa8a 	uxtb.w	sl, sl
 80075ac:	3901      	subs	r1, #1
 80075ae:	4652      	mov	r2, sl
 80075b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80075b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80075b6:	f7ff ff27 	bl	8007408 <__exponent>
 80075ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075bc:	1813      	adds	r3, r2, r0
 80075be:	2a01      	cmp	r2, #1
 80075c0:	4681      	mov	r9, r0
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	dc02      	bgt.n	80075cc <_printf_float+0x150>
 80075c6:	6822      	ldr	r2, [r4, #0]
 80075c8:	07d2      	lsls	r2, r2, #31
 80075ca:	d501      	bpl.n	80075d0 <_printf_float+0x154>
 80075cc:	3301      	adds	r3, #1
 80075ce:	6123      	str	r3, [r4, #16]
 80075d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d0a2      	beq.n	800751e <_printf_float+0xa2>
 80075d8:	232d      	movs	r3, #45	@ 0x2d
 80075da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075de:	e79e      	b.n	800751e <_printf_float+0xa2>
 80075e0:	9a06      	ldr	r2, [sp, #24]
 80075e2:	2a47      	cmp	r2, #71	@ 0x47
 80075e4:	d1c2      	bne.n	800756c <_printf_float+0xf0>
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1c0      	bne.n	800756c <_printf_float+0xf0>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e7bd      	b.n	800756a <_printf_float+0xee>
 80075ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80075f2:	d9db      	bls.n	80075ac <_printf_float+0x130>
 80075f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80075f8:	d118      	bne.n	800762c <_printf_float+0x1b0>
 80075fa:	2900      	cmp	r1, #0
 80075fc:	6863      	ldr	r3, [r4, #4]
 80075fe:	dd0b      	ble.n	8007618 <_printf_float+0x19c>
 8007600:	6121      	str	r1, [r4, #16]
 8007602:	b913      	cbnz	r3, 800760a <_printf_float+0x18e>
 8007604:	6822      	ldr	r2, [r4, #0]
 8007606:	07d0      	lsls	r0, r2, #31
 8007608:	d502      	bpl.n	8007610 <_printf_float+0x194>
 800760a:	3301      	adds	r3, #1
 800760c:	440b      	add	r3, r1
 800760e:	6123      	str	r3, [r4, #16]
 8007610:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007612:	f04f 0900 	mov.w	r9, #0
 8007616:	e7db      	b.n	80075d0 <_printf_float+0x154>
 8007618:	b913      	cbnz	r3, 8007620 <_printf_float+0x1a4>
 800761a:	6822      	ldr	r2, [r4, #0]
 800761c:	07d2      	lsls	r2, r2, #31
 800761e:	d501      	bpl.n	8007624 <_printf_float+0x1a8>
 8007620:	3302      	adds	r3, #2
 8007622:	e7f4      	b.n	800760e <_printf_float+0x192>
 8007624:	2301      	movs	r3, #1
 8007626:	e7f2      	b.n	800760e <_printf_float+0x192>
 8007628:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800762c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800762e:	4299      	cmp	r1, r3
 8007630:	db05      	blt.n	800763e <_printf_float+0x1c2>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	6121      	str	r1, [r4, #16]
 8007636:	07d8      	lsls	r0, r3, #31
 8007638:	d5ea      	bpl.n	8007610 <_printf_float+0x194>
 800763a:	1c4b      	adds	r3, r1, #1
 800763c:	e7e7      	b.n	800760e <_printf_float+0x192>
 800763e:	2900      	cmp	r1, #0
 8007640:	bfd4      	ite	le
 8007642:	f1c1 0202 	rsble	r2, r1, #2
 8007646:	2201      	movgt	r2, #1
 8007648:	4413      	add	r3, r2
 800764a:	e7e0      	b.n	800760e <_printf_float+0x192>
 800764c:	6823      	ldr	r3, [r4, #0]
 800764e:	055a      	lsls	r2, r3, #21
 8007650:	d407      	bmi.n	8007662 <_printf_float+0x1e6>
 8007652:	6923      	ldr	r3, [r4, #16]
 8007654:	4642      	mov	r2, r8
 8007656:	4631      	mov	r1, r6
 8007658:	4628      	mov	r0, r5
 800765a:	47b8      	blx	r7
 800765c:	3001      	adds	r0, #1
 800765e:	d12b      	bne.n	80076b8 <_printf_float+0x23c>
 8007660:	e767      	b.n	8007532 <_printf_float+0xb6>
 8007662:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007666:	f240 80dd 	bls.w	8007824 <_printf_float+0x3a8>
 800766a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800766e:	2200      	movs	r2, #0
 8007670:	2300      	movs	r3, #0
 8007672:	f7f9 fa29 	bl	8000ac8 <__aeabi_dcmpeq>
 8007676:	2800      	cmp	r0, #0
 8007678:	d033      	beq.n	80076e2 <_printf_float+0x266>
 800767a:	4a37      	ldr	r2, [pc, #220]	@ (8007758 <_printf_float+0x2dc>)
 800767c:	2301      	movs	r3, #1
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	f43f af54 	beq.w	8007532 <_printf_float+0xb6>
 800768a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800768e:	4543      	cmp	r3, r8
 8007690:	db02      	blt.n	8007698 <_printf_float+0x21c>
 8007692:	6823      	ldr	r3, [r4, #0]
 8007694:	07d8      	lsls	r0, r3, #31
 8007696:	d50f      	bpl.n	80076b8 <_printf_float+0x23c>
 8007698:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800769c:	4631      	mov	r1, r6
 800769e:	4628      	mov	r0, r5
 80076a0:	47b8      	blx	r7
 80076a2:	3001      	adds	r0, #1
 80076a4:	f43f af45 	beq.w	8007532 <_printf_float+0xb6>
 80076a8:	f04f 0900 	mov.w	r9, #0
 80076ac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80076b0:	f104 0a1a 	add.w	sl, r4, #26
 80076b4:	45c8      	cmp	r8, r9
 80076b6:	dc09      	bgt.n	80076cc <_printf_float+0x250>
 80076b8:	6823      	ldr	r3, [r4, #0]
 80076ba:	079b      	lsls	r3, r3, #30
 80076bc:	f100 8103 	bmi.w	80078c6 <_printf_float+0x44a>
 80076c0:	68e0      	ldr	r0, [r4, #12]
 80076c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076c4:	4298      	cmp	r0, r3
 80076c6:	bfb8      	it	lt
 80076c8:	4618      	movlt	r0, r3
 80076ca:	e734      	b.n	8007536 <_printf_float+0xba>
 80076cc:	2301      	movs	r3, #1
 80076ce:	4652      	mov	r2, sl
 80076d0:	4631      	mov	r1, r6
 80076d2:	4628      	mov	r0, r5
 80076d4:	47b8      	blx	r7
 80076d6:	3001      	adds	r0, #1
 80076d8:	f43f af2b 	beq.w	8007532 <_printf_float+0xb6>
 80076dc:	f109 0901 	add.w	r9, r9, #1
 80076e0:	e7e8      	b.n	80076b4 <_printf_float+0x238>
 80076e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	dc39      	bgt.n	800775c <_printf_float+0x2e0>
 80076e8:	4a1b      	ldr	r2, [pc, #108]	@ (8007758 <_printf_float+0x2dc>)
 80076ea:	2301      	movs	r3, #1
 80076ec:	4631      	mov	r1, r6
 80076ee:	4628      	mov	r0, r5
 80076f0:	47b8      	blx	r7
 80076f2:	3001      	adds	r0, #1
 80076f4:	f43f af1d 	beq.w	8007532 <_printf_float+0xb6>
 80076f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80076fc:	ea59 0303 	orrs.w	r3, r9, r3
 8007700:	d102      	bne.n	8007708 <_printf_float+0x28c>
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	07d9      	lsls	r1, r3, #31
 8007706:	d5d7      	bpl.n	80076b8 <_printf_float+0x23c>
 8007708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800770c:	4631      	mov	r1, r6
 800770e:	4628      	mov	r0, r5
 8007710:	47b8      	blx	r7
 8007712:	3001      	adds	r0, #1
 8007714:	f43f af0d 	beq.w	8007532 <_printf_float+0xb6>
 8007718:	f04f 0a00 	mov.w	sl, #0
 800771c:	f104 0b1a 	add.w	fp, r4, #26
 8007720:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007722:	425b      	negs	r3, r3
 8007724:	4553      	cmp	r3, sl
 8007726:	dc01      	bgt.n	800772c <_printf_float+0x2b0>
 8007728:	464b      	mov	r3, r9
 800772a:	e793      	b.n	8007654 <_printf_float+0x1d8>
 800772c:	2301      	movs	r3, #1
 800772e:	465a      	mov	r2, fp
 8007730:	4631      	mov	r1, r6
 8007732:	4628      	mov	r0, r5
 8007734:	47b8      	blx	r7
 8007736:	3001      	adds	r0, #1
 8007738:	f43f aefb 	beq.w	8007532 <_printf_float+0xb6>
 800773c:	f10a 0a01 	add.w	sl, sl, #1
 8007740:	e7ee      	b.n	8007720 <_printf_float+0x2a4>
 8007742:	bf00      	nop
 8007744:	7fefffff 	.word	0x7fefffff
 8007748:	0800bc3c 	.word	0x0800bc3c
 800774c:	0800bc40 	.word	0x0800bc40
 8007750:	0800bc44 	.word	0x0800bc44
 8007754:	0800bc48 	.word	0x0800bc48
 8007758:	0800bc4c 	.word	0x0800bc4c
 800775c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800775e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007762:	4553      	cmp	r3, sl
 8007764:	bfa8      	it	ge
 8007766:	4653      	movge	r3, sl
 8007768:	2b00      	cmp	r3, #0
 800776a:	4699      	mov	r9, r3
 800776c:	dc36      	bgt.n	80077dc <_printf_float+0x360>
 800776e:	f04f 0b00 	mov.w	fp, #0
 8007772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007776:	f104 021a 	add.w	r2, r4, #26
 800777a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800777c:	9306      	str	r3, [sp, #24]
 800777e:	eba3 0309 	sub.w	r3, r3, r9
 8007782:	455b      	cmp	r3, fp
 8007784:	dc31      	bgt.n	80077ea <_printf_float+0x36e>
 8007786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007788:	459a      	cmp	sl, r3
 800778a:	dc3a      	bgt.n	8007802 <_printf_float+0x386>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	07da      	lsls	r2, r3, #31
 8007790:	d437      	bmi.n	8007802 <_printf_float+0x386>
 8007792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007794:	ebaa 0903 	sub.w	r9, sl, r3
 8007798:	9b06      	ldr	r3, [sp, #24]
 800779a:	ebaa 0303 	sub.w	r3, sl, r3
 800779e:	4599      	cmp	r9, r3
 80077a0:	bfa8      	it	ge
 80077a2:	4699      	movge	r9, r3
 80077a4:	f1b9 0f00 	cmp.w	r9, #0
 80077a8:	dc33      	bgt.n	8007812 <_printf_float+0x396>
 80077aa:	f04f 0800 	mov.w	r8, #0
 80077ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077b2:	f104 0b1a 	add.w	fp, r4, #26
 80077b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b8:	ebaa 0303 	sub.w	r3, sl, r3
 80077bc:	eba3 0309 	sub.w	r3, r3, r9
 80077c0:	4543      	cmp	r3, r8
 80077c2:	f77f af79 	ble.w	80076b8 <_printf_float+0x23c>
 80077c6:	2301      	movs	r3, #1
 80077c8:	465a      	mov	r2, fp
 80077ca:	4631      	mov	r1, r6
 80077cc:	4628      	mov	r0, r5
 80077ce:	47b8      	blx	r7
 80077d0:	3001      	adds	r0, #1
 80077d2:	f43f aeae 	beq.w	8007532 <_printf_float+0xb6>
 80077d6:	f108 0801 	add.w	r8, r8, #1
 80077da:	e7ec      	b.n	80077b6 <_printf_float+0x33a>
 80077dc:	4642      	mov	r2, r8
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	d1c2      	bne.n	800776e <_printf_float+0x2f2>
 80077e8:	e6a3      	b.n	8007532 <_printf_float+0xb6>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4631      	mov	r1, r6
 80077ee:	4628      	mov	r0, r5
 80077f0:	9206      	str	r2, [sp, #24]
 80077f2:	47b8      	blx	r7
 80077f4:	3001      	adds	r0, #1
 80077f6:	f43f ae9c 	beq.w	8007532 <_printf_float+0xb6>
 80077fa:	9a06      	ldr	r2, [sp, #24]
 80077fc:	f10b 0b01 	add.w	fp, fp, #1
 8007800:	e7bb      	b.n	800777a <_printf_float+0x2fe>
 8007802:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007806:	4631      	mov	r1, r6
 8007808:	4628      	mov	r0, r5
 800780a:	47b8      	blx	r7
 800780c:	3001      	adds	r0, #1
 800780e:	d1c0      	bne.n	8007792 <_printf_float+0x316>
 8007810:	e68f      	b.n	8007532 <_printf_float+0xb6>
 8007812:	9a06      	ldr	r2, [sp, #24]
 8007814:	464b      	mov	r3, r9
 8007816:	4442      	add	r2, r8
 8007818:	4631      	mov	r1, r6
 800781a:	4628      	mov	r0, r5
 800781c:	47b8      	blx	r7
 800781e:	3001      	adds	r0, #1
 8007820:	d1c3      	bne.n	80077aa <_printf_float+0x32e>
 8007822:	e686      	b.n	8007532 <_printf_float+0xb6>
 8007824:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007828:	f1ba 0f01 	cmp.w	sl, #1
 800782c:	dc01      	bgt.n	8007832 <_printf_float+0x3b6>
 800782e:	07db      	lsls	r3, r3, #31
 8007830:	d536      	bpl.n	80078a0 <_printf_float+0x424>
 8007832:	2301      	movs	r3, #1
 8007834:	4642      	mov	r2, r8
 8007836:	4631      	mov	r1, r6
 8007838:	4628      	mov	r0, r5
 800783a:	47b8      	blx	r7
 800783c:	3001      	adds	r0, #1
 800783e:	f43f ae78 	beq.w	8007532 <_printf_float+0xb6>
 8007842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007846:	4631      	mov	r1, r6
 8007848:	4628      	mov	r0, r5
 800784a:	47b8      	blx	r7
 800784c:	3001      	adds	r0, #1
 800784e:	f43f ae70 	beq.w	8007532 <_printf_float+0xb6>
 8007852:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007856:	2200      	movs	r2, #0
 8007858:	2300      	movs	r3, #0
 800785a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800785e:	f7f9 f933 	bl	8000ac8 <__aeabi_dcmpeq>
 8007862:	b9c0      	cbnz	r0, 8007896 <_printf_float+0x41a>
 8007864:	4653      	mov	r3, sl
 8007866:	f108 0201 	add.w	r2, r8, #1
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	d10c      	bne.n	800788e <_printf_float+0x412>
 8007874:	e65d      	b.n	8007532 <_printf_float+0xb6>
 8007876:	2301      	movs	r3, #1
 8007878:	465a      	mov	r2, fp
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	f43f ae56 	beq.w	8007532 <_printf_float+0xb6>
 8007886:	f108 0801 	add.w	r8, r8, #1
 800788a:	45d0      	cmp	r8, sl
 800788c:	dbf3      	blt.n	8007876 <_printf_float+0x3fa>
 800788e:	464b      	mov	r3, r9
 8007890:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007894:	e6df      	b.n	8007656 <_printf_float+0x1da>
 8007896:	f04f 0800 	mov.w	r8, #0
 800789a:	f104 0b1a 	add.w	fp, r4, #26
 800789e:	e7f4      	b.n	800788a <_printf_float+0x40e>
 80078a0:	2301      	movs	r3, #1
 80078a2:	4642      	mov	r2, r8
 80078a4:	e7e1      	b.n	800786a <_printf_float+0x3ee>
 80078a6:	2301      	movs	r3, #1
 80078a8:	464a      	mov	r2, r9
 80078aa:	4631      	mov	r1, r6
 80078ac:	4628      	mov	r0, r5
 80078ae:	47b8      	blx	r7
 80078b0:	3001      	adds	r0, #1
 80078b2:	f43f ae3e 	beq.w	8007532 <_printf_float+0xb6>
 80078b6:	f108 0801 	add.w	r8, r8, #1
 80078ba:	68e3      	ldr	r3, [r4, #12]
 80078bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078be:	1a5b      	subs	r3, r3, r1
 80078c0:	4543      	cmp	r3, r8
 80078c2:	dcf0      	bgt.n	80078a6 <_printf_float+0x42a>
 80078c4:	e6fc      	b.n	80076c0 <_printf_float+0x244>
 80078c6:	f04f 0800 	mov.w	r8, #0
 80078ca:	f104 0919 	add.w	r9, r4, #25
 80078ce:	e7f4      	b.n	80078ba <_printf_float+0x43e>

080078d0 <_printf_common>:
 80078d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d4:	4616      	mov	r6, r2
 80078d6:	4698      	mov	r8, r3
 80078d8:	688a      	ldr	r2, [r1, #8]
 80078da:	690b      	ldr	r3, [r1, #16]
 80078dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078e0:	4293      	cmp	r3, r2
 80078e2:	bfb8      	it	lt
 80078e4:	4613      	movlt	r3, r2
 80078e6:	6033      	str	r3, [r6, #0]
 80078e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80078ec:	4607      	mov	r7, r0
 80078ee:	460c      	mov	r4, r1
 80078f0:	b10a      	cbz	r2, 80078f6 <_printf_common+0x26>
 80078f2:	3301      	adds	r3, #1
 80078f4:	6033      	str	r3, [r6, #0]
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	0699      	lsls	r1, r3, #26
 80078fa:	bf42      	ittt	mi
 80078fc:	6833      	ldrmi	r3, [r6, #0]
 80078fe:	3302      	addmi	r3, #2
 8007900:	6033      	strmi	r3, [r6, #0]
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	f015 0506 	ands.w	r5, r5, #6
 8007908:	d106      	bne.n	8007918 <_printf_common+0x48>
 800790a:	f104 0a19 	add.w	sl, r4, #25
 800790e:	68e3      	ldr	r3, [r4, #12]
 8007910:	6832      	ldr	r2, [r6, #0]
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	42ab      	cmp	r3, r5
 8007916:	dc26      	bgt.n	8007966 <_printf_common+0x96>
 8007918:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800791c:	6822      	ldr	r2, [r4, #0]
 800791e:	3b00      	subs	r3, #0
 8007920:	bf18      	it	ne
 8007922:	2301      	movne	r3, #1
 8007924:	0692      	lsls	r2, r2, #26
 8007926:	d42b      	bmi.n	8007980 <_printf_common+0xb0>
 8007928:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800792c:	4641      	mov	r1, r8
 800792e:	4638      	mov	r0, r7
 8007930:	47c8      	blx	r9
 8007932:	3001      	adds	r0, #1
 8007934:	d01e      	beq.n	8007974 <_printf_common+0xa4>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	6922      	ldr	r2, [r4, #16]
 800793a:	f003 0306 	and.w	r3, r3, #6
 800793e:	2b04      	cmp	r3, #4
 8007940:	bf02      	ittt	eq
 8007942:	68e5      	ldreq	r5, [r4, #12]
 8007944:	6833      	ldreq	r3, [r6, #0]
 8007946:	1aed      	subeq	r5, r5, r3
 8007948:	68a3      	ldr	r3, [r4, #8]
 800794a:	bf0c      	ite	eq
 800794c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007950:	2500      	movne	r5, #0
 8007952:	4293      	cmp	r3, r2
 8007954:	bfc4      	itt	gt
 8007956:	1a9b      	subgt	r3, r3, r2
 8007958:	18ed      	addgt	r5, r5, r3
 800795a:	2600      	movs	r6, #0
 800795c:	341a      	adds	r4, #26
 800795e:	42b5      	cmp	r5, r6
 8007960:	d11a      	bne.n	8007998 <_printf_common+0xc8>
 8007962:	2000      	movs	r0, #0
 8007964:	e008      	b.n	8007978 <_printf_common+0xa8>
 8007966:	2301      	movs	r3, #1
 8007968:	4652      	mov	r2, sl
 800796a:	4641      	mov	r1, r8
 800796c:	4638      	mov	r0, r7
 800796e:	47c8      	blx	r9
 8007970:	3001      	adds	r0, #1
 8007972:	d103      	bne.n	800797c <_printf_common+0xac>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797c:	3501      	adds	r5, #1
 800797e:	e7c6      	b.n	800790e <_printf_common+0x3e>
 8007980:	18e1      	adds	r1, r4, r3
 8007982:	1c5a      	adds	r2, r3, #1
 8007984:	2030      	movs	r0, #48	@ 0x30
 8007986:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800798a:	4422      	add	r2, r4
 800798c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007990:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007994:	3302      	adds	r3, #2
 8007996:	e7c7      	b.n	8007928 <_printf_common+0x58>
 8007998:	2301      	movs	r3, #1
 800799a:	4622      	mov	r2, r4
 800799c:	4641      	mov	r1, r8
 800799e:	4638      	mov	r0, r7
 80079a0:	47c8      	blx	r9
 80079a2:	3001      	adds	r0, #1
 80079a4:	d0e6      	beq.n	8007974 <_printf_common+0xa4>
 80079a6:	3601      	adds	r6, #1
 80079a8:	e7d9      	b.n	800795e <_printf_common+0x8e>
	...

080079ac <_printf_i>:
 80079ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	7e0f      	ldrb	r7, [r1, #24]
 80079b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079b4:	2f78      	cmp	r7, #120	@ 0x78
 80079b6:	4691      	mov	r9, r2
 80079b8:	4680      	mov	r8, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	469a      	mov	sl, r3
 80079be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079c2:	d807      	bhi.n	80079d4 <_printf_i+0x28>
 80079c4:	2f62      	cmp	r7, #98	@ 0x62
 80079c6:	d80a      	bhi.n	80079de <_printf_i+0x32>
 80079c8:	2f00      	cmp	r7, #0
 80079ca:	f000 80d2 	beq.w	8007b72 <_printf_i+0x1c6>
 80079ce:	2f58      	cmp	r7, #88	@ 0x58
 80079d0:	f000 80b9 	beq.w	8007b46 <_printf_i+0x19a>
 80079d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079dc:	e03a      	b.n	8007a54 <_printf_i+0xa8>
 80079de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079e2:	2b15      	cmp	r3, #21
 80079e4:	d8f6      	bhi.n	80079d4 <_printf_i+0x28>
 80079e6:	a101      	add	r1, pc, #4	@ (adr r1, 80079ec <_printf_i+0x40>)
 80079e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079ec:	08007a45 	.word	0x08007a45
 80079f0:	08007a59 	.word	0x08007a59
 80079f4:	080079d5 	.word	0x080079d5
 80079f8:	080079d5 	.word	0x080079d5
 80079fc:	080079d5 	.word	0x080079d5
 8007a00:	080079d5 	.word	0x080079d5
 8007a04:	08007a59 	.word	0x08007a59
 8007a08:	080079d5 	.word	0x080079d5
 8007a0c:	080079d5 	.word	0x080079d5
 8007a10:	080079d5 	.word	0x080079d5
 8007a14:	080079d5 	.word	0x080079d5
 8007a18:	08007b59 	.word	0x08007b59
 8007a1c:	08007a83 	.word	0x08007a83
 8007a20:	08007b13 	.word	0x08007b13
 8007a24:	080079d5 	.word	0x080079d5
 8007a28:	080079d5 	.word	0x080079d5
 8007a2c:	08007b7b 	.word	0x08007b7b
 8007a30:	080079d5 	.word	0x080079d5
 8007a34:	08007a83 	.word	0x08007a83
 8007a38:	080079d5 	.word	0x080079d5
 8007a3c:	080079d5 	.word	0x080079d5
 8007a40:	08007b1b 	.word	0x08007b1b
 8007a44:	6833      	ldr	r3, [r6, #0]
 8007a46:	1d1a      	adds	r2, r3, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6032      	str	r2, [r6, #0]
 8007a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a54:	2301      	movs	r3, #1
 8007a56:	e09d      	b.n	8007b94 <_printf_i+0x1e8>
 8007a58:	6833      	ldr	r3, [r6, #0]
 8007a5a:	6820      	ldr	r0, [r4, #0]
 8007a5c:	1d19      	adds	r1, r3, #4
 8007a5e:	6031      	str	r1, [r6, #0]
 8007a60:	0606      	lsls	r6, r0, #24
 8007a62:	d501      	bpl.n	8007a68 <_printf_i+0xbc>
 8007a64:	681d      	ldr	r5, [r3, #0]
 8007a66:	e003      	b.n	8007a70 <_printf_i+0xc4>
 8007a68:	0645      	lsls	r5, r0, #25
 8007a6a:	d5fb      	bpl.n	8007a64 <_printf_i+0xb8>
 8007a6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a70:	2d00      	cmp	r5, #0
 8007a72:	da03      	bge.n	8007a7c <_printf_i+0xd0>
 8007a74:	232d      	movs	r3, #45	@ 0x2d
 8007a76:	426d      	negs	r5, r5
 8007a78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a7c:	4859      	ldr	r0, [pc, #356]	@ (8007be4 <_printf_i+0x238>)
 8007a7e:	230a      	movs	r3, #10
 8007a80:	e011      	b.n	8007aa6 <_printf_i+0xfa>
 8007a82:	6821      	ldr	r1, [r4, #0]
 8007a84:	6833      	ldr	r3, [r6, #0]
 8007a86:	0608      	lsls	r0, r1, #24
 8007a88:	f853 5b04 	ldr.w	r5, [r3], #4
 8007a8c:	d402      	bmi.n	8007a94 <_printf_i+0xe8>
 8007a8e:	0649      	lsls	r1, r1, #25
 8007a90:	bf48      	it	mi
 8007a92:	b2ad      	uxthmi	r5, r5
 8007a94:	2f6f      	cmp	r7, #111	@ 0x6f
 8007a96:	4853      	ldr	r0, [pc, #332]	@ (8007be4 <_printf_i+0x238>)
 8007a98:	6033      	str	r3, [r6, #0]
 8007a9a:	bf14      	ite	ne
 8007a9c:	230a      	movne	r3, #10
 8007a9e:	2308      	moveq	r3, #8
 8007aa0:	2100      	movs	r1, #0
 8007aa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007aa6:	6866      	ldr	r6, [r4, #4]
 8007aa8:	60a6      	str	r6, [r4, #8]
 8007aaa:	2e00      	cmp	r6, #0
 8007aac:	bfa2      	ittt	ge
 8007aae:	6821      	ldrge	r1, [r4, #0]
 8007ab0:	f021 0104 	bicge.w	r1, r1, #4
 8007ab4:	6021      	strge	r1, [r4, #0]
 8007ab6:	b90d      	cbnz	r5, 8007abc <_printf_i+0x110>
 8007ab8:	2e00      	cmp	r6, #0
 8007aba:	d04b      	beq.n	8007b54 <_printf_i+0x1a8>
 8007abc:	4616      	mov	r6, r2
 8007abe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ac2:	fb03 5711 	mls	r7, r3, r1, r5
 8007ac6:	5dc7      	ldrb	r7, [r0, r7]
 8007ac8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007acc:	462f      	mov	r7, r5
 8007ace:	42bb      	cmp	r3, r7
 8007ad0:	460d      	mov	r5, r1
 8007ad2:	d9f4      	bls.n	8007abe <_printf_i+0x112>
 8007ad4:	2b08      	cmp	r3, #8
 8007ad6:	d10b      	bne.n	8007af0 <_printf_i+0x144>
 8007ad8:	6823      	ldr	r3, [r4, #0]
 8007ada:	07df      	lsls	r7, r3, #31
 8007adc:	d508      	bpl.n	8007af0 <_printf_i+0x144>
 8007ade:	6923      	ldr	r3, [r4, #16]
 8007ae0:	6861      	ldr	r1, [r4, #4]
 8007ae2:	4299      	cmp	r1, r3
 8007ae4:	bfde      	ittt	le
 8007ae6:	2330      	movle	r3, #48	@ 0x30
 8007ae8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007aec:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007af0:	1b92      	subs	r2, r2, r6
 8007af2:	6122      	str	r2, [r4, #16]
 8007af4:	f8cd a000 	str.w	sl, [sp]
 8007af8:	464b      	mov	r3, r9
 8007afa:	aa03      	add	r2, sp, #12
 8007afc:	4621      	mov	r1, r4
 8007afe:	4640      	mov	r0, r8
 8007b00:	f7ff fee6 	bl	80078d0 <_printf_common>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d14a      	bne.n	8007b9e <_printf_i+0x1f2>
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b0c:	b004      	add	sp, #16
 8007b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	f043 0320 	orr.w	r3, r3, #32
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	4833      	ldr	r0, [pc, #204]	@ (8007be8 <_printf_i+0x23c>)
 8007b1c:	2778      	movs	r7, #120	@ 0x78
 8007b1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	6831      	ldr	r1, [r6, #0]
 8007b26:	061f      	lsls	r7, r3, #24
 8007b28:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b2c:	d402      	bmi.n	8007b34 <_printf_i+0x188>
 8007b2e:	065f      	lsls	r7, r3, #25
 8007b30:	bf48      	it	mi
 8007b32:	b2ad      	uxthmi	r5, r5
 8007b34:	6031      	str	r1, [r6, #0]
 8007b36:	07d9      	lsls	r1, r3, #31
 8007b38:	bf44      	itt	mi
 8007b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007b3e:	6023      	strmi	r3, [r4, #0]
 8007b40:	b11d      	cbz	r5, 8007b4a <_printf_i+0x19e>
 8007b42:	2310      	movs	r3, #16
 8007b44:	e7ac      	b.n	8007aa0 <_printf_i+0xf4>
 8007b46:	4827      	ldr	r0, [pc, #156]	@ (8007be4 <_printf_i+0x238>)
 8007b48:	e7e9      	b.n	8007b1e <_printf_i+0x172>
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	f023 0320 	bic.w	r3, r3, #32
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	e7f6      	b.n	8007b42 <_printf_i+0x196>
 8007b54:	4616      	mov	r6, r2
 8007b56:	e7bd      	b.n	8007ad4 <_printf_i+0x128>
 8007b58:	6833      	ldr	r3, [r6, #0]
 8007b5a:	6825      	ldr	r5, [r4, #0]
 8007b5c:	6961      	ldr	r1, [r4, #20]
 8007b5e:	1d18      	adds	r0, r3, #4
 8007b60:	6030      	str	r0, [r6, #0]
 8007b62:	062e      	lsls	r6, r5, #24
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	d501      	bpl.n	8007b6c <_printf_i+0x1c0>
 8007b68:	6019      	str	r1, [r3, #0]
 8007b6a:	e002      	b.n	8007b72 <_printf_i+0x1c6>
 8007b6c:	0668      	lsls	r0, r5, #25
 8007b6e:	d5fb      	bpl.n	8007b68 <_printf_i+0x1bc>
 8007b70:	8019      	strh	r1, [r3, #0]
 8007b72:	2300      	movs	r3, #0
 8007b74:	6123      	str	r3, [r4, #16]
 8007b76:	4616      	mov	r6, r2
 8007b78:	e7bc      	b.n	8007af4 <_printf_i+0x148>
 8007b7a:	6833      	ldr	r3, [r6, #0]
 8007b7c:	1d1a      	adds	r2, r3, #4
 8007b7e:	6032      	str	r2, [r6, #0]
 8007b80:	681e      	ldr	r6, [r3, #0]
 8007b82:	6862      	ldr	r2, [r4, #4]
 8007b84:	2100      	movs	r1, #0
 8007b86:	4630      	mov	r0, r6
 8007b88:	f7f8 fb22 	bl	80001d0 <memchr>
 8007b8c:	b108      	cbz	r0, 8007b92 <_printf_i+0x1e6>
 8007b8e:	1b80      	subs	r0, r0, r6
 8007b90:	6060      	str	r0, [r4, #4]
 8007b92:	6863      	ldr	r3, [r4, #4]
 8007b94:	6123      	str	r3, [r4, #16]
 8007b96:	2300      	movs	r3, #0
 8007b98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b9c:	e7aa      	b.n	8007af4 <_printf_i+0x148>
 8007b9e:	6923      	ldr	r3, [r4, #16]
 8007ba0:	4632      	mov	r2, r6
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	47d0      	blx	sl
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d0ad      	beq.n	8007b08 <_printf_i+0x15c>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	079b      	lsls	r3, r3, #30
 8007bb0:	d413      	bmi.n	8007bda <_printf_i+0x22e>
 8007bb2:	68e0      	ldr	r0, [r4, #12]
 8007bb4:	9b03      	ldr	r3, [sp, #12]
 8007bb6:	4298      	cmp	r0, r3
 8007bb8:	bfb8      	it	lt
 8007bba:	4618      	movlt	r0, r3
 8007bbc:	e7a6      	b.n	8007b0c <_printf_i+0x160>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4632      	mov	r2, r6
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	47d0      	blx	sl
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d09d      	beq.n	8007b08 <_printf_i+0x15c>
 8007bcc:	3501      	adds	r5, #1
 8007bce:	68e3      	ldr	r3, [r4, #12]
 8007bd0:	9903      	ldr	r1, [sp, #12]
 8007bd2:	1a5b      	subs	r3, r3, r1
 8007bd4:	42ab      	cmp	r3, r5
 8007bd6:	dcf2      	bgt.n	8007bbe <_printf_i+0x212>
 8007bd8:	e7eb      	b.n	8007bb2 <_printf_i+0x206>
 8007bda:	2500      	movs	r5, #0
 8007bdc:	f104 0619 	add.w	r6, r4, #25
 8007be0:	e7f5      	b.n	8007bce <_printf_i+0x222>
 8007be2:	bf00      	nop
 8007be4:	0800bc4e 	.word	0x0800bc4e
 8007be8:	0800bc5f 	.word	0x0800bc5f

08007bec <_scanf_float>:
 8007bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf0:	b087      	sub	sp, #28
 8007bf2:	4617      	mov	r7, r2
 8007bf4:	9303      	str	r3, [sp, #12]
 8007bf6:	688b      	ldr	r3, [r1, #8]
 8007bf8:	1e5a      	subs	r2, r3, #1
 8007bfa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007bfe:	bf81      	itttt	hi
 8007c00:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007c04:	eb03 0b05 	addhi.w	fp, r3, r5
 8007c08:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007c0c:	608b      	strhi	r3, [r1, #8]
 8007c0e:	680b      	ldr	r3, [r1, #0]
 8007c10:	460a      	mov	r2, r1
 8007c12:	f04f 0500 	mov.w	r5, #0
 8007c16:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007c1a:	f842 3b1c 	str.w	r3, [r2], #28
 8007c1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c22:	4680      	mov	r8, r0
 8007c24:	460c      	mov	r4, r1
 8007c26:	bf98      	it	ls
 8007c28:	f04f 0b00 	movls.w	fp, #0
 8007c2c:	9201      	str	r2, [sp, #4]
 8007c2e:	4616      	mov	r6, r2
 8007c30:	46aa      	mov	sl, r5
 8007c32:	46a9      	mov	r9, r5
 8007c34:	9502      	str	r5, [sp, #8]
 8007c36:	68a2      	ldr	r2, [r4, #8]
 8007c38:	b152      	cbz	r2, 8007c50 <_scanf_float+0x64>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b4e      	cmp	r3, #78	@ 0x4e
 8007c40:	d864      	bhi.n	8007d0c <_scanf_float+0x120>
 8007c42:	2b40      	cmp	r3, #64	@ 0x40
 8007c44:	d83c      	bhi.n	8007cc0 <_scanf_float+0xd4>
 8007c46:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007c4a:	b2c8      	uxtb	r0, r1
 8007c4c:	280e      	cmp	r0, #14
 8007c4e:	d93a      	bls.n	8007cc6 <_scanf_float+0xda>
 8007c50:	f1b9 0f00 	cmp.w	r9, #0
 8007c54:	d003      	beq.n	8007c5e <_scanf_float+0x72>
 8007c56:	6823      	ldr	r3, [r4, #0]
 8007c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c5c:	6023      	str	r3, [r4, #0]
 8007c5e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007c62:	f1ba 0f01 	cmp.w	sl, #1
 8007c66:	f200 8117 	bhi.w	8007e98 <_scanf_float+0x2ac>
 8007c6a:	9b01      	ldr	r3, [sp, #4]
 8007c6c:	429e      	cmp	r6, r3
 8007c6e:	f200 8108 	bhi.w	8007e82 <_scanf_float+0x296>
 8007c72:	2001      	movs	r0, #1
 8007c74:	b007      	add	sp, #28
 8007c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007c7e:	2a0d      	cmp	r2, #13
 8007c80:	d8e6      	bhi.n	8007c50 <_scanf_float+0x64>
 8007c82:	a101      	add	r1, pc, #4	@ (adr r1, 8007c88 <_scanf_float+0x9c>)
 8007c84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007c88:	08007dcf 	.word	0x08007dcf
 8007c8c:	08007c51 	.word	0x08007c51
 8007c90:	08007c51 	.word	0x08007c51
 8007c94:	08007c51 	.word	0x08007c51
 8007c98:	08007e2f 	.word	0x08007e2f
 8007c9c:	08007e07 	.word	0x08007e07
 8007ca0:	08007c51 	.word	0x08007c51
 8007ca4:	08007c51 	.word	0x08007c51
 8007ca8:	08007ddd 	.word	0x08007ddd
 8007cac:	08007c51 	.word	0x08007c51
 8007cb0:	08007c51 	.word	0x08007c51
 8007cb4:	08007c51 	.word	0x08007c51
 8007cb8:	08007c51 	.word	0x08007c51
 8007cbc:	08007d95 	.word	0x08007d95
 8007cc0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007cc4:	e7db      	b.n	8007c7e <_scanf_float+0x92>
 8007cc6:	290e      	cmp	r1, #14
 8007cc8:	d8c2      	bhi.n	8007c50 <_scanf_float+0x64>
 8007cca:	a001      	add	r0, pc, #4	@ (adr r0, 8007cd0 <_scanf_float+0xe4>)
 8007ccc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007cd0:	08007d85 	.word	0x08007d85
 8007cd4:	08007c51 	.word	0x08007c51
 8007cd8:	08007d85 	.word	0x08007d85
 8007cdc:	08007e1b 	.word	0x08007e1b
 8007ce0:	08007c51 	.word	0x08007c51
 8007ce4:	08007d2d 	.word	0x08007d2d
 8007ce8:	08007d6b 	.word	0x08007d6b
 8007cec:	08007d6b 	.word	0x08007d6b
 8007cf0:	08007d6b 	.word	0x08007d6b
 8007cf4:	08007d6b 	.word	0x08007d6b
 8007cf8:	08007d6b 	.word	0x08007d6b
 8007cfc:	08007d6b 	.word	0x08007d6b
 8007d00:	08007d6b 	.word	0x08007d6b
 8007d04:	08007d6b 	.word	0x08007d6b
 8007d08:	08007d6b 	.word	0x08007d6b
 8007d0c:	2b6e      	cmp	r3, #110	@ 0x6e
 8007d0e:	d809      	bhi.n	8007d24 <_scanf_float+0x138>
 8007d10:	2b60      	cmp	r3, #96	@ 0x60
 8007d12:	d8b2      	bhi.n	8007c7a <_scanf_float+0x8e>
 8007d14:	2b54      	cmp	r3, #84	@ 0x54
 8007d16:	d07b      	beq.n	8007e10 <_scanf_float+0x224>
 8007d18:	2b59      	cmp	r3, #89	@ 0x59
 8007d1a:	d199      	bne.n	8007c50 <_scanf_float+0x64>
 8007d1c:	2d07      	cmp	r5, #7
 8007d1e:	d197      	bne.n	8007c50 <_scanf_float+0x64>
 8007d20:	2508      	movs	r5, #8
 8007d22:	e02c      	b.n	8007d7e <_scanf_float+0x192>
 8007d24:	2b74      	cmp	r3, #116	@ 0x74
 8007d26:	d073      	beq.n	8007e10 <_scanf_float+0x224>
 8007d28:	2b79      	cmp	r3, #121	@ 0x79
 8007d2a:	e7f6      	b.n	8007d1a <_scanf_float+0x12e>
 8007d2c:	6821      	ldr	r1, [r4, #0]
 8007d2e:	05c8      	lsls	r0, r1, #23
 8007d30:	d51b      	bpl.n	8007d6a <_scanf_float+0x17e>
 8007d32:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007d36:	6021      	str	r1, [r4, #0]
 8007d38:	f109 0901 	add.w	r9, r9, #1
 8007d3c:	f1bb 0f00 	cmp.w	fp, #0
 8007d40:	d003      	beq.n	8007d4a <_scanf_float+0x15e>
 8007d42:	3201      	adds	r2, #1
 8007d44:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007d48:	60a2      	str	r2, [r4, #8]
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	60a3      	str	r3, [r4, #8]
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	3301      	adds	r3, #1
 8007d54:	6123      	str	r3, [r4, #16]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3b01      	subs	r3, #1
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	607b      	str	r3, [r7, #4]
 8007d5e:	f340 8087 	ble.w	8007e70 <_scanf_float+0x284>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	3301      	adds	r3, #1
 8007d66:	603b      	str	r3, [r7, #0]
 8007d68:	e765      	b.n	8007c36 <_scanf_float+0x4a>
 8007d6a:	eb1a 0105 	adds.w	r1, sl, r5
 8007d6e:	f47f af6f 	bne.w	8007c50 <_scanf_float+0x64>
 8007d72:	6822      	ldr	r2, [r4, #0]
 8007d74:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007d78:	6022      	str	r2, [r4, #0]
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	468a      	mov	sl, r1
 8007d7e:	f806 3b01 	strb.w	r3, [r6], #1
 8007d82:	e7e2      	b.n	8007d4a <_scanf_float+0x15e>
 8007d84:	6822      	ldr	r2, [r4, #0]
 8007d86:	0610      	lsls	r0, r2, #24
 8007d88:	f57f af62 	bpl.w	8007c50 <_scanf_float+0x64>
 8007d8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007d90:	6022      	str	r2, [r4, #0]
 8007d92:	e7f4      	b.n	8007d7e <_scanf_float+0x192>
 8007d94:	f1ba 0f00 	cmp.w	sl, #0
 8007d98:	d10e      	bne.n	8007db8 <_scanf_float+0x1cc>
 8007d9a:	f1b9 0f00 	cmp.w	r9, #0
 8007d9e:	d10e      	bne.n	8007dbe <_scanf_float+0x1d2>
 8007da0:	6822      	ldr	r2, [r4, #0]
 8007da2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007da6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007daa:	d108      	bne.n	8007dbe <_scanf_float+0x1d2>
 8007dac:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007db0:	6022      	str	r2, [r4, #0]
 8007db2:	f04f 0a01 	mov.w	sl, #1
 8007db6:	e7e2      	b.n	8007d7e <_scanf_float+0x192>
 8007db8:	f1ba 0f02 	cmp.w	sl, #2
 8007dbc:	d055      	beq.n	8007e6a <_scanf_float+0x27e>
 8007dbe:	2d01      	cmp	r5, #1
 8007dc0:	d002      	beq.n	8007dc8 <_scanf_float+0x1dc>
 8007dc2:	2d04      	cmp	r5, #4
 8007dc4:	f47f af44 	bne.w	8007c50 <_scanf_float+0x64>
 8007dc8:	3501      	adds	r5, #1
 8007dca:	b2ed      	uxtb	r5, r5
 8007dcc:	e7d7      	b.n	8007d7e <_scanf_float+0x192>
 8007dce:	f1ba 0f01 	cmp.w	sl, #1
 8007dd2:	f47f af3d 	bne.w	8007c50 <_scanf_float+0x64>
 8007dd6:	f04f 0a02 	mov.w	sl, #2
 8007dda:	e7d0      	b.n	8007d7e <_scanf_float+0x192>
 8007ddc:	b97d      	cbnz	r5, 8007dfe <_scanf_float+0x212>
 8007dde:	f1b9 0f00 	cmp.w	r9, #0
 8007de2:	f47f af38 	bne.w	8007c56 <_scanf_float+0x6a>
 8007de6:	6822      	ldr	r2, [r4, #0]
 8007de8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007dec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007df0:	f040 8108 	bne.w	8008004 <_scanf_float+0x418>
 8007df4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007df8:	6022      	str	r2, [r4, #0]
 8007dfa:	2501      	movs	r5, #1
 8007dfc:	e7bf      	b.n	8007d7e <_scanf_float+0x192>
 8007dfe:	2d03      	cmp	r5, #3
 8007e00:	d0e2      	beq.n	8007dc8 <_scanf_float+0x1dc>
 8007e02:	2d05      	cmp	r5, #5
 8007e04:	e7de      	b.n	8007dc4 <_scanf_float+0x1d8>
 8007e06:	2d02      	cmp	r5, #2
 8007e08:	f47f af22 	bne.w	8007c50 <_scanf_float+0x64>
 8007e0c:	2503      	movs	r5, #3
 8007e0e:	e7b6      	b.n	8007d7e <_scanf_float+0x192>
 8007e10:	2d06      	cmp	r5, #6
 8007e12:	f47f af1d 	bne.w	8007c50 <_scanf_float+0x64>
 8007e16:	2507      	movs	r5, #7
 8007e18:	e7b1      	b.n	8007d7e <_scanf_float+0x192>
 8007e1a:	6822      	ldr	r2, [r4, #0]
 8007e1c:	0591      	lsls	r1, r2, #22
 8007e1e:	f57f af17 	bpl.w	8007c50 <_scanf_float+0x64>
 8007e22:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007e26:	6022      	str	r2, [r4, #0]
 8007e28:	f8cd 9008 	str.w	r9, [sp, #8]
 8007e2c:	e7a7      	b.n	8007d7e <_scanf_float+0x192>
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007e34:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007e38:	d006      	beq.n	8007e48 <_scanf_float+0x25c>
 8007e3a:	0550      	lsls	r0, r2, #21
 8007e3c:	f57f af08 	bpl.w	8007c50 <_scanf_float+0x64>
 8007e40:	f1b9 0f00 	cmp.w	r9, #0
 8007e44:	f000 80de 	beq.w	8008004 <_scanf_float+0x418>
 8007e48:	0591      	lsls	r1, r2, #22
 8007e4a:	bf58      	it	pl
 8007e4c:	9902      	ldrpl	r1, [sp, #8]
 8007e4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e52:	bf58      	it	pl
 8007e54:	eba9 0101 	subpl.w	r1, r9, r1
 8007e58:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007e5c:	bf58      	it	pl
 8007e5e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007e62:	6022      	str	r2, [r4, #0]
 8007e64:	f04f 0900 	mov.w	r9, #0
 8007e68:	e789      	b.n	8007d7e <_scanf_float+0x192>
 8007e6a:	f04f 0a03 	mov.w	sl, #3
 8007e6e:	e786      	b.n	8007d7e <_scanf_float+0x192>
 8007e70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007e74:	4639      	mov	r1, r7
 8007e76:	4640      	mov	r0, r8
 8007e78:	4798      	blx	r3
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	f43f aedb 	beq.w	8007c36 <_scanf_float+0x4a>
 8007e80:	e6e6      	b.n	8007c50 <_scanf_float+0x64>
 8007e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007e86:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e8a:	463a      	mov	r2, r7
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	4798      	blx	r3
 8007e90:	6923      	ldr	r3, [r4, #16]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	6123      	str	r3, [r4, #16]
 8007e96:	e6e8      	b.n	8007c6a <_scanf_float+0x7e>
 8007e98:	1e6b      	subs	r3, r5, #1
 8007e9a:	2b06      	cmp	r3, #6
 8007e9c:	d824      	bhi.n	8007ee8 <_scanf_float+0x2fc>
 8007e9e:	2d02      	cmp	r5, #2
 8007ea0:	d836      	bhi.n	8007f10 <_scanf_float+0x324>
 8007ea2:	9b01      	ldr	r3, [sp, #4]
 8007ea4:	429e      	cmp	r6, r3
 8007ea6:	f67f aee4 	bls.w	8007c72 <_scanf_float+0x86>
 8007eaa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007eae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007eb2:	463a      	mov	r2, r7
 8007eb4:	4640      	mov	r0, r8
 8007eb6:	4798      	blx	r3
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	6123      	str	r3, [r4, #16]
 8007ebe:	e7f0      	b.n	8007ea2 <_scanf_float+0x2b6>
 8007ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ec4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007ec8:	463a      	mov	r2, r7
 8007eca:	4640      	mov	r0, r8
 8007ecc:	4798      	blx	r3
 8007ece:	6923      	ldr	r3, [r4, #16]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	6123      	str	r3, [r4, #16]
 8007ed4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007ed8:	fa5f fa8a 	uxtb.w	sl, sl
 8007edc:	f1ba 0f02 	cmp.w	sl, #2
 8007ee0:	d1ee      	bne.n	8007ec0 <_scanf_float+0x2d4>
 8007ee2:	3d03      	subs	r5, #3
 8007ee4:	b2ed      	uxtb	r5, r5
 8007ee6:	1b76      	subs	r6, r6, r5
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	05da      	lsls	r2, r3, #23
 8007eec:	d530      	bpl.n	8007f50 <_scanf_float+0x364>
 8007eee:	055b      	lsls	r3, r3, #21
 8007ef0:	d511      	bpl.n	8007f16 <_scanf_float+0x32a>
 8007ef2:	9b01      	ldr	r3, [sp, #4]
 8007ef4:	429e      	cmp	r6, r3
 8007ef6:	f67f aebc 	bls.w	8007c72 <_scanf_float+0x86>
 8007efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007efe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f02:	463a      	mov	r2, r7
 8007f04:	4640      	mov	r0, r8
 8007f06:	4798      	blx	r3
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	e7f0      	b.n	8007ef2 <_scanf_float+0x306>
 8007f10:	46aa      	mov	sl, r5
 8007f12:	46b3      	mov	fp, r6
 8007f14:	e7de      	b.n	8007ed4 <_scanf_float+0x2e8>
 8007f16:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	2965      	cmp	r1, #101	@ 0x65
 8007f1e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007f22:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007f26:	6123      	str	r3, [r4, #16]
 8007f28:	d00c      	beq.n	8007f44 <_scanf_float+0x358>
 8007f2a:	2945      	cmp	r1, #69	@ 0x45
 8007f2c:	d00a      	beq.n	8007f44 <_scanf_float+0x358>
 8007f2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f32:	463a      	mov	r2, r7
 8007f34:	4640      	mov	r0, r8
 8007f36:	4798      	blx	r3
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007f3e:	3b01      	subs	r3, #1
 8007f40:	1eb5      	subs	r5, r6, #2
 8007f42:	6123      	str	r3, [r4, #16]
 8007f44:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f48:	463a      	mov	r2, r7
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4798      	blx	r3
 8007f4e:	462e      	mov	r6, r5
 8007f50:	6822      	ldr	r2, [r4, #0]
 8007f52:	f012 0210 	ands.w	r2, r2, #16
 8007f56:	d001      	beq.n	8007f5c <_scanf_float+0x370>
 8007f58:	2000      	movs	r0, #0
 8007f5a:	e68b      	b.n	8007c74 <_scanf_float+0x88>
 8007f5c:	7032      	strb	r2, [r6, #0]
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f68:	d11c      	bne.n	8007fa4 <_scanf_float+0x3b8>
 8007f6a:	9b02      	ldr	r3, [sp, #8]
 8007f6c:	454b      	cmp	r3, r9
 8007f6e:	eba3 0209 	sub.w	r2, r3, r9
 8007f72:	d123      	bne.n	8007fbc <_scanf_float+0x3d0>
 8007f74:	9901      	ldr	r1, [sp, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	4640      	mov	r0, r8
 8007f7a:	f002 fcfd 	bl	800a978 <_strtod_r>
 8007f7e:	9b03      	ldr	r3, [sp, #12]
 8007f80:	6821      	ldr	r1, [r4, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f011 0f02 	tst.w	r1, #2
 8007f88:	ec57 6b10 	vmov	r6, r7, d0
 8007f8c:	f103 0204 	add.w	r2, r3, #4
 8007f90:	d01f      	beq.n	8007fd2 <_scanf_float+0x3e6>
 8007f92:	9903      	ldr	r1, [sp, #12]
 8007f94:	600a      	str	r2, [r1, #0]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	e9c3 6700 	strd	r6, r7, [r3]
 8007f9c:	68e3      	ldr	r3, [r4, #12]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	60e3      	str	r3, [r4, #12]
 8007fa2:	e7d9      	b.n	8007f58 <_scanf_float+0x36c>
 8007fa4:	9b04      	ldr	r3, [sp, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0e4      	beq.n	8007f74 <_scanf_float+0x388>
 8007faa:	9905      	ldr	r1, [sp, #20]
 8007fac:	230a      	movs	r3, #10
 8007fae:	3101      	adds	r1, #1
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	f002 fd61 	bl	800aa78 <_strtol_r>
 8007fb6:	9b04      	ldr	r3, [sp, #16]
 8007fb8:	9e05      	ldr	r6, [sp, #20]
 8007fba:	1ac2      	subs	r2, r0, r3
 8007fbc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007fc0:	429e      	cmp	r6, r3
 8007fc2:	bf28      	it	cs
 8007fc4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007fc8:	4910      	ldr	r1, [pc, #64]	@ (800800c <_scanf_float+0x420>)
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f000 f954 	bl	8008278 <siprintf>
 8007fd0:	e7d0      	b.n	8007f74 <_scanf_float+0x388>
 8007fd2:	f011 0f04 	tst.w	r1, #4
 8007fd6:	9903      	ldr	r1, [sp, #12]
 8007fd8:	600a      	str	r2, [r1, #0]
 8007fda:	d1dc      	bne.n	8007f96 <_scanf_float+0x3aa>
 8007fdc:	681d      	ldr	r5, [r3, #0]
 8007fde:	4632      	mov	r2, r6
 8007fe0:	463b      	mov	r3, r7
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7f8 fda1 	bl	8000b2c <__aeabi_dcmpun>
 8007fea:	b128      	cbz	r0, 8007ff8 <_scanf_float+0x40c>
 8007fec:	4808      	ldr	r0, [pc, #32]	@ (8008010 <_scanf_float+0x424>)
 8007fee:	f000 fabb 	bl	8008568 <nanf>
 8007ff2:	ed85 0a00 	vstr	s0, [r5]
 8007ff6:	e7d1      	b.n	8007f9c <_scanf_float+0x3b0>
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f7f8 fdf4 	bl	8000be8 <__aeabi_d2f>
 8008000:	6028      	str	r0, [r5, #0]
 8008002:	e7cb      	b.n	8007f9c <_scanf_float+0x3b0>
 8008004:	f04f 0900 	mov.w	r9, #0
 8008008:	e629      	b.n	8007c5e <_scanf_float+0x72>
 800800a:	bf00      	nop
 800800c:	0800bc70 	.word	0x0800bc70
 8008010:	0800c005 	.word	0x0800c005

08008014 <std>:
 8008014:	2300      	movs	r3, #0
 8008016:	b510      	push	{r4, lr}
 8008018:	4604      	mov	r4, r0
 800801a:	e9c0 3300 	strd	r3, r3, [r0]
 800801e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008022:	6083      	str	r3, [r0, #8]
 8008024:	8181      	strh	r1, [r0, #12]
 8008026:	6643      	str	r3, [r0, #100]	@ 0x64
 8008028:	81c2      	strh	r2, [r0, #14]
 800802a:	6183      	str	r3, [r0, #24]
 800802c:	4619      	mov	r1, r3
 800802e:	2208      	movs	r2, #8
 8008030:	305c      	adds	r0, #92	@ 0x5c
 8008032:	f000 fa19 	bl	8008468 <memset>
 8008036:	4b0d      	ldr	r3, [pc, #52]	@ (800806c <std+0x58>)
 8008038:	6263      	str	r3, [r4, #36]	@ 0x24
 800803a:	4b0d      	ldr	r3, [pc, #52]	@ (8008070 <std+0x5c>)
 800803c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800803e:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <std+0x60>)
 8008040:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008042:	4b0d      	ldr	r3, [pc, #52]	@ (8008078 <std+0x64>)
 8008044:	6323      	str	r3, [r4, #48]	@ 0x30
 8008046:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <std+0x68>)
 8008048:	6224      	str	r4, [r4, #32]
 800804a:	429c      	cmp	r4, r3
 800804c:	d006      	beq.n	800805c <std+0x48>
 800804e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008052:	4294      	cmp	r4, r2
 8008054:	d002      	beq.n	800805c <std+0x48>
 8008056:	33d0      	adds	r3, #208	@ 0xd0
 8008058:	429c      	cmp	r4, r3
 800805a:	d105      	bne.n	8008068 <std+0x54>
 800805c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008064:	f000 ba7c 	b.w	8008560 <__retarget_lock_init_recursive>
 8008068:	bd10      	pop	{r4, pc}
 800806a:	bf00      	nop
 800806c:	080082b9 	.word	0x080082b9
 8008070:	080082db 	.word	0x080082db
 8008074:	08008313 	.word	0x08008313
 8008078:	08008337 	.word	0x08008337
 800807c:	20000508 	.word	0x20000508

08008080 <stdio_exit_handler>:
 8008080:	4a02      	ldr	r2, [pc, #8]	@ (800808c <stdio_exit_handler+0xc>)
 8008082:	4903      	ldr	r1, [pc, #12]	@ (8008090 <stdio_exit_handler+0x10>)
 8008084:	4803      	ldr	r0, [pc, #12]	@ (8008094 <stdio_exit_handler+0x14>)
 8008086:	f000 b869 	b.w	800815c <_fwalk_sglue>
 800808a:	bf00      	nop
 800808c:	2000000c 	.word	0x2000000c
 8008090:	0800b0b9 	.word	0x0800b0b9
 8008094:	2000001c 	.word	0x2000001c

08008098 <cleanup_stdio>:
 8008098:	6841      	ldr	r1, [r0, #4]
 800809a:	4b0c      	ldr	r3, [pc, #48]	@ (80080cc <cleanup_stdio+0x34>)
 800809c:	4299      	cmp	r1, r3
 800809e:	b510      	push	{r4, lr}
 80080a0:	4604      	mov	r4, r0
 80080a2:	d001      	beq.n	80080a8 <cleanup_stdio+0x10>
 80080a4:	f003 f808 	bl	800b0b8 <_fflush_r>
 80080a8:	68a1      	ldr	r1, [r4, #8]
 80080aa:	4b09      	ldr	r3, [pc, #36]	@ (80080d0 <cleanup_stdio+0x38>)
 80080ac:	4299      	cmp	r1, r3
 80080ae:	d002      	beq.n	80080b6 <cleanup_stdio+0x1e>
 80080b0:	4620      	mov	r0, r4
 80080b2:	f003 f801 	bl	800b0b8 <_fflush_r>
 80080b6:	68e1      	ldr	r1, [r4, #12]
 80080b8:	4b06      	ldr	r3, [pc, #24]	@ (80080d4 <cleanup_stdio+0x3c>)
 80080ba:	4299      	cmp	r1, r3
 80080bc:	d004      	beq.n	80080c8 <cleanup_stdio+0x30>
 80080be:	4620      	mov	r0, r4
 80080c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c4:	f002 bff8 	b.w	800b0b8 <_fflush_r>
 80080c8:	bd10      	pop	{r4, pc}
 80080ca:	bf00      	nop
 80080cc:	20000508 	.word	0x20000508
 80080d0:	20000570 	.word	0x20000570
 80080d4:	200005d8 	.word	0x200005d8

080080d8 <global_stdio_init.part.0>:
 80080d8:	b510      	push	{r4, lr}
 80080da:	4b0b      	ldr	r3, [pc, #44]	@ (8008108 <global_stdio_init.part.0+0x30>)
 80080dc:	4c0b      	ldr	r4, [pc, #44]	@ (800810c <global_stdio_init.part.0+0x34>)
 80080de:	4a0c      	ldr	r2, [pc, #48]	@ (8008110 <global_stdio_init.part.0+0x38>)
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	4620      	mov	r0, r4
 80080e4:	2200      	movs	r2, #0
 80080e6:	2104      	movs	r1, #4
 80080e8:	f7ff ff94 	bl	8008014 <std>
 80080ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080f0:	2201      	movs	r2, #1
 80080f2:	2109      	movs	r1, #9
 80080f4:	f7ff ff8e 	bl	8008014 <std>
 80080f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80080fc:	2202      	movs	r2, #2
 80080fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008102:	2112      	movs	r1, #18
 8008104:	f7ff bf86 	b.w	8008014 <std>
 8008108:	20000640 	.word	0x20000640
 800810c:	20000508 	.word	0x20000508
 8008110:	08008081 	.word	0x08008081

08008114 <__sfp_lock_acquire>:
 8008114:	4801      	ldr	r0, [pc, #4]	@ (800811c <__sfp_lock_acquire+0x8>)
 8008116:	f000 ba24 	b.w	8008562 <__retarget_lock_acquire_recursive>
 800811a:	bf00      	nop
 800811c:	20000649 	.word	0x20000649

08008120 <__sfp_lock_release>:
 8008120:	4801      	ldr	r0, [pc, #4]	@ (8008128 <__sfp_lock_release+0x8>)
 8008122:	f000 ba1f 	b.w	8008564 <__retarget_lock_release_recursive>
 8008126:	bf00      	nop
 8008128:	20000649 	.word	0x20000649

0800812c <__sinit>:
 800812c:	b510      	push	{r4, lr}
 800812e:	4604      	mov	r4, r0
 8008130:	f7ff fff0 	bl	8008114 <__sfp_lock_acquire>
 8008134:	6a23      	ldr	r3, [r4, #32]
 8008136:	b11b      	cbz	r3, 8008140 <__sinit+0x14>
 8008138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800813c:	f7ff bff0 	b.w	8008120 <__sfp_lock_release>
 8008140:	4b04      	ldr	r3, [pc, #16]	@ (8008154 <__sinit+0x28>)
 8008142:	6223      	str	r3, [r4, #32]
 8008144:	4b04      	ldr	r3, [pc, #16]	@ (8008158 <__sinit+0x2c>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1f5      	bne.n	8008138 <__sinit+0xc>
 800814c:	f7ff ffc4 	bl	80080d8 <global_stdio_init.part.0>
 8008150:	e7f2      	b.n	8008138 <__sinit+0xc>
 8008152:	bf00      	nop
 8008154:	08008099 	.word	0x08008099
 8008158:	20000640 	.word	0x20000640

0800815c <_fwalk_sglue>:
 800815c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008160:	4607      	mov	r7, r0
 8008162:	4688      	mov	r8, r1
 8008164:	4614      	mov	r4, r2
 8008166:	2600      	movs	r6, #0
 8008168:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800816c:	f1b9 0901 	subs.w	r9, r9, #1
 8008170:	d505      	bpl.n	800817e <_fwalk_sglue+0x22>
 8008172:	6824      	ldr	r4, [r4, #0]
 8008174:	2c00      	cmp	r4, #0
 8008176:	d1f7      	bne.n	8008168 <_fwalk_sglue+0xc>
 8008178:	4630      	mov	r0, r6
 800817a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d907      	bls.n	8008194 <_fwalk_sglue+0x38>
 8008184:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008188:	3301      	adds	r3, #1
 800818a:	d003      	beq.n	8008194 <_fwalk_sglue+0x38>
 800818c:	4629      	mov	r1, r5
 800818e:	4638      	mov	r0, r7
 8008190:	47c0      	blx	r8
 8008192:	4306      	orrs	r6, r0
 8008194:	3568      	adds	r5, #104	@ 0x68
 8008196:	e7e9      	b.n	800816c <_fwalk_sglue+0x10>

08008198 <iprintf>:
 8008198:	b40f      	push	{r0, r1, r2, r3}
 800819a:	b507      	push	{r0, r1, r2, lr}
 800819c:	4906      	ldr	r1, [pc, #24]	@ (80081b8 <iprintf+0x20>)
 800819e:	ab04      	add	r3, sp, #16
 80081a0:	6808      	ldr	r0, [r1, #0]
 80081a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80081a6:	6881      	ldr	r1, [r0, #8]
 80081a8:	9301      	str	r3, [sp, #4]
 80081aa:	f002 fde9 	bl	800ad80 <_vfiprintf_r>
 80081ae:	b003      	add	sp, #12
 80081b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80081b4:	b004      	add	sp, #16
 80081b6:	4770      	bx	lr
 80081b8:	20000018 	.word	0x20000018

080081bc <_puts_r>:
 80081bc:	6a03      	ldr	r3, [r0, #32]
 80081be:	b570      	push	{r4, r5, r6, lr}
 80081c0:	6884      	ldr	r4, [r0, #8]
 80081c2:	4605      	mov	r5, r0
 80081c4:	460e      	mov	r6, r1
 80081c6:	b90b      	cbnz	r3, 80081cc <_puts_r+0x10>
 80081c8:	f7ff ffb0 	bl	800812c <__sinit>
 80081cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081ce:	07db      	lsls	r3, r3, #31
 80081d0:	d405      	bmi.n	80081de <_puts_r+0x22>
 80081d2:	89a3      	ldrh	r3, [r4, #12]
 80081d4:	0598      	lsls	r0, r3, #22
 80081d6:	d402      	bmi.n	80081de <_puts_r+0x22>
 80081d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081da:	f000 f9c2 	bl	8008562 <__retarget_lock_acquire_recursive>
 80081de:	89a3      	ldrh	r3, [r4, #12]
 80081e0:	0719      	lsls	r1, r3, #28
 80081e2:	d502      	bpl.n	80081ea <_puts_r+0x2e>
 80081e4:	6923      	ldr	r3, [r4, #16]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d135      	bne.n	8008256 <_puts_r+0x9a>
 80081ea:	4621      	mov	r1, r4
 80081ec:	4628      	mov	r0, r5
 80081ee:	f000 f8e5 	bl	80083bc <__swsetup_r>
 80081f2:	b380      	cbz	r0, 8008256 <_puts_r+0x9a>
 80081f4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80081f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081fa:	07da      	lsls	r2, r3, #31
 80081fc:	d405      	bmi.n	800820a <_puts_r+0x4e>
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	059b      	lsls	r3, r3, #22
 8008202:	d402      	bmi.n	800820a <_puts_r+0x4e>
 8008204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008206:	f000 f9ad 	bl	8008564 <__retarget_lock_release_recursive>
 800820a:	4628      	mov	r0, r5
 800820c:	bd70      	pop	{r4, r5, r6, pc}
 800820e:	2b00      	cmp	r3, #0
 8008210:	da04      	bge.n	800821c <_puts_r+0x60>
 8008212:	69a2      	ldr	r2, [r4, #24]
 8008214:	429a      	cmp	r2, r3
 8008216:	dc17      	bgt.n	8008248 <_puts_r+0x8c>
 8008218:	290a      	cmp	r1, #10
 800821a:	d015      	beq.n	8008248 <_puts_r+0x8c>
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	6022      	str	r2, [r4, #0]
 8008222:	7019      	strb	r1, [r3, #0]
 8008224:	68a3      	ldr	r3, [r4, #8]
 8008226:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800822a:	3b01      	subs	r3, #1
 800822c:	60a3      	str	r3, [r4, #8]
 800822e:	2900      	cmp	r1, #0
 8008230:	d1ed      	bne.n	800820e <_puts_r+0x52>
 8008232:	2b00      	cmp	r3, #0
 8008234:	da11      	bge.n	800825a <_puts_r+0x9e>
 8008236:	4622      	mov	r2, r4
 8008238:	210a      	movs	r1, #10
 800823a:	4628      	mov	r0, r5
 800823c:	f000 f87f 	bl	800833e <__swbuf_r>
 8008240:	3001      	adds	r0, #1
 8008242:	d0d7      	beq.n	80081f4 <_puts_r+0x38>
 8008244:	250a      	movs	r5, #10
 8008246:	e7d7      	b.n	80081f8 <_puts_r+0x3c>
 8008248:	4622      	mov	r2, r4
 800824a:	4628      	mov	r0, r5
 800824c:	f000 f877 	bl	800833e <__swbuf_r>
 8008250:	3001      	adds	r0, #1
 8008252:	d1e7      	bne.n	8008224 <_puts_r+0x68>
 8008254:	e7ce      	b.n	80081f4 <_puts_r+0x38>
 8008256:	3e01      	subs	r6, #1
 8008258:	e7e4      	b.n	8008224 <_puts_r+0x68>
 800825a:	6823      	ldr	r3, [r4, #0]
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	6022      	str	r2, [r4, #0]
 8008260:	220a      	movs	r2, #10
 8008262:	701a      	strb	r2, [r3, #0]
 8008264:	e7ee      	b.n	8008244 <_puts_r+0x88>
	...

08008268 <puts>:
 8008268:	4b02      	ldr	r3, [pc, #8]	@ (8008274 <puts+0xc>)
 800826a:	4601      	mov	r1, r0
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	f7ff bfa5 	b.w	80081bc <_puts_r>
 8008272:	bf00      	nop
 8008274:	20000018 	.word	0x20000018

08008278 <siprintf>:
 8008278:	b40e      	push	{r1, r2, r3}
 800827a:	b500      	push	{lr}
 800827c:	b09c      	sub	sp, #112	@ 0x70
 800827e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008280:	9002      	str	r0, [sp, #8]
 8008282:	9006      	str	r0, [sp, #24]
 8008284:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008288:	4809      	ldr	r0, [pc, #36]	@ (80082b0 <siprintf+0x38>)
 800828a:	9107      	str	r1, [sp, #28]
 800828c:	9104      	str	r1, [sp, #16]
 800828e:	4909      	ldr	r1, [pc, #36]	@ (80082b4 <siprintf+0x3c>)
 8008290:	f853 2b04 	ldr.w	r2, [r3], #4
 8008294:	9105      	str	r1, [sp, #20]
 8008296:	6800      	ldr	r0, [r0, #0]
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	a902      	add	r1, sp, #8
 800829c:	f002 fc4a 	bl	800ab34 <_svfiprintf_r>
 80082a0:	9b02      	ldr	r3, [sp, #8]
 80082a2:	2200      	movs	r2, #0
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	b01c      	add	sp, #112	@ 0x70
 80082a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80082ac:	b003      	add	sp, #12
 80082ae:	4770      	bx	lr
 80082b0:	20000018 	.word	0x20000018
 80082b4:	ffff0208 	.word	0xffff0208

080082b8 <__sread>:
 80082b8:	b510      	push	{r4, lr}
 80082ba:	460c      	mov	r4, r1
 80082bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c0:	f000 f900 	bl	80084c4 <_read_r>
 80082c4:	2800      	cmp	r0, #0
 80082c6:	bfab      	itete	ge
 80082c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80082ca:	89a3      	ldrhlt	r3, [r4, #12]
 80082cc:	181b      	addge	r3, r3, r0
 80082ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80082d2:	bfac      	ite	ge
 80082d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80082d6:	81a3      	strhlt	r3, [r4, #12]
 80082d8:	bd10      	pop	{r4, pc}

080082da <__swrite>:
 80082da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082de:	461f      	mov	r7, r3
 80082e0:	898b      	ldrh	r3, [r1, #12]
 80082e2:	05db      	lsls	r3, r3, #23
 80082e4:	4605      	mov	r5, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	4616      	mov	r6, r2
 80082ea:	d505      	bpl.n	80082f8 <__swrite+0x1e>
 80082ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f0:	2302      	movs	r3, #2
 80082f2:	2200      	movs	r2, #0
 80082f4:	f000 f8d4 	bl	80084a0 <_lseek_r>
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	4632      	mov	r2, r6
 8008306:	463b      	mov	r3, r7
 8008308:	4628      	mov	r0, r5
 800830a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800830e:	f000 b8eb 	b.w	80084e8 <_write_r>

08008312 <__sseek>:
 8008312:	b510      	push	{r4, lr}
 8008314:	460c      	mov	r4, r1
 8008316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800831a:	f000 f8c1 	bl	80084a0 <_lseek_r>
 800831e:	1c43      	adds	r3, r0, #1
 8008320:	89a3      	ldrh	r3, [r4, #12]
 8008322:	bf15      	itete	ne
 8008324:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008326:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800832a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800832e:	81a3      	strheq	r3, [r4, #12]
 8008330:	bf18      	it	ne
 8008332:	81a3      	strhne	r3, [r4, #12]
 8008334:	bd10      	pop	{r4, pc}

08008336 <__sclose>:
 8008336:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833a:	f000 b8a1 	b.w	8008480 <_close_r>

0800833e <__swbuf_r>:
 800833e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008340:	460e      	mov	r6, r1
 8008342:	4614      	mov	r4, r2
 8008344:	4605      	mov	r5, r0
 8008346:	b118      	cbz	r0, 8008350 <__swbuf_r+0x12>
 8008348:	6a03      	ldr	r3, [r0, #32]
 800834a:	b90b      	cbnz	r3, 8008350 <__swbuf_r+0x12>
 800834c:	f7ff feee 	bl	800812c <__sinit>
 8008350:	69a3      	ldr	r3, [r4, #24]
 8008352:	60a3      	str	r3, [r4, #8]
 8008354:	89a3      	ldrh	r3, [r4, #12]
 8008356:	071a      	lsls	r2, r3, #28
 8008358:	d501      	bpl.n	800835e <__swbuf_r+0x20>
 800835a:	6923      	ldr	r3, [r4, #16]
 800835c:	b943      	cbnz	r3, 8008370 <__swbuf_r+0x32>
 800835e:	4621      	mov	r1, r4
 8008360:	4628      	mov	r0, r5
 8008362:	f000 f82b 	bl	80083bc <__swsetup_r>
 8008366:	b118      	cbz	r0, 8008370 <__swbuf_r+0x32>
 8008368:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800836c:	4638      	mov	r0, r7
 800836e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	6922      	ldr	r2, [r4, #16]
 8008374:	1a98      	subs	r0, r3, r2
 8008376:	6963      	ldr	r3, [r4, #20]
 8008378:	b2f6      	uxtb	r6, r6
 800837a:	4283      	cmp	r3, r0
 800837c:	4637      	mov	r7, r6
 800837e:	dc05      	bgt.n	800838c <__swbuf_r+0x4e>
 8008380:	4621      	mov	r1, r4
 8008382:	4628      	mov	r0, r5
 8008384:	f002 fe98 	bl	800b0b8 <_fflush_r>
 8008388:	2800      	cmp	r0, #0
 800838a:	d1ed      	bne.n	8008368 <__swbuf_r+0x2a>
 800838c:	68a3      	ldr	r3, [r4, #8]
 800838e:	3b01      	subs	r3, #1
 8008390:	60a3      	str	r3, [r4, #8]
 8008392:	6823      	ldr	r3, [r4, #0]
 8008394:	1c5a      	adds	r2, r3, #1
 8008396:	6022      	str	r2, [r4, #0]
 8008398:	701e      	strb	r6, [r3, #0]
 800839a:	6962      	ldr	r2, [r4, #20]
 800839c:	1c43      	adds	r3, r0, #1
 800839e:	429a      	cmp	r2, r3
 80083a0:	d004      	beq.n	80083ac <__swbuf_r+0x6e>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	07db      	lsls	r3, r3, #31
 80083a6:	d5e1      	bpl.n	800836c <__swbuf_r+0x2e>
 80083a8:	2e0a      	cmp	r6, #10
 80083aa:	d1df      	bne.n	800836c <__swbuf_r+0x2e>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4628      	mov	r0, r5
 80083b0:	f002 fe82 	bl	800b0b8 <_fflush_r>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d0d9      	beq.n	800836c <__swbuf_r+0x2e>
 80083b8:	e7d6      	b.n	8008368 <__swbuf_r+0x2a>
	...

080083bc <__swsetup_r>:
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	4b29      	ldr	r3, [pc, #164]	@ (8008464 <__swsetup_r+0xa8>)
 80083c0:	4605      	mov	r5, r0
 80083c2:	6818      	ldr	r0, [r3, #0]
 80083c4:	460c      	mov	r4, r1
 80083c6:	b118      	cbz	r0, 80083d0 <__swsetup_r+0x14>
 80083c8:	6a03      	ldr	r3, [r0, #32]
 80083ca:	b90b      	cbnz	r3, 80083d0 <__swsetup_r+0x14>
 80083cc:	f7ff feae 	bl	800812c <__sinit>
 80083d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083d4:	0719      	lsls	r1, r3, #28
 80083d6:	d422      	bmi.n	800841e <__swsetup_r+0x62>
 80083d8:	06da      	lsls	r2, r3, #27
 80083da:	d407      	bmi.n	80083ec <__swsetup_r+0x30>
 80083dc:	2209      	movs	r2, #9
 80083de:	602a      	str	r2, [r5, #0]
 80083e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083e4:	81a3      	strh	r3, [r4, #12]
 80083e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083ea:	e033      	b.n	8008454 <__swsetup_r+0x98>
 80083ec:	0758      	lsls	r0, r3, #29
 80083ee:	d512      	bpl.n	8008416 <__swsetup_r+0x5a>
 80083f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083f2:	b141      	cbz	r1, 8008406 <__swsetup_r+0x4a>
 80083f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083f8:	4299      	cmp	r1, r3
 80083fa:	d002      	beq.n	8008402 <__swsetup_r+0x46>
 80083fc:	4628      	mov	r0, r5
 80083fe:	f000 ff07 	bl	8009210 <_free_r>
 8008402:	2300      	movs	r3, #0
 8008404:	6363      	str	r3, [r4, #52]	@ 0x34
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800840c:	81a3      	strh	r3, [r4, #12]
 800840e:	2300      	movs	r3, #0
 8008410:	6063      	str	r3, [r4, #4]
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	89a3      	ldrh	r3, [r4, #12]
 8008418:	f043 0308 	orr.w	r3, r3, #8
 800841c:	81a3      	strh	r3, [r4, #12]
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	b94b      	cbnz	r3, 8008436 <__swsetup_r+0x7a>
 8008422:	89a3      	ldrh	r3, [r4, #12]
 8008424:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800842c:	d003      	beq.n	8008436 <__swsetup_r+0x7a>
 800842e:	4621      	mov	r1, r4
 8008430:	4628      	mov	r0, r5
 8008432:	f002 fe8f 	bl	800b154 <__smakebuf_r>
 8008436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800843a:	f013 0201 	ands.w	r2, r3, #1
 800843e:	d00a      	beq.n	8008456 <__swsetup_r+0x9a>
 8008440:	2200      	movs	r2, #0
 8008442:	60a2      	str	r2, [r4, #8]
 8008444:	6962      	ldr	r2, [r4, #20]
 8008446:	4252      	negs	r2, r2
 8008448:	61a2      	str	r2, [r4, #24]
 800844a:	6922      	ldr	r2, [r4, #16]
 800844c:	b942      	cbnz	r2, 8008460 <__swsetup_r+0xa4>
 800844e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008452:	d1c5      	bne.n	80083e0 <__swsetup_r+0x24>
 8008454:	bd38      	pop	{r3, r4, r5, pc}
 8008456:	0799      	lsls	r1, r3, #30
 8008458:	bf58      	it	pl
 800845a:	6962      	ldrpl	r2, [r4, #20]
 800845c:	60a2      	str	r2, [r4, #8]
 800845e:	e7f4      	b.n	800844a <__swsetup_r+0x8e>
 8008460:	2000      	movs	r0, #0
 8008462:	e7f7      	b.n	8008454 <__swsetup_r+0x98>
 8008464:	20000018 	.word	0x20000018

08008468 <memset>:
 8008468:	4402      	add	r2, r0
 800846a:	4603      	mov	r3, r0
 800846c:	4293      	cmp	r3, r2
 800846e:	d100      	bne.n	8008472 <memset+0xa>
 8008470:	4770      	bx	lr
 8008472:	f803 1b01 	strb.w	r1, [r3], #1
 8008476:	e7f9      	b.n	800846c <memset+0x4>

08008478 <_localeconv_r>:
 8008478:	4800      	ldr	r0, [pc, #0]	@ (800847c <_localeconv_r+0x4>)
 800847a:	4770      	bx	lr
 800847c:	20000158 	.word	0x20000158

08008480 <_close_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d06      	ldr	r5, [pc, #24]	@ (800849c <_close_r+0x1c>)
 8008484:	2300      	movs	r3, #0
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	f7f9 fce6 	bl	8001e5c <_close>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_close_r+0x1a>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_close_r+0x1a>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20000644 	.word	0x20000644

080084a0 <_lseek_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d07      	ldr	r5, [pc, #28]	@ (80084c0 <_lseek_r+0x20>)
 80084a4:	4604      	mov	r4, r0
 80084a6:	4608      	mov	r0, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	2200      	movs	r2, #0
 80084ac:	602a      	str	r2, [r5, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f7f9 fcfb 	bl	8001eaa <_lseek>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_lseek_r+0x1e>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_lseek_r+0x1e>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	20000644 	.word	0x20000644

080084c4 <_read_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4d07      	ldr	r5, [pc, #28]	@ (80084e4 <_read_r+0x20>)
 80084c8:	4604      	mov	r4, r0
 80084ca:	4608      	mov	r0, r1
 80084cc:	4611      	mov	r1, r2
 80084ce:	2200      	movs	r2, #0
 80084d0:	602a      	str	r2, [r5, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	f7f9 fca5 	bl	8001e22 <_read>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d102      	bne.n	80084e2 <_read_r+0x1e>
 80084dc:	682b      	ldr	r3, [r5, #0]
 80084de:	b103      	cbz	r3, 80084e2 <_read_r+0x1e>
 80084e0:	6023      	str	r3, [r4, #0]
 80084e2:	bd38      	pop	{r3, r4, r5, pc}
 80084e4:	20000644 	.word	0x20000644

080084e8 <_write_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4d07      	ldr	r5, [pc, #28]	@ (8008508 <_write_r+0x20>)
 80084ec:	4604      	mov	r4, r0
 80084ee:	4608      	mov	r0, r1
 80084f0:	4611      	mov	r1, r2
 80084f2:	2200      	movs	r2, #0
 80084f4:	602a      	str	r2, [r5, #0]
 80084f6:	461a      	mov	r2, r3
 80084f8:	f7f8 fd74 	bl	8000fe4 <_write>
 80084fc:	1c43      	adds	r3, r0, #1
 80084fe:	d102      	bne.n	8008506 <_write_r+0x1e>
 8008500:	682b      	ldr	r3, [r5, #0]
 8008502:	b103      	cbz	r3, 8008506 <_write_r+0x1e>
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	bd38      	pop	{r3, r4, r5, pc}
 8008508:	20000644 	.word	0x20000644

0800850c <__errno>:
 800850c:	4b01      	ldr	r3, [pc, #4]	@ (8008514 <__errno+0x8>)
 800850e:	6818      	ldr	r0, [r3, #0]
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	20000018 	.word	0x20000018

08008518 <__libc_init_array>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	4d0d      	ldr	r5, [pc, #52]	@ (8008550 <__libc_init_array+0x38>)
 800851c:	4c0d      	ldr	r4, [pc, #52]	@ (8008554 <__libc_init_array+0x3c>)
 800851e:	1b64      	subs	r4, r4, r5
 8008520:	10a4      	asrs	r4, r4, #2
 8008522:	2600      	movs	r6, #0
 8008524:	42a6      	cmp	r6, r4
 8008526:	d109      	bne.n	800853c <__libc_init_array+0x24>
 8008528:	4d0b      	ldr	r5, [pc, #44]	@ (8008558 <__libc_init_array+0x40>)
 800852a:	4c0c      	ldr	r4, [pc, #48]	@ (800855c <__libc_init_array+0x44>)
 800852c:	f003 fae2 	bl	800baf4 <_init>
 8008530:	1b64      	subs	r4, r4, r5
 8008532:	10a4      	asrs	r4, r4, #2
 8008534:	2600      	movs	r6, #0
 8008536:	42a6      	cmp	r6, r4
 8008538:	d105      	bne.n	8008546 <__libc_init_array+0x2e>
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008540:	4798      	blx	r3
 8008542:	3601      	adds	r6, #1
 8008544:	e7ee      	b.n	8008524 <__libc_init_array+0xc>
 8008546:	f855 3b04 	ldr.w	r3, [r5], #4
 800854a:	4798      	blx	r3
 800854c:	3601      	adds	r6, #1
 800854e:	e7f2      	b.n	8008536 <__libc_init_array+0x1e>
 8008550:	0800c070 	.word	0x0800c070
 8008554:	0800c070 	.word	0x0800c070
 8008558:	0800c070 	.word	0x0800c070
 800855c:	0800c074 	.word	0x0800c074

08008560 <__retarget_lock_init_recursive>:
 8008560:	4770      	bx	lr

08008562 <__retarget_lock_acquire_recursive>:
 8008562:	4770      	bx	lr

08008564 <__retarget_lock_release_recursive>:
 8008564:	4770      	bx	lr
	...

08008568 <nanf>:
 8008568:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008570 <nanf+0x8>
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	7fc00000 	.word	0x7fc00000

08008574 <quorem>:
 8008574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	6903      	ldr	r3, [r0, #16]
 800857a:	690c      	ldr	r4, [r1, #16]
 800857c:	42a3      	cmp	r3, r4
 800857e:	4607      	mov	r7, r0
 8008580:	db7e      	blt.n	8008680 <quorem+0x10c>
 8008582:	3c01      	subs	r4, #1
 8008584:	f101 0814 	add.w	r8, r1, #20
 8008588:	00a3      	lsls	r3, r4, #2
 800858a:	f100 0514 	add.w	r5, r0, #20
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800859a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800859e:	3301      	adds	r3, #1
 80085a0:	429a      	cmp	r2, r3
 80085a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80085a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80085aa:	d32e      	bcc.n	800860a <quorem+0x96>
 80085ac:	f04f 0a00 	mov.w	sl, #0
 80085b0:	46c4      	mov	ip, r8
 80085b2:	46ae      	mov	lr, r5
 80085b4:	46d3      	mov	fp, sl
 80085b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80085ba:	b298      	uxth	r0, r3
 80085bc:	fb06 a000 	mla	r0, r6, r0, sl
 80085c0:	0c02      	lsrs	r2, r0, #16
 80085c2:	0c1b      	lsrs	r3, r3, #16
 80085c4:	fb06 2303 	mla	r3, r6, r3, r2
 80085c8:	f8de 2000 	ldr.w	r2, [lr]
 80085cc:	b280      	uxth	r0, r0
 80085ce:	b292      	uxth	r2, r2
 80085d0:	1a12      	subs	r2, r2, r0
 80085d2:	445a      	add	r2, fp
 80085d4:	f8de 0000 	ldr.w	r0, [lr]
 80085d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085dc:	b29b      	uxth	r3, r3
 80085de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80085e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80085e6:	b292      	uxth	r2, r2
 80085e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80085ec:	45e1      	cmp	r9, ip
 80085ee:	f84e 2b04 	str.w	r2, [lr], #4
 80085f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80085f6:	d2de      	bcs.n	80085b6 <quorem+0x42>
 80085f8:	9b00      	ldr	r3, [sp, #0]
 80085fa:	58eb      	ldr	r3, [r5, r3]
 80085fc:	b92b      	cbnz	r3, 800860a <quorem+0x96>
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	3b04      	subs	r3, #4
 8008602:	429d      	cmp	r5, r3
 8008604:	461a      	mov	r2, r3
 8008606:	d32f      	bcc.n	8008668 <quorem+0xf4>
 8008608:	613c      	str	r4, [r7, #16]
 800860a:	4638      	mov	r0, r7
 800860c:	f001 f9c4 	bl	8009998 <__mcmp>
 8008610:	2800      	cmp	r0, #0
 8008612:	db25      	blt.n	8008660 <quorem+0xec>
 8008614:	4629      	mov	r1, r5
 8008616:	2000      	movs	r0, #0
 8008618:	f858 2b04 	ldr.w	r2, [r8], #4
 800861c:	f8d1 c000 	ldr.w	ip, [r1]
 8008620:	fa1f fe82 	uxth.w	lr, r2
 8008624:	fa1f f38c 	uxth.w	r3, ip
 8008628:	eba3 030e 	sub.w	r3, r3, lr
 800862c:	4403      	add	r3, r0
 800862e:	0c12      	lsrs	r2, r2, #16
 8008630:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008634:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008638:	b29b      	uxth	r3, r3
 800863a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800863e:	45c1      	cmp	r9, r8
 8008640:	f841 3b04 	str.w	r3, [r1], #4
 8008644:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008648:	d2e6      	bcs.n	8008618 <quorem+0xa4>
 800864a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800864e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008652:	b922      	cbnz	r2, 800865e <quorem+0xea>
 8008654:	3b04      	subs	r3, #4
 8008656:	429d      	cmp	r5, r3
 8008658:	461a      	mov	r2, r3
 800865a:	d30b      	bcc.n	8008674 <quorem+0x100>
 800865c:	613c      	str	r4, [r7, #16]
 800865e:	3601      	adds	r6, #1
 8008660:	4630      	mov	r0, r6
 8008662:	b003      	add	sp, #12
 8008664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008668:	6812      	ldr	r2, [r2, #0]
 800866a:	3b04      	subs	r3, #4
 800866c:	2a00      	cmp	r2, #0
 800866e:	d1cb      	bne.n	8008608 <quorem+0x94>
 8008670:	3c01      	subs	r4, #1
 8008672:	e7c6      	b.n	8008602 <quorem+0x8e>
 8008674:	6812      	ldr	r2, [r2, #0]
 8008676:	3b04      	subs	r3, #4
 8008678:	2a00      	cmp	r2, #0
 800867a:	d1ef      	bne.n	800865c <quorem+0xe8>
 800867c:	3c01      	subs	r4, #1
 800867e:	e7ea      	b.n	8008656 <quorem+0xe2>
 8008680:	2000      	movs	r0, #0
 8008682:	e7ee      	b.n	8008662 <quorem+0xee>
 8008684:	0000      	movs	r0, r0
	...

08008688 <_dtoa_r>:
 8008688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868c:	69c7      	ldr	r7, [r0, #28]
 800868e:	b099      	sub	sp, #100	@ 0x64
 8008690:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008694:	ec55 4b10 	vmov	r4, r5, d0
 8008698:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800869a:	9109      	str	r1, [sp, #36]	@ 0x24
 800869c:	4683      	mov	fp, r0
 800869e:	920e      	str	r2, [sp, #56]	@ 0x38
 80086a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086a2:	b97f      	cbnz	r7, 80086c4 <_dtoa_r+0x3c>
 80086a4:	2010      	movs	r0, #16
 80086a6:	f000 fdfd 	bl	80092a4 <malloc>
 80086aa:	4602      	mov	r2, r0
 80086ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80086b0:	b920      	cbnz	r0, 80086bc <_dtoa_r+0x34>
 80086b2:	4ba7      	ldr	r3, [pc, #668]	@ (8008950 <_dtoa_r+0x2c8>)
 80086b4:	21ef      	movs	r1, #239	@ 0xef
 80086b6:	48a7      	ldr	r0, [pc, #668]	@ (8008954 <_dtoa_r+0x2cc>)
 80086b8:	f002 fdfe 	bl	800b2b8 <__assert_func>
 80086bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80086c0:	6007      	str	r7, [r0, #0]
 80086c2:	60c7      	str	r7, [r0, #12]
 80086c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086c8:	6819      	ldr	r1, [r3, #0]
 80086ca:	b159      	cbz	r1, 80086e4 <_dtoa_r+0x5c>
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	604a      	str	r2, [r1, #4]
 80086d0:	2301      	movs	r3, #1
 80086d2:	4093      	lsls	r3, r2
 80086d4:	608b      	str	r3, [r1, #8]
 80086d6:	4658      	mov	r0, fp
 80086d8:	f000 feda 	bl	8009490 <_Bfree>
 80086dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80086e0:	2200      	movs	r2, #0
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	1e2b      	subs	r3, r5, #0
 80086e6:	bfb9      	ittee	lt
 80086e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80086ec:	9303      	strlt	r3, [sp, #12]
 80086ee:	2300      	movge	r3, #0
 80086f0:	6033      	strge	r3, [r6, #0]
 80086f2:	9f03      	ldr	r7, [sp, #12]
 80086f4:	4b98      	ldr	r3, [pc, #608]	@ (8008958 <_dtoa_r+0x2d0>)
 80086f6:	bfbc      	itt	lt
 80086f8:	2201      	movlt	r2, #1
 80086fa:	6032      	strlt	r2, [r6, #0]
 80086fc:	43bb      	bics	r3, r7
 80086fe:	d112      	bne.n	8008726 <_dtoa_r+0x9e>
 8008700:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008702:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008706:	6013      	str	r3, [r2, #0]
 8008708:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800870c:	4323      	orrs	r3, r4
 800870e:	f000 854d 	beq.w	80091ac <_dtoa_r+0xb24>
 8008712:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008714:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800896c <_dtoa_r+0x2e4>
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 854f 	beq.w	80091bc <_dtoa_r+0xb34>
 800871e:	f10a 0303 	add.w	r3, sl, #3
 8008722:	f000 bd49 	b.w	80091b8 <_dtoa_r+0xb30>
 8008726:	ed9d 7b02 	vldr	d7, [sp, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	ec51 0b17 	vmov	r0, r1, d7
 8008730:	2300      	movs	r3, #0
 8008732:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008736:	f7f8 f9c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800873a:	4680      	mov	r8, r0
 800873c:	b158      	cbz	r0, 8008756 <_dtoa_r+0xce>
 800873e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008740:	2301      	movs	r3, #1
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008746:	b113      	cbz	r3, 800874e <_dtoa_r+0xc6>
 8008748:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800874a:	4b84      	ldr	r3, [pc, #528]	@ (800895c <_dtoa_r+0x2d4>)
 800874c:	6013      	str	r3, [r2, #0]
 800874e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008970 <_dtoa_r+0x2e8>
 8008752:	f000 bd33 	b.w	80091bc <_dtoa_r+0xb34>
 8008756:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800875a:	aa16      	add	r2, sp, #88	@ 0x58
 800875c:	a917      	add	r1, sp, #92	@ 0x5c
 800875e:	4658      	mov	r0, fp
 8008760:	f001 fa3a 	bl	8009bd8 <__d2b>
 8008764:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008768:	4681      	mov	r9, r0
 800876a:	2e00      	cmp	r6, #0
 800876c:	d077      	beq.n	800885e <_dtoa_r+0x1d6>
 800876e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008770:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800877c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008780:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008784:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008788:	4619      	mov	r1, r3
 800878a:	2200      	movs	r2, #0
 800878c:	4b74      	ldr	r3, [pc, #464]	@ (8008960 <_dtoa_r+0x2d8>)
 800878e:	f7f7 fd7b 	bl	8000288 <__aeabi_dsub>
 8008792:	a369      	add	r3, pc, #420	@ (adr r3, 8008938 <_dtoa_r+0x2b0>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f7f7 ff2e 	bl	80005f8 <__aeabi_dmul>
 800879c:	a368      	add	r3, pc, #416	@ (adr r3, 8008940 <_dtoa_r+0x2b8>)
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	f7f7 fd73 	bl	800028c <__adddf3>
 80087a6:	4604      	mov	r4, r0
 80087a8:	4630      	mov	r0, r6
 80087aa:	460d      	mov	r5, r1
 80087ac:	f7f7 feba 	bl	8000524 <__aeabi_i2d>
 80087b0:	a365      	add	r3, pc, #404	@ (adr r3, 8008948 <_dtoa_r+0x2c0>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 ff1f 	bl	80005f8 <__aeabi_dmul>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4620      	mov	r0, r4
 80087c0:	4629      	mov	r1, r5
 80087c2:	f7f7 fd63 	bl	800028c <__adddf3>
 80087c6:	4604      	mov	r4, r0
 80087c8:	460d      	mov	r5, r1
 80087ca:	f7f8 f9c5 	bl	8000b58 <__aeabi_d2iz>
 80087ce:	2200      	movs	r2, #0
 80087d0:	4607      	mov	r7, r0
 80087d2:	2300      	movs	r3, #0
 80087d4:	4620      	mov	r0, r4
 80087d6:	4629      	mov	r1, r5
 80087d8:	f7f8 f980 	bl	8000adc <__aeabi_dcmplt>
 80087dc:	b140      	cbz	r0, 80087f0 <_dtoa_r+0x168>
 80087de:	4638      	mov	r0, r7
 80087e0:	f7f7 fea0 	bl	8000524 <__aeabi_i2d>
 80087e4:	4622      	mov	r2, r4
 80087e6:	462b      	mov	r3, r5
 80087e8:	f7f8 f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80087ec:	b900      	cbnz	r0, 80087f0 <_dtoa_r+0x168>
 80087ee:	3f01      	subs	r7, #1
 80087f0:	2f16      	cmp	r7, #22
 80087f2:	d851      	bhi.n	8008898 <_dtoa_r+0x210>
 80087f4:	4b5b      	ldr	r3, [pc, #364]	@ (8008964 <_dtoa_r+0x2dc>)
 80087f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80087fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008802:	f7f8 f96b 	bl	8000adc <__aeabi_dcmplt>
 8008806:	2800      	cmp	r0, #0
 8008808:	d048      	beq.n	800889c <_dtoa_r+0x214>
 800880a:	3f01      	subs	r7, #1
 800880c:	2300      	movs	r3, #0
 800880e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008810:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008812:	1b9b      	subs	r3, r3, r6
 8008814:	1e5a      	subs	r2, r3, #1
 8008816:	bf44      	itt	mi
 8008818:	f1c3 0801 	rsbmi	r8, r3, #1
 800881c:	2300      	movmi	r3, #0
 800881e:	9208      	str	r2, [sp, #32]
 8008820:	bf54      	ite	pl
 8008822:	f04f 0800 	movpl.w	r8, #0
 8008826:	9308      	strmi	r3, [sp, #32]
 8008828:	2f00      	cmp	r7, #0
 800882a:	db39      	blt.n	80088a0 <_dtoa_r+0x218>
 800882c:	9b08      	ldr	r3, [sp, #32]
 800882e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008830:	443b      	add	r3, r7
 8008832:	9308      	str	r3, [sp, #32]
 8008834:	2300      	movs	r3, #0
 8008836:	930a      	str	r3, [sp, #40]	@ 0x28
 8008838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800883a:	2b09      	cmp	r3, #9
 800883c:	d864      	bhi.n	8008908 <_dtoa_r+0x280>
 800883e:	2b05      	cmp	r3, #5
 8008840:	bfc4      	itt	gt
 8008842:	3b04      	subgt	r3, #4
 8008844:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008848:	f1a3 0302 	sub.w	r3, r3, #2
 800884c:	bfcc      	ite	gt
 800884e:	2400      	movgt	r4, #0
 8008850:	2401      	movle	r4, #1
 8008852:	2b03      	cmp	r3, #3
 8008854:	d863      	bhi.n	800891e <_dtoa_r+0x296>
 8008856:	e8df f003 	tbb	[pc, r3]
 800885a:	372a      	.short	0x372a
 800885c:	5535      	.short	0x5535
 800885e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008862:	441e      	add	r6, r3
 8008864:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008868:	2b20      	cmp	r3, #32
 800886a:	bfc1      	itttt	gt
 800886c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008870:	409f      	lslgt	r7, r3
 8008872:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008876:	fa24 f303 	lsrgt.w	r3, r4, r3
 800887a:	bfd6      	itet	le
 800887c:	f1c3 0320 	rsble	r3, r3, #32
 8008880:	ea47 0003 	orrgt.w	r0, r7, r3
 8008884:	fa04 f003 	lslle.w	r0, r4, r3
 8008888:	f7f7 fe3c 	bl	8000504 <__aeabi_ui2d>
 800888c:	2201      	movs	r2, #1
 800888e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008892:	3e01      	subs	r6, #1
 8008894:	9214      	str	r2, [sp, #80]	@ 0x50
 8008896:	e777      	b.n	8008788 <_dtoa_r+0x100>
 8008898:	2301      	movs	r3, #1
 800889a:	e7b8      	b.n	800880e <_dtoa_r+0x186>
 800889c:	9012      	str	r0, [sp, #72]	@ 0x48
 800889e:	e7b7      	b.n	8008810 <_dtoa_r+0x188>
 80088a0:	427b      	negs	r3, r7
 80088a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80088a4:	2300      	movs	r3, #0
 80088a6:	eba8 0807 	sub.w	r8, r8, r7
 80088aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80088ac:	e7c4      	b.n	8008838 <_dtoa_r+0x1b0>
 80088ae:	2300      	movs	r3, #0
 80088b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc35      	bgt.n	8008924 <_dtoa_r+0x29c>
 80088b8:	2301      	movs	r3, #1
 80088ba:	9300      	str	r3, [sp, #0]
 80088bc:	9307      	str	r3, [sp, #28]
 80088be:	461a      	mov	r2, r3
 80088c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80088c2:	e00b      	b.n	80088dc <_dtoa_r+0x254>
 80088c4:	2301      	movs	r3, #1
 80088c6:	e7f3      	b.n	80088b0 <_dtoa_r+0x228>
 80088c8:	2300      	movs	r3, #0
 80088ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80088cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ce:	18fb      	adds	r3, r7, r3
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	3301      	adds	r3, #1
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	9307      	str	r3, [sp, #28]
 80088d8:	bfb8      	it	lt
 80088da:	2301      	movlt	r3, #1
 80088dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80088e0:	2100      	movs	r1, #0
 80088e2:	2204      	movs	r2, #4
 80088e4:	f102 0514 	add.w	r5, r2, #20
 80088e8:	429d      	cmp	r5, r3
 80088ea:	d91f      	bls.n	800892c <_dtoa_r+0x2a4>
 80088ec:	6041      	str	r1, [r0, #4]
 80088ee:	4658      	mov	r0, fp
 80088f0:	f000 fd8e 	bl	8009410 <_Balloc>
 80088f4:	4682      	mov	sl, r0
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d13c      	bne.n	8008974 <_dtoa_r+0x2ec>
 80088fa:	4b1b      	ldr	r3, [pc, #108]	@ (8008968 <_dtoa_r+0x2e0>)
 80088fc:	4602      	mov	r2, r0
 80088fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8008902:	e6d8      	b.n	80086b6 <_dtoa_r+0x2e>
 8008904:	2301      	movs	r3, #1
 8008906:	e7e0      	b.n	80088ca <_dtoa_r+0x242>
 8008908:	2401      	movs	r4, #1
 800890a:	2300      	movs	r3, #0
 800890c:	9309      	str	r3, [sp, #36]	@ 0x24
 800890e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008910:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	9307      	str	r3, [sp, #28]
 8008918:	2200      	movs	r2, #0
 800891a:	2312      	movs	r3, #18
 800891c:	e7d0      	b.n	80088c0 <_dtoa_r+0x238>
 800891e:	2301      	movs	r3, #1
 8008920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008922:	e7f5      	b.n	8008910 <_dtoa_r+0x288>
 8008924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008926:	9300      	str	r3, [sp, #0]
 8008928:	9307      	str	r3, [sp, #28]
 800892a:	e7d7      	b.n	80088dc <_dtoa_r+0x254>
 800892c:	3101      	adds	r1, #1
 800892e:	0052      	lsls	r2, r2, #1
 8008930:	e7d8      	b.n	80088e4 <_dtoa_r+0x25c>
 8008932:	bf00      	nop
 8008934:	f3af 8000 	nop.w
 8008938:	636f4361 	.word	0x636f4361
 800893c:	3fd287a7 	.word	0x3fd287a7
 8008940:	8b60c8b3 	.word	0x8b60c8b3
 8008944:	3fc68a28 	.word	0x3fc68a28
 8008948:	509f79fb 	.word	0x509f79fb
 800894c:	3fd34413 	.word	0x3fd34413
 8008950:	0800bc82 	.word	0x0800bc82
 8008954:	0800bc99 	.word	0x0800bc99
 8008958:	7ff00000 	.word	0x7ff00000
 800895c:	0800bc4d 	.word	0x0800bc4d
 8008960:	3ff80000 	.word	0x3ff80000
 8008964:	0800bd90 	.word	0x0800bd90
 8008968:	0800bcf1 	.word	0x0800bcf1
 800896c:	0800bc7e 	.word	0x0800bc7e
 8008970:	0800bc4c 	.word	0x0800bc4c
 8008974:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008978:	6018      	str	r0, [r3, #0]
 800897a:	9b07      	ldr	r3, [sp, #28]
 800897c:	2b0e      	cmp	r3, #14
 800897e:	f200 80a4 	bhi.w	8008aca <_dtoa_r+0x442>
 8008982:	2c00      	cmp	r4, #0
 8008984:	f000 80a1 	beq.w	8008aca <_dtoa_r+0x442>
 8008988:	2f00      	cmp	r7, #0
 800898a:	dd33      	ble.n	80089f4 <_dtoa_r+0x36c>
 800898c:	4bad      	ldr	r3, [pc, #692]	@ (8008c44 <_dtoa_r+0x5bc>)
 800898e:	f007 020f 	and.w	r2, r7, #15
 8008992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008996:	ed93 7b00 	vldr	d7, [r3]
 800899a:	05f8      	lsls	r0, r7, #23
 800899c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80089a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80089a4:	d516      	bpl.n	80089d4 <_dtoa_r+0x34c>
 80089a6:	4ba8      	ldr	r3, [pc, #672]	@ (8008c48 <_dtoa_r+0x5c0>)
 80089a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80089b0:	f7f7 ff4c 	bl	800084c <__aeabi_ddiv>
 80089b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089b8:	f004 040f 	and.w	r4, r4, #15
 80089bc:	2603      	movs	r6, #3
 80089be:	4da2      	ldr	r5, [pc, #648]	@ (8008c48 <_dtoa_r+0x5c0>)
 80089c0:	b954      	cbnz	r4, 80089d8 <_dtoa_r+0x350>
 80089c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ca:	f7f7 ff3f 	bl	800084c <__aeabi_ddiv>
 80089ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089d2:	e028      	b.n	8008a26 <_dtoa_r+0x39e>
 80089d4:	2602      	movs	r6, #2
 80089d6:	e7f2      	b.n	80089be <_dtoa_r+0x336>
 80089d8:	07e1      	lsls	r1, r4, #31
 80089da:	d508      	bpl.n	80089ee <_dtoa_r+0x366>
 80089dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089e4:	f7f7 fe08 	bl	80005f8 <__aeabi_dmul>
 80089e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089ec:	3601      	adds	r6, #1
 80089ee:	1064      	asrs	r4, r4, #1
 80089f0:	3508      	adds	r5, #8
 80089f2:	e7e5      	b.n	80089c0 <_dtoa_r+0x338>
 80089f4:	f000 80d2 	beq.w	8008b9c <_dtoa_r+0x514>
 80089f8:	427c      	negs	r4, r7
 80089fa:	4b92      	ldr	r3, [pc, #584]	@ (8008c44 <_dtoa_r+0x5bc>)
 80089fc:	4d92      	ldr	r5, [pc, #584]	@ (8008c48 <_dtoa_r+0x5c0>)
 80089fe:	f004 020f 	and.w	r2, r4, #15
 8008a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a0e:	f7f7 fdf3 	bl	80005f8 <__aeabi_dmul>
 8008a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a16:	1124      	asrs	r4, r4, #4
 8008a18:	2300      	movs	r3, #0
 8008a1a:	2602      	movs	r6, #2
 8008a1c:	2c00      	cmp	r4, #0
 8008a1e:	f040 80b2 	bne.w	8008b86 <_dtoa_r+0x4fe>
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1d3      	bne.n	80089ce <_dtoa_r+0x346>
 8008a26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 80b7 	beq.w	8008ba0 <_dtoa_r+0x518>
 8008a32:	4b86      	ldr	r3, [pc, #536]	@ (8008c4c <_dtoa_r+0x5c4>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	4620      	mov	r0, r4
 8008a38:	4629      	mov	r1, r5
 8008a3a:	f7f8 f84f 	bl	8000adc <__aeabi_dcmplt>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f000 80ae 	beq.w	8008ba0 <_dtoa_r+0x518>
 8008a44:	9b07      	ldr	r3, [sp, #28]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	f000 80aa 	beq.w	8008ba0 <_dtoa_r+0x518>
 8008a4c:	9b00      	ldr	r3, [sp, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	dd37      	ble.n	8008ac2 <_dtoa_r+0x43a>
 8008a52:	1e7b      	subs	r3, r7, #1
 8008a54:	9304      	str	r3, [sp, #16]
 8008a56:	4620      	mov	r0, r4
 8008a58:	4b7d      	ldr	r3, [pc, #500]	@ (8008c50 <_dtoa_r+0x5c8>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f7 fdcb 	bl	80005f8 <__aeabi_dmul>
 8008a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a66:	9c00      	ldr	r4, [sp, #0]
 8008a68:	3601      	adds	r6, #1
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f7f7 fd5a 	bl	8000524 <__aeabi_i2d>
 8008a70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a74:	f7f7 fdc0 	bl	80005f8 <__aeabi_dmul>
 8008a78:	4b76      	ldr	r3, [pc, #472]	@ (8008c54 <_dtoa_r+0x5cc>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f7f7 fc06 	bl	800028c <__adddf3>
 8008a80:	4605      	mov	r5, r0
 8008a82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008a86:	2c00      	cmp	r4, #0
 8008a88:	f040 808d 	bne.w	8008ba6 <_dtoa_r+0x51e>
 8008a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a90:	4b71      	ldr	r3, [pc, #452]	@ (8008c58 <_dtoa_r+0x5d0>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	f7f7 fbf8 	bl	8000288 <__aeabi_dsub>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	460b      	mov	r3, r1
 8008a9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008aa0:	462a      	mov	r2, r5
 8008aa2:	4633      	mov	r3, r6
 8008aa4:	f7f8 f838 	bl	8000b18 <__aeabi_dcmpgt>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f040 828b 	bne.w	8008fc4 <_dtoa_r+0x93c>
 8008aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ab2:	462a      	mov	r2, r5
 8008ab4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008ab8:	f7f8 f810 	bl	8000adc <__aeabi_dcmplt>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f040 8128 	bne.w	8008d12 <_dtoa_r+0x68a>
 8008ac2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008ac6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008aca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f2c0 815a 	blt.w	8008d86 <_dtoa_r+0x6fe>
 8008ad2:	2f0e      	cmp	r7, #14
 8008ad4:	f300 8157 	bgt.w	8008d86 <_dtoa_r+0x6fe>
 8008ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8008c44 <_dtoa_r+0x5bc>)
 8008ada:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ade:	ed93 7b00 	vldr	d7, [r3]
 8008ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	ed8d 7b00 	vstr	d7, [sp]
 8008aea:	da03      	bge.n	8008af4 <_dtoa_r+0x46c>
 8008aec:	9b07      	ldr	r3, [sp, #28]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f340 8101 	ble.w	8008cf6 <_dtoa_r+0x66e>
 8008af4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008af8:	4656      	mov	r6, sl
 8008afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008afe:	4620      	mov	r0, r4
 8008b00:	4629      	mov	r1, r5
 8008b02:	f7f7 fea3 	bl	800084c <__aeabi_ddiv>
 8008b06:	f7f8 f827 	bl	8000b58 <__aeabi_d2iz>
 8008b0a:	4680      	mov	r8, r0
 8008b0c:	f7f7 fd0a 	bl	8000524 <__aeabi_i2d>
 8008b10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b14:	f7f7 fd70 	bl	80005f8 <__aeabi_dmul>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4620      	mov	r0, r4
 8008b1e:	4629      	mov	r1, r5
 8008b20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008b24:	f7f7 fbb0 	bl	8000288 <__aeabi_dsub>
 8008b28:	f806 4b01 	strb.w	r4, [r6], #1
 8008b2c:	9d07      	ldr	r5, [sp, #28]
 8008b2e:	eba6 040a 	sub.w	r4, r6, sl
 8008b32:	42a5      	cmp	r5, r4
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	f040 8117 	bne.w	8008d6a <_dtoa_r+0x6e2>
 8008b3c:	f7f7 fba6 	bl	800028c <__adddf3>
 8008b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b44:	4604      	mov	r4, r0
 8008b46:	460d      	mov	r5, r1
 8008b48:	f7f7 ffe6 	bl	8000b18 <__aeabi_dcmpgt>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	f040 80f9 	bne.w	8008d44 <_dtoa_r+0x6bc>
 8008b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b56:	4620      	mov	r0, r4
 8008b58:	4629      	mov	r1, r5
 8008b5a:	f7f7 ffb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b5e:	b118      	cbz	r0, 8008b68 <_dtoa_r+0x4e0>
 8008b60:	f018 0f01 	tst.w	r8, #1
 8008b64:	f040 80ee 	bne.w	8008d44 <_dtoa_r+0x6bc>
 8008b68:	4649      	mov	r1, r9
 8008b6a:	4658      	mov	r0, fp
 8008b6c:	f000 fc90 	bl	8009490 <_Bfree>
 8008b70:	2300      	movs	r3, #0
 8008b72:	7033      	strb	r3, [r6, #0]
 8008b74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008b76:	3701      	adds	r7, #1
 8008b78:	601f      	str	r7, [r3, #0]
 8008b7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 831d 	beq.w	80091bc <_dtoa_r+0xb34>
 8008b82:	601e      	str	r6, [r3, #0]
 8008b84:	e31a      	b.n	80091bc <_dtoa_r+0xb34>
 8008b86:	07e2      	lsls	r2, r4, #31
 8008b88:	d505      	bpl.n	8008b96 <_dtoa_r+0x50e>
 8008b8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b8e:	f7f7 fd33 	bl	80005f8 <__aeabi_dmul>
 8008b92:	3601      	adds	r6, #1
 8008b94:	2301      	movs	r3, #1
 8008b96:	1064      	asrs	r4, r4, #1
 8008b98:	3508      	adds	r5, #8
 8008b9a:	e73f      	b.n	8008a1c <_dtoa_r+0x394>
 8008b9c:	2602      	movs	r6, #2
 8008b9e:	e742      	b.n	8008a26 <_dtoa_r+0x39e>
 8008ba0:	9c07      	ldr	r4, [sp, #28]
 8008ba2:	9704      	str	r7, [sp, #16]
 8008ba4:	e761      	b.n	8008a6a <_dtoa_r+0x3e2>
 8008ba6:	4b27      	ldr	r3, [pc, #156]	@ (8008c44 <_dtoa_r+0x5bc>)
 8008ba8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008baa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008bae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008bb2:	4454      	add	r4, sl
 8008bb4:	2900      	cmp	r1, #0
 8008bb6:	d053      	beq.n	8008c60 <_dtoa_r+0x5d8>
 8008bb8:	4928      	ldr	r1, [pc, #160]	@ (8008c5c <_dtoa_r+0x5d4>)
 8008bba:	2000      	movs	r0, #0
 8008bbc:	f7f7 fe46 	bl	800084c <__aeabi_ddiv>
 8008bc0:	4633      	mov	r3, r6
 8008bc2:	462a      	mov	r2, r5
 8008bc4:	f7f7 fb60 	bl	8000288 <__aeabi_dsub>
 8008bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bcc:	4656      	mov	r6, sl
 8008bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd2:	f7f7 ffc1 	bl	8000b58 <__aeabi_d2iz>
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	f7f7 fca4 	bl	8000524 <__aeabi_i2d>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008be4:	f7f7 fb50 	bl	8000288 <__aeabi_dsub>
 8008be8:	3530      	adds	r5, #48	@ 0x30
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bf2:	f806 5b01 	strb.w	r5, [r6], #1
 8008bf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008bfa:	f7f7 ff6f 	bl	8000adc <__aeabi_dcmplt>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d171      	bne.n	8008ce6 <_dtoa_r+0x65e>
 8008c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c06:	4911      	ldr	r1, [pc, #68]	@ (8008c4c <_dtoa_r+0x5c4>)
 8008c08:	2000      	movs	r0, #0
 8008c0a:	f7f7 fb3d 	bl	8000288 <__aeabi_dsub>
 8008c0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c12:	f7f7 ff63 	bl	8000adc <__aeabi_dcmplt>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	f040 8095 	bne.w	8008d46 <_dtoa_r+0x6be>
 8008c1c:	42a6      	cmp	r6, r4
 8008c1e:	f43f af50 	beq.w	8008ac2 <_dtoa_r+0x43a>
 8008c22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c26:	4b0a      	ldr	r3, [pc, #40]	@ (8008c50 <_dtoa_r+0x5c8>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f7f7 fce5 	bl	80005f8 <__aeabi_dmul>
 8008c2e:	4b08      	ldr	r3, [pc, #32]	@ (8008c50 <_dtoa_r+0x5c8>)
 8008c30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c34:	2200      	movs	r2, #0
 8008c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c3a:	f7f7 fcdd 	bl	80005f8 <__aeabi_dmul>
 8008c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c42:	e7c4      	b.n	8008bce <_dtoa_r+0x546>
 8008c44:	0800bd90 	.word	0x0800bd90
 8008c48:	0800bd68 	.word	0x0800bd68
 8008c4c:	3ff00000 	.word	0x3ff00000
 8008c50:	40240000 	.word	0x40240000
 8008c54:	401c0000 	.word	0x401c0000
 8008c58:	40140000 	.word	0x40140000
 8008c5c:	3fe00000 	.word	0x3fe00000
 8008c60:	4631      	mov	r1, r6
 8008c62:	4628      	mov	r0, r5
 8008c64:	f7f7 fcc8 	bl	80005f8 <__aeabi_dmul>
 8008c68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008c6c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008c6e:	4656      	mov	r6, sl
 8008c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c74:	f7f7 ff70 	bl	8000b58 <__aeabi_d2iz>
 8008c78:	4605      	mov	r5, r0
 8008c7a:	f7f7 fc53 	bl	8000524 <__aeabi_i2d>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c86:	f7f7 faff 	bl	8000288 <__aeabi_dsub>
 8008c8a:	3530      	adds	r5, #48	@ 0x30
 8008c8c:	f806 5b01 	strb.w	r5, [r6], #1
 8008c90:	4602      	mov	r2, r0
 8008c92:	460b      	mov	r3, r1
 8008c94:	42a6      	cmp	r6, r4
 8008c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c9a:	f04f 0200 	mov.w	r2, #0
 8008c9e:	d124      	bne.n	8008cea <_dtoa_r+0x662>
 8008ca0:	4bac      	ldr	r3, [pc, #688]	@ (8008f54 <_dtoa_r+0x8cc>)
 8008ca2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008ca6:	f7f7 faf1 	bl	800028c <__adddf3>
 8008caa:	4602      	mov	r2, r0
 8008cac:	460b      	mov	r3, r1
 8008cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cb2:	f7f7 ff31 	bl	8000b18 <__aeabi_dcmpgt>
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d145      	bne.n	8008d46 <_dtoa_r+0x6be>
 8008cba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008cbe:	49a5      	ldr	r1, [pc, #660]	@ (8008f54 <_dtoa_r+0x8cc>)
 8008cc0:	2000      	movs	r0, #0
 8008cc2:	f7f7 fae1 	bl	8000288 <__aeabi_dsub>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	460b      	mov	r3, r1
 8008cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cce:	f7f7 ff05 	bl	8000adc <__aeabi_dcmplt>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	f43f aef5 	beq.w	8008ac2 <_dtoa_r+0x43a>
 8008cd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008cda:	1e73      	subs	r3, r6, #1
 8008cdc:	9315      	str	r3, [sp, #84]	@ 0x54
 8008cde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ce2:	2b30      	cmp	r3, #48	@ 0x30
 8008ce4:	d0f8      	beq.n	8008cd8 <_dtoa_r+0x650>
 8008ce6:	9f04      	ldr	r7, [sp, #16]
 8008ce8:	e73e      	b.n	8008b68 <_dtoa_r+0x4e0>
 8008cea:	4b9b      	ldr	r3, [pc, #620]	@ (8008f58 <_dtoa_r+0x8d0>)
 8008cec:	f7f7 fc84 	bl	80005f8 <__aeabi_dmul>
 8008cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cf4:	e7bc      	b.n	8008c70 <_dtoa_r+0x5e8>
 8008cf6:	d10c      	bne.n	8008d12 <_dtoa_r+0x68a>
 8008cf8:	4b98      	ldr	r3, [pc, #608]	@ (8008f5c <_dtoa_r+0x8d4>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d00:	f7f7 fc7a 	bl	80005f8 <__aeabi_dmul>
 8008d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d08:	f7f7 fefc 	bl	8000b04 <__aeabi_dcmpge>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f000 8157 	beq.w	8008fc0 <_dtoa_r+0x938>
 8008d12:	2400      	movs	r4, #0
 8008d14:	4625      	mov	r5, r4
 8008d16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d18:	43db      	mvns	r3, r3
 8008d1a:	9304      	str	r3, [sp, #16]
 8008d1c:	4656      	mov	r6, sl
 8008d1e:	2700      	movs	r7, #0
 8008d20:	4621      	mov	r1, r4
 8008d22:	4658      	mov	r0, fp
 8008d24:	f000 fbb4 	bl	8009490 <_Bfree>
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	d0dc      	beq.n	8008ce6 <_dtoa_r+0x65e>
 8008d2c:	b12f      	cbz	r7, 8008d3a <_dtoa_r+0x6b2>
 8008d2e:	42af      	cmp	r7, r5
 8008d30:	d003      	beq.n	8008d3a <_dtoa_r+0x6b2>
 8008d32:	4639      	mov	r1, r7
 8008d34:	4658      	mov	r0, fp
 8008d36:	f000 fbab 	bl	8009490 <_Bfree>
 8008d3a:	4629      	mov	r1, r5
 8008d3c:	4658      	mov	r0, fp
 8008d3e:	f000 fba7 	bl	8009490 <_Bfree>
 8008d42:	e7d0      	b.n	8008ce6 <_dtoa_r+0x65e>
 8008d44:	9704      	str	r7, [sp, #16]
 8008d46:	4633      	mov	r3, r6
 8008d48:	461e      	mov	r6, r3
 8008d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d4e:	2a39      	cmp	r2, #57	@ 0x39
 8008d50:	d107      	bne.n	8008d62 <_dtoa_r+0x6da>
 8008d52:	459a      	cmp	sl, r3
 8008d54:	d1f8      	bne.n	8008d48 <_dtoa_r+0x6c0>
 8008d56:	9a04      	ldr	r2, [sp, #16]
 8008d58:	3201      	adds	r2, #1
 8008d5a:	9204      	str	r2, [sp, #16]
 8008d5c:	2230      	movs	r2, #48	@ 0x30
 8008d5e:	f88a 2000 	strb.w	r2, [sl]
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	3201      	adds	r2, #1
 8008d66:	701a      	strb	r2, [r3, #0]
 8008d68:	e7bd      	b.n	8008ce6 <_dtoa_r+0x65e>
 8008d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8008f58 <_dtoa_r+0x8d0>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f7f7 fc43 	bl	80005f8 <__aeabi_dmul>
 8008d72:	2200      	movs	r2, #0
 8008d74:	2300      	movs	r3, #0
 8008d76:	4604      	mov	r4, r0
 8008d78:	460d      	mov	r5, r1
 8008d7a:	f7f7 fea5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	f43f aebb 	beq.w	8008afa <_dtoa_r+0x472>
 8008d84:	e6f0      	b.n	8008b68 <_dtoa_r+0x4e0>
 8008d86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	f000 80db 	beq.w	8008f44 <_dtoa_r+0x8bc>
 8008d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d90:	2a01      	cmp	r2, #1
 8008d92:	f300 80bf 	bgt.w	8008f14 <_dtoa_r+0x88c>
 8008d96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d98:	2a00      	cmp	r2, #0
 8008d9a:	f000 80b7 	beq.w	8008f0c <_dtoa_r+0x884>
 8008d9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008da2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008da4:	4646      	mov	r6, r8
 8008da6:	9a08      	ldr	r2, [sp, #32]
 8008da8:	2101      	movs	r1, #1
 8008daa:	441a      	add	r2, r3
 8008dac:	4658      	mov	r0, fp
 8008dae:	4498      	add	r8, r3
 8008db0:	9208      	str	r2, [sp, #32]
 8008db2:	f000 fc6b 	bl	800968c <__i2b>
 8008db6:	4605      	mov	r5, r0
 8008db8:	b15e      	cbz	r6, 8008dd2 <_dtoa_r+0x74a>
 8008dba:	9b08      	ldr	r3, [sp, #32]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dd08      	ble.n	8008dd2 <_dtoa_r+0x74a>
 8008dc0:	42b3      	cmp	r3, r6
 8008dc2:	9a08      	ldr	r2, [sp, #32]
 8008dc4:	bfa8      	it	ge
 8008dc6:	4633      	movge	r3, r6
 8008dc8:	eba8 0803 	sub.w	r8, r8, r3
 8008dcc:	1af6      	subs	r6, r6, r3
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	9308      	str	r3, [sp, #32]
 8008dd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd4:	b1f3      	cbz	r3, 8008e14 <_dtoa_r+0x78c>
 8008dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f000 80b7 	beq.w	8008f4c <_dtoa_r+0x8c4>
 8008dde:	b18c      	cbz	r4, 8008e04 <_dtoa_r+0x77c>
 8008de0:	4629      	mov	r1, r5
 8008de2:	4622      	mov	r2, r4
 8008de4:	4658      	mov	r0, fp
 8008de6:	f000 fd11 	bl	800980c <__pow5mult>
 8008dea:	464a      	mov	r2, r9
 8008dec:	4601      	mov	r1, r0
 8008dee:	4605      	mov	r5, r0
 8008df0:	4658      	mov	r0, fp
 8008df2:	f000 fc61 	bl	80096b8 <__multiply>
 8008df6:	4649      	mov	r1, r9
 8008df8:	9004      	str	r0, [sp, #16]
 8008dfa:	4658      	mov	r0, fp
 8008dfc:	f000 fb48 	bl	8009490 <_Bfree>
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	4699      	mov	r9, r3
 8008e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e06:	1b1a      	subs	r2, r3, r4
 8008e08:	d004      	beq.n	8008e14 <_dtoa_r+0x78c>
 8008e0a:	4649      	mov	r1, r9
 8008e0c:	4658      	mov	r0, fp
 8008e0e:	f000 fcfd 	bl	800980c <__pow5mult>
 8008e12:	4681      	mov	r9, r0
 8008e14:	2101      	movs	r1, #1
 8008e16:	4658      	mov	r0, fp
 8008e18:	f000 fc38 	bl	800968c <__i2b>
 8008e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e1e:	4604      	mov	r4, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 81cf 	beq.w	80091c4 <_dtoa_r+0xb3c>
 8008e26:	461a      	mov	r2, r3
 8008e28:	4601      	mov	r1, r0
 8008e2a:	4658      	mov	r0, fp
 8008e2c:	f000 fcee 	bl	800980c <__pow5mult>
 8008e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	4604      	mov	r4, r0
 8008e36:	f300 8095 	bgt.w	8008f64 <_dtoa_r+0x8dc>
 8008e3a:	9b02      	ldr	r3, [sp, #8]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	f040 8087 	bne.w	8008f50 <_dtoa_r+0x8c8>
 8008e42:	9b03      	ldr	r3, [sp, #12]
 8008e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f040 8089 	bne.w	8008f60 <_dtoa_r+0x8d8>
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e54:	0d1b      	lsrs	r3, r3, #20
 8008e56:	051b      	lsls	r3, r3, #20
 8008e58:	b12b      	cbz	r3, 8008e66 <_dtoa_r+0x7de>
 8008e5a:	9b08      	ldr	r3, [sp, #32]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	9308      	str	r3, [sp, #32]
 8008e60:	f108 0801 	add.w	r8, r8, #1
 8008e64:	2301      	movs	r3, #1
 8008e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	f000 81b0 	beq.w	80091d0 <_dtoa_r+0xb48>
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008e76:	6918      	ldr	r0, [r3, #16]
 8008e78:	f000 fbbc 	bl	80095f4 <__hi0bits>
 8008e7c:	f1c0 0020 	rsb	r0, r0, #32
 8008e80:	9b08      	ldr	r3, [sp, #32]
 8008e82:	4418      	add	r0, r3
 8008e84:	f010 001f 	ands.w	r0, r0, #31
 8008e88:	d077      	beq.n	8008f7a <_dtoa_r+0x8f2>
 8008e8a:	f1c0 0320 	rsb	r3, r0, #32
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	dd6b      	ble.n	8008f6a <_dtoa_r+0x8e2>
 8008e92:	9b08      	ldr	r3, [sp, #32]
 8008e94:	f1c0 001c 	rsb	r0, r0, #28
 8008e98:	4403      	add	r3, r0
 8008e9a:	4480      	add	r8, r0
 8008e9c:	4406      	add	r6, r0
 8008e9e:	9308      	str	r3, [sp, #32]
 8008ea0:	f1b8 0f00 	cmp.w	r8, #0
 8008ea4:	dd05      	ble.n	8008eb2 <_dtoa_r+0x82a>
 8008ea6:	4649      	mov	r1, r9
 8008ea8:	4642      	mov	r2, r8
 8008eaa:	4658      	mov	r0, fp
 8008eac:	f000 fd08 	bl	80098c0 <__lshift>
 8008eb0:	4681      	mov	r9, r0
 8008eb2:	9b08      	ldr	r3, [sp, #32]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	dd05      	ble.n	8008ec4 <_dtoa_r+0x83c>
 8008eb8:	4621      	mov	r1, r4
 8008eba:	461a      	mov	r2, r3
 8008ebc:	4658      	mov	r0, fp
 8008ebe:	f000 fcff 	bl	80098c0 <__lshift>
 8008ec2:	4604      	mov	r4, r0
 8008ec4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d059      	beq.n	8008f7e <_dtoa_r+0x8f6>
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4648      	mov	r0, r9
 8008ece:	f000 fd63 	bl	8009998 <__mcmp>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	da53      	bge.n	8008f7e <_dtoa_r+0x8f6>
 8008ed6:	1e7b      	subs	r3, r7, #1
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	4649      	mov	r1, r9
 8008edc:	2300      	movs	r3, #0
 8008ede:	220a      	movs	r2, #10
 8008ee0:	4658      	mov	r0, fp
 8008ee2:	f000 faf7 	bl	80094d4 <__multadd>
 8008ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ee8:	4681      	mov	r9, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f000 8172 	beq.w	80091d4 <_dtoa_r+0xb4c>
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	4629      	mov	r1, r5
 8008ef4:	220a      	movs	r2, #10
 8008ef6:	4658      	mov	r0, fp
 8008ef8:	f000 faec 	bl	80094d4 <__multadd>
 8008efc:	9b00      	ldr	r3, [sp, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	4605      	mov	r5, r0
 8008f02:	dc67      	bgt.n	8008fd4 <_dtoa_r+0x94c>
 8008f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f06:	2b02      	cmp	r3, #2
 8008f08:	dc41      	bgt.n	8008f8e <_dtoa_r+0x906>
 8008f0a:	e063      	b.n	8008fd4 <_dtoa_r+0x94c>
 8008f0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008f12:	e746      	b.n	8008da2 <_dtoa_r+0x71a>
 8008f14:	9b07      	ldr	r3, [sp, #28]
 8008f16:	1e5c      	subs	r4, r3, #1
 8008f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f1a:	42a3      	cmp	r3, r4
 8008f1c:	bfbf      	itttt	lt
 8008f1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008f20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008f22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008f24:	1ae3      	sublt	r3, r4, r3
 8008f26:	bfb4      	ite	lt
 8008f28:	18d2      	addlt	r2, r2, r3
 8008f2a:	1b1c      	subge	r4, r3, r4
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	bfbc      	itt	lt
 8008f30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008f32:	2400      	movlt	r4, #0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	bfb5      	itete	lt
 8008f38:	eba8 0603 	sublt.w	r6, r8, r3
 8008f3c:	9b07      	ldrge	r3, [sp, #28]
 8008f3e:	2300      	movlt	r3, #0
 8008f40:	4646      	movge	r6, r8
 8008f42:	e730      	b.n	8008da6 <_dtoa_r+0x71e>
 8008f44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008f48:	4646      	mov	r6, r8
 8008f4a:	e735      	b.n	8008db8 <_dtoa_r+0x730>
 8008f4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f4e:	e75c      	b.n	8008e0a <_dtoa_r+0x782>
 8008f50:	2300      	movs	r3, #0
 8008f52:	e788      	b.n	8008e66 <_dtoa_r+0x7de>
 8008f54:	3fe00000 	.word	0x3fe00000
 8008f58:	40240000 	.word	0x40240000
 8008f5c:	40140000 	.word	0x40140000
 8008f60:	9b02      	ldr	r3, [sp, #8]
 8008f62:	e780      	b.n	8008e66 <_dtoa_r+0x7de>
 8008f64:	2300      	movs	r3, #0
 8008f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f68:	e782      	b.n	8008e70 <_dtoa_r+0x7e8>
 8008f6a:	d099      	beq.n	8008ea0 <_dtoa_r+0x818>
 8008f6c:	9a08      	ldr	r2, [sp, #32]
 8008f6e:	331c      	adds	r3, #28
 8008f70:	441a      	add	r2, r3
 8008f72:	4498      	add	r8, r3
 8008f74:	441e      	add	r6, r3
 8008f76:	9208      	str	r2, [sp, #32]
 8008f78:	e792      	b.n	8008ea0 <_dtoa_r+0x818>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	e7f6      	b.n	8008f6c <_dtoa_r+0x8e4>
 8008f7e:	9b07      	ldr	r3, [sp, #28]
 8008f80:	9704      	str	r7, [sp, #16]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dc20      	bgt.n	8008fc8 <_dtoa_r+0x940>
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	dd1e      	ble.n	8008fcc <_dtoa_r+0x944>
 8008f8e:	9b00      	ldr	r3, [sp, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f47f aec0 	bne.w	8008d16 <_dtoa_r+0x68e>
 8008f96:	4621      	mov	r1, r4
 8008f98:	2205      	movs	r2, #5
 8008f9a:	4658      	mov	r0, fp
 8008f9c:	f000 fa9a 	bl	80094d4 <__multadd>
 8008fa0:	4601      	mov	r1, r0
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	4648      	mov	r0, r9
 8008fa6:	f000 fcf7 	bl	8009998 <__mcmp>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f77f aeb3 	ble.w	8008d16 <_dtoa_r+0x68e>
 8008fb0:	4656      	mov	r6, sl
 8008fb2:	2331      	movs	r3, #49	@ 0x31
 8008fb4:	f806 3b01 	strb.w	r3, [r6], #1
 8008fb8:	9b04      	ldr	r3, [sp, #16]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	e6ae      	b.n	8008d1e <_dtoa_r+0x696>
 8008fc0:	9c07      	ldr	r4, [sp, #28]
 8008fc2:	9704      	str	r7, [sp, #16]
 8008fc4:	4625      	mov	r5, r4
 8008fc6:	e7f3      	b.n	8008fb0 <_dtoa_r+0x928>
 8008fc8:	9b07      	ldr	r3, [sp, #28]
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	f000 8104 	beq.w	80091dc <_dtoa_r+0xb54>
 8008fd4:	2e00      	cmp	r6, #0
 8008fd6:	dd05      	ble.n	8008fe4 <_dtoa_r+0x95c>
 8008fd8:	4629      	mov	r1, r5
 8008fda:	4632      	mov	r2, r6
 8008fdc:	4658      	mov	r0, fp
 8008fde:	f000 fc6f 	bl	80098c0 <__lshift>
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d05a      	beq.n	80090a0 <_dtoa_r+0xa18>
 8008fea:	6869      	ldr	r1, [r5, #4]
 8008fec:	4658      	mov	r0, fp
 8008fee:	f000 fa0f 	bl	8009410 <_Balloc>
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	b928      	cbnz	r0, 8009002 <_dtoa_r+0x97a>
 8008ff6:	4b84      	ldr	r3, [pc, #528]	@ (8009208 <_dtoa_r+0xb80>)
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ffe:	f7ff bb5a 	b.w	80086b6 <_dtoa_r+0x2e>
 8009002:	692a      	ldr	r2, [r5, #16]
 8009004:	3202      	adds	r2, #2
 8009006:	0092      	lsls	r2, r2, #2
 8009008:	f105 010c 	add.w	r1, r5, #12
 800900c:	300c      	adds	r0, #12
 800900e:	f002 f93b 	bl	800b288 <memcpy>
 8009012:	2201      	movs	r2, #1
 8009014:	4631      	mov	r1, r6
 8009016:	4658      	mov	r0, fp
 8009018:	f000 fc52 	bl	80098c0 <__lshift>
 800901c:	f10a 0301 	add.w	r3, sl, #1
 8009020:	9307      	str	r3, [sp, #28]
 8009022:	9b00      	ldr	r3, [sp, #0]
 8009024:	4453      	add	r3, sl
 8009026:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009028:	9b02      	ldr	r3, [sp, #8]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	462f      	mov	r7, r5
 8009030:	930a      	str	r3, [sp, #40]	@ 0x28
 8009032:	4605      	mov	r5, r0
 8009034:	9b07      	ldr	r3, [sp, #28]
 8009036:	4621      	mov	r1, r4
 8009038:	3b01      	subs	r3, #1
 800903a:	4648      	mov	r0, r9
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	f7ff fa99 	bl	8008574 <quorem>
 8009042:	4639      	mov	r1, r7
 8009044:	9002      	str	r0, [sp, #8]
 8009046:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800904a:	4648      	mov	r0, r9
 800904c:	f000 fca4 	bl	8009998 <__mcmp>
 8009050:	462a      	mov	r2, r5
 8009052:	9008      	str	r0, [sp, #32]
 8009054:	4621      	mov	r1, r4
 8009056:	4658      	mov	r0, fp
 8009058:	f000 fcba 	bl	80099d0 <__mdiff>
 800905c:	68c2      	ldr	r2, [r0, #12]
 800905e:	4606      	mov	r6, r0
 8009060:	bb02      	cbnz	r2, 80090a4 <_dtoa_r+0xa1c>
 8009062:	4601      	mov	r1, r0
 8009064:	4648      	mov	r0, r9
 8009066:	f000 fc97 	bl	8009998 <__mcmp>
 800906a:	4602      	mov	r2, r0
 800906c:	4631      	mov	r1, r6
 800906e:	4658      	mov	r0, fp
 8009070:	920e      	str	r2, [sp, #56]	@ 0x38
 8009072:	f000 fa0d 	bl	8009490 <_Bfree>
 8009076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009078:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800907a:	9e07      	ldr	r6, [sp, #28]
 800907c:	ea43 0102 	orr.w	r1, r3, r2
 8009080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009082:	4319      	orrs	r1, r3
 8009084:	d110      	bne.n	80090a8 <_dtoa_r+0xa20>
 8009086:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800908a:	d029      	beq.n	80090e0 <_dtoa_r+0xa58>
 800908c:	9b08      	ldr	r3, [sp, #32]
 800908e:	2b00      	cmp	r3, #0
 8009090:	dd02      	ble.n	8009098 <_dtoa_r+0xa10>
 8009092:	9b02      	ldr	r3, [sp, #8]
 8009094:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009098:	9b00      	ldr	r3, [sp, #0]
 800909a:	f883 8000 	strb.w	r8, [r3]
 800909e:	e63f      	b.n	8008d20 <_dtoa_r+0x698>
 80090a0:	4628      	mov	r0, r5
 80090a2:	e7bb      	b.n	800901c <_dtoa_r+0x994>
 80090a4:	2201      	movs	r2, #1
 80090a6:	e7e1      	b.n	800906c <_dtoa_r+0x9e4>
 80090a8:	9b08      	ldr	r3, [sp, #32]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	db04      	blt.n	80090b8 <_dtoa_r+0xa30>
 80090ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090b0:	430b      	orrs	r3, r1
 80090b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090b4:	430b      	orrs	r3, r1
 80090b6:	d120      	bne.n	80090fa <_dtoa_r+0xa72>
 80090b8:	2a00      	cmp	r2, #0
 80090ba:	dded      	ble.n	8009098 <_dtoa_r+0xa10>
 80090bc:	4649      	mov	r1, r9
 80090be:	2201      	movs	r2, #1
 80090c0:	4658      	mov	r0, fp
 80090c2:	f000 fbfd 	bl	80098c0 <__lshift>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4681      	mov	r9, r0
 80090ca:	f000 fc65 	bl	8009998 <__mcmp>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	dc03      	bgt.n	80090da <_dtoa_r+0xa52>
 80090d2:	d1e1      	bne.n	8009098 <_dtoa_r+0xa10>
 80090d4:	f018 0f01 	tst.w	r8, #1
 80090d8:	d0de      	beq.n	8009098 <_dtoa_r+0xa10>
 80090da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80090de:	d1d8      	bne.n	8009092 <_dtoa_r+0xa0a>
 80090e0:	9a00      	ldr	r2, [sp, #0]
 80090e2:	2339      	movs	r3, #57	@ 0x39
 80090e4:	7013      	strb	r3, [r2, #0]
 80090e6:	4633      	mov	r3, r6
 80090e8:	461e      	mov	r6, r3
 80090ea:	3b01      	subs	r3, #1
 80090ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80090f0:	2a39      	cmp	r2, #57	@ 0x39
 80090f2:	d052      	beq.n	800919a <_dtoa_r+0xb12>
 80090f4:	3201      	adds	r2, #1
 80090f6:	701a      	strb	r2, [r3, #0]
 80090f8:	e612      	b.n	8008d20 <_dtoa_r+0x698>
 80090fa:	2a00      	cmp	r2, #0
 80090fc:	dd07      	ble.n	800910e <_dtoa_r+0xa86>
 80090fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009102:	d0ed      	beq.n	80090e0 <_dtoa_r+0xa58>
 8009104:	9a00      	ldr	r2, [sp, #0]
 8009106:	f108 0301 	add.w	r3, r8, #1
 800910a:	7013      	strb	r3, [r2, #0]
 800910c:	e608      	b.n	8008d20 <_dtoa_r+0x698>
 800910e:	9b07      	ldr	r3, [sp, #28]
 8009110:	9a07      	ldr	r2, [sp, #28]
 8009112:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009118:	4293      	cmp	r3, r2
 800911a:	d028      	beq.n	800916e <_dtoa_r+0xae6>
 800911c:	4649      	mov	r1, r9
 800911e:	2300      	movs	r3, #0
 8009120:	220a      	movs	r2, #10
 8009122:	4658      	mov	r0, fp
 8009124:	f000 f9d6 	bl	80094d4 <__multadd>
 8009128:	42af      	cmp	r7, r5
 800912a:	4681      	mov	r9, r0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	f04f 020a 	mov.w	r2, #10
 8009134:	4639      	mov	r1, r7
 8009136:	4658      	mov	r0, fp
 8009138:	d107      	bne.n	800914a <_dtoa_r+0xac2>
 800913a:	f000 f9cb 	bl	80094d4 <__multadd>
 800913e:	4607      	mov	r7, r0
 8009140:	4605      	mov	r5, r0
 8009142:	9b07      	ldr	r3, [sp, #28]
 8009144:	3301      	adds	r3, #1
 8009146:	9307      	str	r3, [sp, #28]
 8009148:	e774      	b.n	8009034 <_dtoa_r+0x9ac>
 800914a:	f000 f9c3 	bl	80094d4 <__multadd>
 800914e:	4629      	mov	r1, r5
 8009150:	4607      	mov	r7, r0
 8009152:	2300      	movs	r3, #0
 8009154:	220a      	movs	r2, #10
 8009156:	4658      	mov	r0, fp
 8009158:	f000 f9bc 	bl	80094d4 <__multadd>
 800915c:	4605      	mov	r5, r0
 800915e:	e7f0      	b.n	8009142 <_dtoa_r+0xaba>
 8009160:	9b00      	ldr	r3, [sp, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	bfcc      	ite	gt
 8009166:	461e      	movgt	r6, r3
 8009168:	2601      	movle	r6, #1
 800916a:	4456      	add	r6, sl
 800916c:	2700      	movs	r7, #0
 800916e:	4649      	mov	r1, r9
 8009170:	2201      	movs	r2, #1
 8009172:	4658      	mov	r0, fp
 8009174:	f000 fba4 	bl	80098c0 <__lshift>
 8009178:	4621      	mov	r1, r4
 800917a:	4681      	mov	r9, r0
 800917c:	f000 fc0c 	bl	8009998 <__mcmp>
 8009180:	2800      	cmp	r0, #0
 8009182:	dcb0      	bgt.n	80090e6 <_dtoa_r+0xa5e>
 8009184:	d102      	bne.n	800918c <_dtoa_r+0xb04>
 8009186:	f018 0f01 	tst.w	r8, #1
 800918a:	d1ac      	bne.n	80090e6 <_dtoa_r+0xa5e>
 800918c:	4633      	mov	r3, r6
 800918e:	461e      	mov	r6, r3
 8009190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009194:	2a30      	cmp	r2, #48	@ 0x30
 8009196:	d0fa      	beq.n	800918e <_dtoa_r+0xb06>
 8009198:	e5c2      	b.n	8008d20 <_dtoa_r+0x698>
 800919a:	459a      	cmp	sl, r3
 800919c:	d1a4      	bne.n	80090e8 <_dtoa_r+0xa60>
 800919e:	9b04      	ldr	r3, [sp, #16]
 80091a0:	3301      	adds	r3, #1
 80091a2:	9304      	str	r3, [sp, #16]
 80091a4:	2331      	movs	r3, #49	@ 0x31
 80091a6:	f88a 3000 	strb.w	r3, [sl]
 80091aa:	e5b9      	b.n	8008d20 <_dtoa_r+0x698>
 80091ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800920c <_dtoa_r+0xb84>
 80091b2:	b11b      	cbz	r3, 80091bc <_dtoa_r+0xb34>
 80091b4:	f10a 0308 	add.w	r3, sl, #8
 80091b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80091ba:	6013      	str	r3, [r2, #0]
 80091bc:	4650      	mov	r0, sl
 80091be:	b019      	add	sp, #100	@ 0x64
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	f77f ae37 	ble.w	8008e3a <_dtoa_r+0x7b2>
 80091cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80091d0:	2001      	movs	r0, #1
 80091d2:	e655      	b.n	8008e80 <_dtoa_r+0x7f8>
 80091d4:	9b00      	ldr	r3, [sp, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f77f aed6 	ble.w	8008f88 <_dtoa_r+0x900>
 80091dc:	4656      	mov	r6, sl
 80091de:	4621      	mov	r1, r4
 80091e0:	4648      	mov	r0, r9
 80091e2:	f7ff f9c7 	bl	8008574 <quorem>
 80091e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80091ea:	f806 8b01 	strb.w	r8, [r6], #1
 80091ee:	9b00      	ldr	r3, [sp, #0]
 80091f0:	eba6 020a 	sub.w	r2, r6, sl
 80091f4:	4293      	cmp	r3, r2
 80091f6:	ddb3      	ble.n	8009160 <_dtoa_r+0xad8>
 80091f8:	4649      	mov	r1, r9
 80091fa:	2300      	movs	r3, #0
 80091fc:	220a      	movs	r2, #10
 80091fe:	4658      	mov	r0, fp
 8009200:	f000 f968 	bl	80094d4 <__multadd>
 8009204:	4681      	mov	r9, r0
 8009206:	e7ea      	b.n	80091de <_dtoa_r+0xb56>
 8009208:	0800bcf1 	.word	0x0800bcf1
 800920c:	0800bc75 	.word	0x0800bc75

08009210 <_free_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4605      	mov	r5, r0
 8009214:	2900      	cmp	r1, #0
 8009216:	d041      	beq.n	800929c <_free_r+0x8c>
 8009218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800921c:	1f0c      	subs	r4, r1, #4
 800921e:	2b00      	cmp	r3, #0
 8009220:	bfb8      	it	lt
 8009222:	18e4      	addlt	r4, r4, r3
 8009224:	f000 f8e8 	bl	80093f8 <__malloc_lock>
 8009228:	4a1d      	ldr	r2, [pc, #116]	@ (80092a0 <_free_r+0x90>)
 800922a:	6813      	ldr	r3, [r2, #0]
 800922c:	b933      	cbnz	r3, 800923c <_free_r+0x2c>
 800922e:	6063      	str	r3, [r4, #4]
 8009230:	6014      	str	r4, [r2, #0]
 8009232:	4628      	mov	r0, r5
 8009234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009238:	f000 b8e4 	b.w	8009404 <__malloc_unlock>
 800923c:	42a3      	cmp	r3, r4
 800923e:	d908      	bls.n	8009252 <_free_r+0x42>
 8009240:	6820      	ldr	r0, [r4, #0]
 8009242:	1821      	adds	r1, r4, r0
 8009244:	428b      	cmp	r3, r1
 8009246:	bf01      	itttt	eq
 8009248:	6819      	ldreq	r1, [r3, #0]
 800924a:	685b      	ldreq	r3, [r3, #4]
 800924c:	1809      	addeq	r1, r1, r0
 800924e:	6021      	streq	r1, [r4, #0]
 8009250:	e7ed      	b.n	800922e <_free_r+0x1e>
 8009252:	461a      	mov	r2, r3
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	b10b      	cbz	r3, 800925c <_free_r+0x4c>
 8009258:	42a3      	cmp	r3, r4
 800925a:	d9fa      	bls.n	8009252 <_free_r+0x42>
 800925c:	6811      	ldr	r1, [r2, #0]
 800925e:	1850      	adds	r0, r2, r1
 8009260:	42a0      	cmp	r0, r4
 8009262:	d10b      	bne.n	800927c <_free_r+0x6c>
 8009264:	6820      	ldr	r0, [r4, #0]
 8009266:	4401      	add	r1, r0
 8009268:	1850      	adds	r0, r2, r1
 800926a:	4283      	cmp	r3, r0
 800926c:	6011      	str	r1, [r2, #0]
 800926e:	d1e0      	bne.n	8009232 <_free_r+0x22>
 8009270:	6818      	ldr	r0, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	6053      	str	r3, [r2, #4]
 8009276:	4408      	add	r0, r1
 8009278:	6010      	str	r0, [r2, #0]
 800927a:	e7da      	b.n	8009232 <_free_r+0x22>
 800927c:	d902      	bls.n	8009284 <_free_r+0x74>
 800927e:	230c      	movs	r3, #12
 8009280:	602b      	str	r3, [r5, #0]
 8009282:	e7d6      	b.n	8009232 <_free_r+0x22>
 8009284:	6820      	ldr	r0, [r4, #0]
 8009286:	1821      	adds	r1, r4, r0
 8009288:	428b      	cmp	r3, r1
 800928a:	bf04      	itt	eq
 800928c:	6819      	ldreq	r1, [r3, #0]
 800928e:	685b      	ldreq	r3, [r3, #4]
 8009290:	6063      	str	r3, [r4, #4]
 8009292:	bf04      	itt	eq
 8009294:	1809      	addeq	r1, r1, r0
 8009296:	6021      	streq	r1, [r4, #0]
 8009298:	6054      	str	r4, [r2, #4]
 800929a:	e7ca      	b.n	8009232 <_free_r+0x22>
 800929c:	bd38      	pop	{r3, r4, r5, pc}
 800929e:	bf00      	nop
 80092a0:	20000650 	.word	0x20000650

080092a4 <malloc>:
 80092a4:	4b02      	ldr	r3, [pc, #8]	@ (80092b0 <malloc+0xc>)
 80092a6:	4601      	mov	r1, r0
 80092a8:	6818      	ldr	r0, [r3, #0]
 80092aa:	f000 b825 	b.w	80092f8 <_malloc_r>
 80092ae:	bf00      	nop
 80092b0:	20000018 	.word	0x20000018

080092b4 <sbrk_aligned>:
 80092b4:	b570      	push	{r4, r5, r6, lr}
 80092b6:	4e0f      	ldr	r6, [pc, #60]	@ (80092f4 <sbrk_aligned+0x40>)
 80092b8:	460c      	mov	r4, r1
 80092ba:	6831      	ldr	r1, [r6, #0]
 80092bc:	4605      	mov	r5, r0
 80092be:	b911      	cbnz	r1, 80092c6 <sbrk_aligned+0x12>
 80092c0:	f001 ffd2 	bl	800b268 <_sbrk_r>
 80092c4:	6030      	str	r0, [r6, #0]
 80092c6:	4621      	mov	r1, r4
 80092c8:	4628      	mov	r0, r5
 80092ca:	f001 ffcd 	bl	800b268 <_sbrk_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	d103      	bne.n	80092da <sbrk_aligned+0x26>
 80092d2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80092d6:	4620      	mov	r0, r4
 80092d8:	bd70      	pop	{r4, r5, r6, pc}
 80092da:	1cc4      	adds	r4, r0, #3
 80092dc:	f024 0403 	bic.w	r4, r4, #3
 80092e0:	42a0      	cmp	r0, r4
 80092e2:	d0f8      	beq.n	80092d6 <sbrk_aligned+0x22>
 80092e4:	1a21      	subs	r1, r4, r0
 80092e6:	4628      	mov	r0, r5
 80092e8:	f001 ffbe 	bl	800b268 <_sbrk_r>
 80092ec:	3001      	adds	r0, #1
 80092ee:	d1f2      	bne.n	80092d6 <sbrk_aligned+0x22>
 80092f0:	e7ef      	b.n	80092d2 <sbrk_aligned+0x1e>
 80092f2:	bf00      	nop
 80092f4:	2000064c 	.word	0x2000064c

080092f8 <_malloc_r>:
 80092f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092fc:	1ccd      	adds	r5, r1, #3
 80092fe:	f025 0503 	bic.w	r5, r5, #3
 8009302:	3508      	adds	r5, #8
 8009304:	2d0c      	cmp	r5, #12
 8009306:	bf38      	it	cc
 8009308:	250c      	movcc	r5, #12
 800930a:	2d00      	cmp	r5, #0
 800930c:	4606      	mov	r6, r0
 800930e:	db01      	blt.n	8009314 <_malloc_r+0x1c>
 8009310:	42a9      	cmp	r1, r5
 8009312:	d904      	bls.n	800931e <_malloc_r+0x26>
 8009314:	230c      	movs	r3, #12
 8009316:	6033      	str	r3, [r6, #0]
 8009318:	2000      	movs	r0, #0
 800931a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800931e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093f4 <_malloc_r+0xfc>
 8009322:	f000 f869 	bl	80093f8 <__malloc_lock>
 8009326:	f8d8 3000 	ldr.w	r3, [r8]
 800932a:	461c      	mov	r4, r3
 800932c:	bb44      	cbnz	r4, 8009380 <_malloc_r+0x88>
 800932e:	4629      	mov	r1, r5
 8009330:	4630      	mov	r0, r6
 8009332:	f7ff ffbf 	bl	80092b4 <sbrk_aligned>
 8009336:	1c43      	adds	r3, r0, #1
 8009338:	4604      	mov	r4, r0
 800933a:	d158      	bne.n	80093ee <_malloc_r+0xf6>
 800933c:	f8d8 4000 	ldr.w	r4, [r8]
 8009340:	4627      	mov	r7, r4
 8009342:	2f00      	cmp	r7, #0
 8009344:	d143      	bne.n	80093ce <_malloc_r+0xd6>
 8009346:	2c00      	cmp	r4, #0
 8009348:	d04b      	beq.n	80093e2 <_malloc_r+0xea>
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	4639      	mov	r1, r7
 800934e:	4630      	mov	r0, r6
 8009350:	eb04 0903 	add.w	r9, r4, r3
 8009354:	f001 ff88 	bl	800b268 <_sbrk_r>
 8009358:	4581      	cmp	r9, r0
 800935a:	d142      	bne.n	80093e2 <_malloc_r+0xea>
 800935c:	6821      	ldr	r1, [r4, #0]
 800935e:	1a6d      	subs	r5, r5, r1
 8009360:	4629      	mov	r1, r5
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff ffa6 	bl	80092b4 <sbrk_aligned>
 8009368:	3001      	adds	r0, #1
 800936a:	d03a      	beq.n	80093e2 <_malloc_r+0xea>
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	442b      	add	r3, r5
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	f8d8 3000 	ldr.w	r3, [r8]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	bb62      	cbnz	r2, 80093d4 <_malloc_r+0xdc>
 800937a:	f8c8 7000 	str.w	r7, [r8]
 800937e:	e00f      	b.n	80093a0 <_malloc_r+0xa8>
 8009380:	6822      	ldr	r2, [r4, #0]
 8009382:	1b52      	subs	r2, r2, r5
 8009384:	d420      	bmi.n	80093c8 <_malloc_r+0xd0>
 8009386:	2a0b      	cmp	r2, #11
 8009388:	d917      	bls.n	80093ba <_malloc_r+0xc2>
 800938a:	1961      	adds	r1, r4, r5
 800938c:	42a3      	cmp	r3, r4
 800938e:	6025      	str	r5, [r4, #0]
 8009390:	bf18      	it	ne
 8009392:	6059      	strne	r1, [r3, #4]
 8009394:	6863      	ldr	r3, [r4, #4]
 8009396:	bf08      	it	eq
 8009398:	f8c8 1000 	streq.w	r1, [r8]
 800939c:	5162      	str	r2, [r4, r5]
 800939e:	604b      	str	r3, [r1, #4]
 80093a0:	4630      	mov	r0, r6
 80093a2:	f000 f82f 	bl	8009404 <__malloc_unlock>
 80093a6:	f104 000b 	add.w	r0, r4, #11
 80093aa:	1d23      	adds	r3, r4, #4
 80093ac:	f020 0007 	bic.w	r0, r0, #7
 80093b0:	1ac2      	subs	r2, r0, r3
 80093b2:	bf1c      	itt	ne
 80093b4:	1a1b      	subne	r3, r3, r0
 80093b6:	50a3      	strne	r3, [r4, r2]
 80093b8:	e7af      	b.n	800931a <_malloc_r+0x22>
 80093ba:	6862      	ldr	r2, [r4, #4]
 80093bc:	42a3      	cmp	r3, r4
 80093be:	bf0c      	ite	eq
 80093c0:	f8c8 2000 	streq.w	r2, [r8]
 80093c4:	605a      	strne	r2, [r3, #4]
 80093c6:	e7eb      	b.n	80093a0 <_malloc_r+0xa8>
 80093c8:	4623      	mov	r3, r4
 80093ca:	6864      	ldr	r4, [r4, #4]
 80093cc:	e7ae      	b.n	800932c <_malloc_r+0x34>
 80093ce:	463c      	mov	r4, r7
 80093d0:	687f      	ldr	r7, [r7, #4]
 80093d2:	e7b6      	b.n	8009342 <_malloc_r+0x4a>
 80093d4:	461a      	mov	r2, r3
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	42a3      	cmp	r3, r4
 80093da:	d1fb      	bne.n	80093d4 <_malloc_r+0xdc>
 80093dc:	2300      	movs	r3, #0
 80093de:	6053      	str	r3, [r2, #4]
 80093e0:	e7de      	b.n	80093a0 <_malloc_r+0xa8>
 80093e2:	230c      	movs	r3, #12
 80093e4:	6033      	str	r3, [r6, #0]
 80093e6:	4630      	mov	r0, r6
 80093e8:	f000 f80c 	bl	8009404 <__malloc_unlock>
 80093ec:	e794      	b.n	8009318 <_malloc_r+0x20>
 80093ee:	6005      	str	r5, [r0, #0]
 80093f0:	e7d6      	b.n	80093a0 <_malloc_r+0xa8>
 80093f2:	bf00      	nop
 80093f4:	20000650 	.word	0x20000650

080093f8 <__malloc_lock>:
 80093f8:	4801      	ldr	r0, [pc, #4]	@ (8009400 <__malloc_lock+0x8>)
 80093fa:	f7ff b8b2 	b.w	8008562 <__retarget_lock_acquire_recursive>
 80093fe:	bf00      	nop
 8009400:	20000648 	.word	0x20000648

08009404 <__malloc_unlock>:
 8009404:	4801      	ldr	r0, [pc, #4]	@ (800940c <__malloc_unlock+0x8>)
 8009406:	f7ff b8ad 	b.w	8008564 <__retarget_lock_release_recursive>
 800940a:	bf00      	nop
 800940c:	20000648 	.word	0x20000648

08009410 <_Balloc>:
 8009410:	b570      	push	{r4, r5, r6, lr}
 8009412:	69c6      	ldr	r6, [r0, #28]
 8009414:	4604      	mov	r4, r0
 8009416:	460d      	mov	r5, r1
 8009418:	b976      	cbnz	r6, 8009438 <_Balloc+0x28>
 800941a:	2010      	movs	r0, #16
 800941c:	f7ff ff42 	bl	80092a4 <malloc>
 8009420:	4602      	mov	r2, r0
 8009422:	61e0      	str	r0, [r4, #28]
 8009424:	b920      	cbnz	r0, 8009430 <_Balloc+0x20>
 8009426:	4b18      	ldr	r3, [pc, #96]	@ (8009488 <_Balloc+0x78>)
 8009428:	4818      	ldr	r0, [pc, #96]	@ (800948c <_Balloc+0x7c>)
 800942a:	216b      	movs	r1, #107	@ 0x6b
 800942c:	f001 ff44 	bl	800b2b8 <__assert_func>
 8009430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009434:	6006      	str	r6, [r0, #0]
 8009436:	60c6      	str	r6, [r0, #12]
 8009438:	69e6      	ldr	r6, [r4, #28]
 800943a:	68f3      	ldr	r3, [r6, #12]
 800943c:	b183      	cbz	r3, 8009460 <_Balloc+0x50>
 800943e:	69e3      	ldr	r3, [r4, #28]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009446:	b9b8      	cbnz	r0, 8009478 <_Balloc+0x68>
 8009448:	2101      	movs	r1, #1
 800944a:	fa01 f605 	lsl.w	r6, r1, r5
 800944e:	1d72      	adds	r2, r6, #5
 8009450:	0092      	lsls	r2, r2, #2
 8009452:	4620      	mov	r0, r4
 8009454:	f001 ff4e 	bl	800b2f4 <_calloc_r>
 8009458:	b160      	cbz	r0, 8009474 <_Balloc+0x64>
 800945a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800945e:	e00e      	b.n	800947e <_Balloc+0x6e>
 8009460:	2221      	movs	r2, #33	@ 0x21
 8009462:	2104      	movs	r1, #4
 8009464:	4620      	mov	r0, r4
 8009466:	f001 ff45 	bl	800b2f4 <_calloc_r>
 800946a:	69e3      	ldr	r3, [r4, #28]
 800946c:	60f0      	str	r0, [r6, #12]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e4      	bne.n	800943e <_Balloc+0x2e>
 8009474:	2000      	movs	r0, #0
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	6802      	ldr	r2, [r0, #0]
 800947a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800947e:	2300      	movs	r3, #0
 8009480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009484:	e7f7      	b.n	8009476 <_Balloc+0x66>
 8009486:	bf00      	nop
 8009488:	0800bc82 	.word	0x0800bc82
 800948c:	0800bd02 	.word	0x0800bd02

08009490 <_Bfree>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	69c6      	ldr	r6, [r0, #28]
 8009494:	4605      	mov	r5, r0
 8009496:	460c      	mov	r4, r1
 8009498:	b976      	cbnz	r6, 80094b8 <_Bfree+0x28>
 800949a:	2010      	movs	r0, #16
 800949c:	f7ff ff02 	bl	80092a4 <malloc>
 80094a0:	4602      	mov	r2, r0
 80094a2:	61e8      	str	r0, [r5, #28]
 80094a4:	b920      	cbnz	r0, 80094b0 <_Bfree+0x20>
 80094a6:	4b09      	ldr	r3, [pc, #36]	@ (80094cc <_Bfree+0x3c>)
 80094a8:	4809      	ldr	r0, [pc, #36]	@ (80094d0 <_Bfree+0x40>)
 80094aa:	218f      	movs	r1, #143	@ 0x8f
 80094ac:	f001 ff04 	bl	800b2b8 <__assert_func>
 80094b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094b4:	6006      	str	r6, [r0, #0]
 80094b6:	60c6      	str	r6, [r0, #12]
 80094b8:	b13c      	cbz	r4, 80094ca <_Bfree+0x3a>
 80094ba:	69eb      	ldr	r3, [r5, #28]
 80094bc:	6862      	ldr	r2, [r4, #4]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094c4:	6021      	str	r1, [r4, #0]
 80094c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094ca:	bd70      	pop	{r4, r5, r6, pc}
 80094cc:	0800bc82 	.word	0x0800bc82
 80094d0:	0800bd02 	.word	0x0800bd02

080094d4 <__multadd>:
 80094d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d8:	690d      	ldr	r5, [r1, #16]
 80094da:	4607      	mov	r7, r0
 80094dc:	460c      	mov	r4, r1
 80094de:	461e      	mov	r6, r3
 80094e0:	f101 0c14 	add.w	ip, r1, #20
 80094e4:	2000      	movs	r0, #0
 80094e6:	f8dc 3000 	ldr.w	r3, [ip]
 80094ea:	b299      	uxth	r1, r3
 80094ec:	fb02 6101 	mla	r1, r2, r1, r6
 80094f0:	0c1e      	lsrs	r6, r3, #16
 80094f2:	0c0b      	lsrs	r3, r1, #16
 80094f4:	fb02 3306 	mla	r3, r2, r6, r3
 80094f8:	b289      	uxth	r1, r1
 80094fa:	3001      	adds	r0, #1
 80094fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009500:	4285      	cmp	r5, r0
 8009502:	f84c 1b04 	str.w	r1, [ip], #4
 8009506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800950a:	dcec      	bgt.n	80094e6 <__multadd+0x12>
 800950c:	b30e      	cbz	r6, 8009552 <__multadd+0x7e>
 800950e:	68a3      	ldr	r3, [r4, #8]
 8009510:	42ab      	cmp	r3, r5
 8009512:	dc19      	bgt.n	8009548 <__multadd+0x74>
 8009514:	6861      	ldr	r1, [r4, #4]
 8009516:	4638      	mov	r0, r7
 8009518:	3101      	adds	r1, #1
 800951a:	f7ff ff79 	bl	8009410 <_Balloc>
 800951e:	4680      	mov	r8, r0
 8009520:	b928      	cbnz	r0, 800952e <__multadd+0x5a>
 8009522:	4602      	mov	r2, r0
 8009524:	4b0c      	ldr	r3, [pc, #48]	@ (8009558 <__multadd+0x84>)
 8009526:	480d      	ldr	r0, [pc, #52]	@ (800955c <__multadd+0x88>)
 8009528:	21ba      	movs	r1, #186	@ 0xba
 800952a:	f001 fec5 	bl	800b2b8 <__assert_func>
 800952e:	6922      	ldr	r2, [r4, #16]
 8009530:	3202      	adds	r2, #2
 8009532:	f104 010c 	add.w	r1, r4, #12
 8009536:	0092      	lsls	r2, r2, #2
 8009538:	300c      	adds	r0, #12
 800953a:	f001 fea5 	bl	800b288 <memcpy>
 800953e:	4621      	mov	r1, r4
 8009540:	4638      	mov	r0, r7
 8009542:	f7ff ffa5 	bl	8009490 <_Bfree>
 8009546:	4644      	mov	r4, r8
 8009548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800954c:	3501      	adds	r5, #1
 800954e:	615e      	str	r6, [r3, #20]
 8009550:	6125      	str	r5, [r4, #16]
 8009552:	4620      	mov	r0, r4
 8009554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009558:	0800bcf1 	.word	0x0800bcf1
 800955c:	0800bd02 	.word	0x0800bd02

08009560 <__s2b>:
 8009560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009564:	460c      	mov	r4, r1
 8009566:	4615      	mov	r5, r2
 8009568:	461f      	mov	r7, r3
 800956a:	2209      	movs	r2, #9
 800956c:	3308      	adds	r3, #8
 800956e:	4606      	mov	r6, r0
 8009570:	fb93 f3f2 	sdiv	r3, r3, r2
 8009574:	2100      	movs	r1, #0
 8009576:	2201      	movs	r2, #1
 8009578:	429a      	cmp	r2, r3
 800957a:	db09      	blt.n	8009590 <__s2b+0x30>
 800957c:	4630      	mov	r0, r6
 800957e:	f7ff ff47 	bl	8009410 <_Balloc>
 8009582:	b940      	cbnz	r0, 8009596 <__s2b+0x36>
 8009584:	4602      	mov	r2, r0
 8009586:	4b19      	ldr	r3, [pc, #100]	@ (80095ec <__s2b+0x8c>)
 8009588:	4819      	ldr	r0, [pc, #100]	@ (80095f0 <__s2b+0x90>)
 800958a:	21d3      	movs	r1, #211	@ 0xd3
 800958c:	f001 fe94 	bl	800b2b8 <__assert_func>
 8009590:	0052      	lsls	r2, r2, #1
 8009592:	3101      	adds	r1, #1
 8009594:	e7f0      	b.n	8009578 <__s2b+0x18>
 8009596:	9b08      	ldr	r3, [sp, #32]
 8009598:	6143      	str	r3, [r0, #20]
 800959a:	2d09      	cmp	r5, #9
 800959c:	f04f 0301 	mov.w	r3, #1
 80095a0:	6103      	str	r3, [r0, #16]
 80095a2:	dd16      	ble.n	80095d2 <__s2b+0x72>
 80095a4:	f104 0909 	add.w	r9, r4, #9
 80095a8:	46c8      	mov	r8, r9
 80095aa:	442c      	add	r4, r5
 80095ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095b0:	4601      	mov	r1, r0
 80095b2:	3b30      	subs	r3, #48	@ 0x30
 80095b4:	220a      	movs	r2, #10
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7ff ff8c 	bl	80094d4 <__multadd>
 80095bc:	45a0      	cmp	r8, r4
 80095be:	d1f5      	bne.n	80095ac <__s2b+0x4c>
 80095c0:	f1a5 0408 	sub.w	r4, r5, #8
 80095c4:	444c      	add	r4, r9
 80095c6:	1b2d      	subs	r5, r5, r4
 80095c8:	1963      	adds	r3, r4, r5
 80095ca:	42bb      	cmp	r3, r7
 80095cc:	db04      	blt.n	80095d8 <__s2b+0x78>
 80095ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095d2:	340a      	adds	r4, #10
 80095d4:	2509      	movs	r5, #9
 80095d6:	e7f6      	b.n	80095c6 <__s2b+0x66>
 80095d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095dc:	4601      	mov	r1, r0
 80095de:	3b30      	subs	r3, #48	@ 0x30
 80095e0:	220a      	movs	r2, #10
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7ff ff76 	bl	80094d4 <__multadd>
 80095e8:	e7ee      	b.n	80095c8 <__s2b+0x68>
 80095ea:	bf00      	nop
 80095ec:	0800bcf1 	.word	0x0800bcf1
 80095f0:	0800bd02 	.word	0x0800bd02

080095f4 <__hi0bits>:
 80095f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80095f8:	4603      	mov	r3, r0
 80095fa:	bf36      	itet	cc
 80095fc:	0403      	lslcc	r3, r0, #16
 80095fe:	2000      	movcs	r0, #0
 8009600:	2010      	movcc	r0, #16
 8009602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009606:	bf3c      	itt	cc
 8009608:	021b      	lslcc	r3, r3, #8
 800960a:	3008      	addcc	r0, #8
 800960c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009610:	bf3c      	itt	cc
 8009612:	011b      	lslcc	r3, r3, #4
 8009614:	3004      	addcc	r0, #4
 8009616:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800961a:	bf3c      	itt	cc
 800961c:	009b      	lslcc	r3, r3, #2
 800961e:	3002      	addcc	r0, #2
 8009620:	2b00      	cmp	r3, #0
 8009622:	db05      	blt.n	8009630 <__hi0bits+0x3c>
 8009624:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009628:	f100 0001 	add.w	r0, r0, #1
 800962c:	bf08      	it	eq
 800962e:	2020      	moveq	r0, #32
 8009630:	4770      	bx	lr

08009632 <__lo0bits>:
 8009632:	6803      	ldr	r3, [r0, #0]
 8009634:	4602      	mov	r2, r0
 8009636:	f013 0007 	ands.w	r0, r3, #7
 800963a:	d00b      	beq.n	8009654 <__lo0bits+0x22>
 800963c:	07d9      	lsls	r1, r3, #31
 800963e:	d421      	bmi.n	8009684 <__lo0bits+0x52>
 8009640:	0798      	lsls	r0, r3, #30
 8009642:	bf49      	itett	mi
 8009644:	085b      	lsrmi	r3, r3, #1
 8009646:	089b      	lsrpl	r3, r3, #2
 8009648:	2001      	movmi	r0, #1
 800964a:	6013      	strmi	r3, [r2, #0]
 800964c:	bf5c      	itt	pl
 800964e:	6013      	strpl	r3, [r2, #0]
 8009650:	2002      	movpl	r0, #2
 8009652:	4770      	bx	lr
 8009654:	b299      	uxth	r1, r3
 8009656:	b909      	cbnz	r1, 800965c <__lo0bits+0x2a>
 8009658:	0c1b      	lsrs	r3, r3, #16
 800965a:	2010      	movs	r0, #16
 800965c:	b2d9      	uxtb	r1, r3
 800965e:	b909      	cbnz	r1, 8009664 <__lo0bits+0x32>
 8009660:	3008      	adds	r0, #8
 8009662:	0a1b      	lsrs	r3, r3, #8
 8009664:	0719      	lsls	r1, r3, #28
 8009666:	bf04      	itt	eq
 8009668:	091b      	lsreq	r3, r3, #4
 800966a:	3004      	addeq	r0, #4
 800966c:	0799      	lsls	r1, r3, #30
 800966e:	bf04      	itt	eq
 8009670:	089b      	lsreq	r3, r3, #2
 8009672:	3002      	addeq	r0, #2
 8009674:	07d9      	lsls	r1, r3, #31
 8009676:	d403      	bmi.n	8009680 <__lo0bits+0x4e>
 8009678:	085b      	lsrs	r3, r3, #1
 800967a:	f100 0001 	add.w	r0, r0, #1
 800967e:	d003      	beq.n	8009688 <__lo0bits+0x56>
 8009680:	6013      	str	r3, [r2, #0]
 8009682:	4770      	bx	lr
 8009684:	2000      	movs	r0, #0
 8009686:	4770      	bx	lr
 8009688:	2020      	movs	r0, #32
 800968a:	4770      	bx	lr

0800968c <__i2b>:
 800968c:	b510      	push	{r4, lr}
 800968e:	460c      	mov	r4, r1
 8009690:	2101      	movs	r1, #1
 8009692:	f7ff febd 	bl	8009410 <_Balloc>
 8009696:	4602      	mov	r2, r0
 8009698:	b928      	cbnz	r0, 80096a6 <__i2b+0x1a>
 800969a:	4b05      	ldr	r3, [pc, #20]	@ (80096b0 <__i2b+0x24>)
 800969c:	4805      	ldr	r0, [pc, #20]	@ (80096b4 <__i2b+0x28>)
 800969e:	f240 1145 	movw	r1, #325	@ 0x145
 80096a2:	f001 fe09 	bl	800b2b8 <__assert_func>
 80096a6:	2301      	movs	r3, #1
 80096a8:	6144      	str	r4, [r0, #20]
 80096aa:	6103      	str	r3, [r0, #16]
 80096ac:	bd10      	pop	{r4, pc}
 80096ae:	bf00      	nop
 80096b0:	0800bcf1 	.word	0x0800bcf1
 80096b4:	0800bd02 	.word	0x0800bd02

080096b8 <__multiply>:
 80096b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096bc:	4614      	mov	r4, r2
 80096be:	690a      	ldr	r2, [r1, #16]
 80096c0:	6923      	ldr	r3, [r4, #16]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	bfa8      	it	ge
 80096c6:	4623      	movge	r3, r4
 80096c8:	460f      	mov	r7, r1
 80096ca:	bfa4      	itt	ge
 80096cc:	460c      	movge	r4, r1
 80096ce:	461f      	movge	r7, r3
 80096d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80096d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80096d8:	68a3      	ldr	r3, [r4, #8]
 80096da:	6861      	ldr	r1, [r4, #4]
 80096dc:	eb0a 0609 	add.w	r6, sl, r9
 80096e0:	42b3      	cmp	r3, r6
 80096e2:	b085      	sub	sp, #20
 80096e4:	bfb8      	it	lt
 80096e6:	3101      	addlt	r1, #1
 80096e8:	f7ff fe92 	bl	8009410 <_Balloc>
 80096ec:	b930      	cbnz	r0, 80096fc <__multiply+0x44>
 80096ee:	4602      	mov	r2, r0
 80096f0:	4b44      	ldr	r3, [pc, #272]	@ (8009804 <__multiply+0x14c>)
 80096f2:	4845      	ldr	r0, [pc, #276]	@ (8009808 <__multiply+0x150>)
 80096f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80096f8:	f001 fdde 	bl	800b2b8 <__assert_func>
 80096fc:	f100 0514 	add.w	r5, r0, #20
 8009700:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009704:	462b      	mov	r3, r5
 8009706:	2200      	movs	r2, #0
 8009708:	4543      	cmp	r3, r8
 800970a:	d321      	bcc.n	8009750 <__multiply+0x98>
 800970c:	f107 0114 	add.w	r1, r7, #20
 8009710:	f104 0214 	add.w	r2, r4, #20
 8009714:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009718:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800971c:	9302      	str	r3, [sp, #8]
 800971e:	1b13      	subs	r3, r2, r4
 8009720:	3b15      	subs	r3, #21
 8009722:	f023 0303 	bic.w	r3, r3, #3
 8009726:	3304      	adds	r3, #4
 8009728:	f104 0715 	add.w	r7, r4, #21
 800972c:	42ba      	cmp	r2, r7
 800972e:	bf38      	it	cc
 8009730:	2304      	movcc	r3, #4
 8009732:	9301      	str	r3, [sp, #4]
 8009734:	9b02      	ldr	r3, [sp, #8]
 8009736:	9103      	str	r1, [sp, #12]
 8009738:	428b      	cmp	r3, r1
 800973a:	d80c      	bhi.n	8009756 <__multiply+0x9e>
 800973c:	2e00      	cmp	r6, #0
 800973e:	dd03      	ble.n	8009748 <__multiply+0x90>
 8009740:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009744:	2b00      	cmp	r3, #0
 8009746:	d05b      	beq.n	8009800 <__multiply+0x148>
 8009748:	6106      	str	r6, [r0, #16]
 800974a:	b005      	add	sp, #20
 800974c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009750:	f843 2b04 	str.w	r2, [r3], #4
 8009754:	e7d8      	b.n	8009708 <__multiply+0x50>
 8009756:	f8b1 a000 	ldrh.w	sl, [r1]
 800975a:	f1ba 0f00 	cmp.w	sl, #0
 800975e:	d024      	beq.n	80097aa <__multiply+0xf2>
 8009760:	f104 0e14 	add.w	lr, r4, #20
 8009764:	46a9      	mov	r9, r5
 8009766:	f04f 0c00 	mov.w	ip, #0
 800976a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800976e:	f8d9 3000 	ldr.w	r3, [r9]
 8009772:	fa1f fb87 	uxth.w	fp, r7
 8009776:	b29b      	uxth	r3, r3
 8009778:	fb0a 330b 	mla	r3, sl, fp, r3
 800977c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009780:	f8d9 7000 	ldr.w	r7, [r9]
 8009784:	4463      	add	r3, ip
 8009786:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800978a:	fb0a c70b 	mla	r7, sl, fp, ip
 800978e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009792:	b29b      	uxth	r3, r3
 8009794:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009798:	4572      	cmp	r2, lr
 800979a:	f849 3b04 	str.w	r3, [r9], #4
 800979e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80097a2:	d8e2      	bhi.n	800976a <__multiply+0xb2>
 80097a4:	9b01      	ldr	r3, [sp, #4]
 80097a6:	f845 c003 	str.w	ip, [r5, r3]
 80097aa:	9b03      	ldr	r3, [sp, #12]
 80097ac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80097b0:	3104      	adds	r1, #4
 80097b2:	f1b9 0f00 	cmp.w	r9, #0
 80097b6:	d021      	beq.n	80097fc <__multiply+0x144>
 80097b8:	682b      	ldr	r3, [r5, #0]
 80097ba:	f104 0c14 	add.w	ip, r4, #20
 80097be:	46ae      	mov	lr, r5
 80097c0:	f04f 0a00 	mov.w	sl, #0
 80097c4:	f8bc b000 	ldrh.w	fp, [ip]
 80097c8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80097cc:	fb09 770b 	mla	r7, r9, fp, r7
 80097d0:	4457      	add	r7, sl
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097d8:	f84e 3b04 	str.w	r3, [lr], #4
 80097dc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097e4:	f8be 3000 	ldrh.w	r3, [lr]
 80097e8:	fb09 330a 	mla	r3, r9, sl, r3
 80097ec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80097f0:	4562      	cmp	r2, ip
 80097f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097f6:	d8e5      	bhi.n	80097c4 <__multiply+0x10c>
 80097f8:	9f01      	ldr	r7, [sp, #4]
 80097fa:	51eb      	str	r3, [r5, r7]
 80097fc:	3504      	adds	r5, #4
 80097fe:	e799      	b.n	8009734 <__multiply+0x7c>
 8009800:	3e01      	subs	r6, #1
 8009802:	e79b      	b.n	800973c <__multiply+0x84>
 8009804:	0800bcf1 	.word	0x0800bcf1
 8009808:	0800bd02 	.word	0x0800bd02

0800980c <__pow5mult>:
 800980c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009810:	4615      	mov	r5, r2
 8009812:	f012 0203 	ands.w	r2, r2, #3
 8009816:	4607      	mov	r7, r0
 8009818:	460e      	mov	r6, r1
 800981a:	d007      	beq.n	800982c <__pow5mult+0x20>
 800981c:	4c25      	ldr	r4, [pc, #148]	@ (80098b4 <__pow5mult+0xa8>)
 800981e:	3a01      	subs	r2, #1
 8009820:	2300      	movs	r3, #0
 8009822:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009826:	f7ff fe55 	bl	80094d4 <__multadd>
 800982a:	4606      	mov	r6, r0
 800982c:	10ad      	asrs	r5, r5, #2
 800982e:	d03d      	beq.n	80098ac <__pow5mult+0xa0>
 8009830:	69fc      	ldr	r4, [r7, #28]
 8009832:	b97c      	cbnz	r4, 8009854 <__pow5mult+0x48>
 8009834:	2010      	movs	r0, #16
 8009836:	f7ff fd35 	bl	80092a4 <malloc>
 800983a:	4602      	mov	r2, r0
 800983c:	61f8      	str	r0, [r7, #28]
 800983e:	b928      	cbnz	r0, 800984c <__pow5mult+0x40>
 8009840:	4b1d      	ldr	r3, [pc, #116]	@ (80098b8 <__pow5mult+0xac>)
 8009842:	481e      	ldr	r0, [pc, #120]	@ (80098bc <__pow5mult+0xb0>)
 8009844:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009848:	f001 fd36 	bl	800b2b8 <__assert_func>
 800984c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009850:	6004      	str	r4, [r0, #0]
 8009852:	60c4      	str	r4, [r0, #12]
 8009854:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009858:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800985c:	b94c      	cbnz	r4, 8009872 <__pow5mult+0x66>
 800985e:	f240 2171 	movw	r1, #625	@ 0x271
 8009862:	4638      	mov	r0, r7
 8009864:	f7ff ff12 	bl	800968c <__i2b>
 8009868:	2300      	movs	r3, #0
 800986a:	f8c8 0008 	str.w	r0, [r8, #8]
 800986e:	4604      	mov	r4, r0
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	f04f 0900 	mov.w	r9, #0
 8009876:	07eb      	lsls	r3, r5, #31
 8009878:	d50a      	bpl.n	8009890 <__pow5mult+0x84>
 800987a:	4631      	mov	r1, r6
 800987c:	4622      	mov	r2, r4
 800987e:	4638      	mov	r0, r7
 8009880:	f7ff ff1a 	bl	80096b8 <__multiply>
 8009884:	4631      	mov	r1, r6
 8009886:	4680      	mov	r8, r0
 8009888:	4638      	mov	r0, r7
 800988a:	f7ff fe01 	bl	8009490 <_Bfree>
 800988e:	4646      	mov	r6, r8
 8009890:	106d      	asrs	r5, r5, #1
 8009892:	d00b      	beq.n	80098ac <__pow5mult+0xa0>
 8009894:	6820      	ldr	r0, [r4, #0]
 8009896:	b938      	cbnz	r0, 80098a8 <__pow5mult+0x9c>
 8009898:	4622      	mov	r2, r4
 800989a:	4621      	mov	r1, r4
 800989c:	4638      	mov	r0, r7
 800989e:	f7ff ff0b 	bl	80096b8 <__multiply>
 80098a2:	6020      	str	r0, [r4, #0]
 80098a4:	f8c0 9000 	str.w	r9, [r0]
 80098a8:	4604      	mov	r4, r0
 80098aa:	e7e4      	b.n	8009876 <__pow5mult+0x6a>
 80098ac:	4630      	mov	r0, r6
 80098ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098b2:	bf00      	nop
 80098b4:	0800bd5c 	.word	0x0800bd5c
 80098b8:	0800bc82 	.word	0x0800bc82
 80098bc:	0800bd02 	.word	0x0800bd02

080098c0 <__lshift>:
 80098c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c4:	460c      	mov	r4, r1
 80098c6:	6849      	ldr	r1, [r1, #4]
 80098c8:	6923      	ldr	r3, [r4, #16]
 80098ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098ce:	68a3      	ldr	r3, [r4, #8]
 80098d0:	4607      	mov	r7, r0
 80098d2:	4691      	mov	r9, r2
 80098d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098d8:	f108 0601 	add.w	r6, r8, #1
 80098dc:	42b3      	cmp	r3, r6
 80098de:	db0b      	blt.n	80098f8 <__lshift+0x38>
 80098e0:	4638      	mov	r0, r7
 80098e2:	f7ff fd95 	bl	8009410 <_Balloc>
 80098e6:	4605      	mov	r5, r0
 80098e8:	b948      	cbnz	r0, 80098fe <__lshift+0x3e>
 80098ea:	4602      	mov	r2, r0
 80098ec:	4b28      	ldr	r3, [pc, #160]	@ (8009990 <__lshift+0xd0>)
 80098ee:	4829      	ldr	r0, [pc, #164]	@ (8009994 <__lshift+0xd4>)
 80098f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098f4:	f001 fce0 	bl	800b2b8 <__assert_func>
 80098f8:	3101      	adds	r1, #1
 80098fa:	005b      	lsls	r3, r3, #1
 80098fc:	e7ee      	b.n	80098dc <__lshift+0x1c>
 80098fe:	2300      	movs	r3, #0
 8009900:	f100 0114 	add.w	r1, r0, #20
 8009904:	f100 0210 	add.w	r2, r0, #16
 8009908:	4618      	mov	r0, r3
 800990a:	4553      	cmp	r3, sl
 800990c:	db33      	blt.n	8009976 <__lshift+0xb6>
 800990e:	6920      	ldr	r0, [r4, #16]
 8009910:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009914:	f104 0314 	add.w	r3, r4, #20
 8009918:	f019 091f 	ands.w	r9, r9, #31
 800991c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009920:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009924:	d02b      	beq.n	800997e <__lshift+0xbe>
 8009926:	f1c9 0e20 	rsb	lr, r9, #32
 800992a:	468a      	mov	sl, r1
 800992c:	2200      	movs	r2, #0
 800992e:	6818      	ldr	r0, [r3, #0]
 8009930:	fa00 f009 	lsl.w	r0, r0, r9
 8009934:	4310      	orrs	r0, r2
 8009936:	f84a 0b04 	str.w	r0, [sl], #4
 800993a:	f853 2b04 	ldr.w	r2, [r3], #4
 800993e:	459c      	cmp	ip, r3
 8009940:	fa22 f20e 	lsr.w	r2, r2, lr
 8009944:	d8f3      	bhi.n	800992e <__lshift+0x6e>
 8009946:	ebac 0304 	sub.w	r3, ip, r4
 800994a:	3b15      	subs	r3, #21
 800994c:	f023 0303 	bic.w	r3, r3, #3
 8009950:	3304      	adds	r3, #4
 8009952:	f104 0015 	add.w	r0, r4, #21
 8009956:	4584      	cmp	ip, r0
 8009958:	bf38      	it	cc
 800995a:	2304      	movcc	r3, #4
 800995c:	50ca      	str	r2, [r1, r3]
 800995e:	b10a      	cbz	r2, 8009964 <__lshift+0xa4>
 8009960:	f108 0602 	add.w	r6, r8, #2
 8009964:	3e01      	subs	r6, #1
 8009966:	4638      	mov	r0, r7
 8009968:	612e      	str	r6, [r5, #16]
 800996a:	4621      	mov	r1, r4
 800996c:	f7ff fd90 	bl	8009490 <_Bfree>
 8009970:	4628      	mov	r0, r5
 8009972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009976:	f842 0f04 	str.w	r0, [r2, #4]!
 800997a:	3301      	adds	r3, #1
 800997c:	e7c5      	b.n	800990a <__lshift+0x4a>
 800997e:	3904      	subs	r1, #4
 8009980:	f853 2b04 	ldr.w	r2, [r3], #4
 8009984:	f841 2f04 	str.w	r2, [r1, #4]!
 8009988:	459c      	cmp	ip, r3
 800998a:	d8f9      	bhi.n	8009980 <__lshift+0xc0>
 800998c:	e7ea      	b.n	8009964 <__lshift+0xa4>
 800998e:	bf00      	nop
 8009990:	0800bcf1 	.word	0x0800bcf1
 8009994:	0800bd02 	.word	0x0800bd02

08009998 <__mcmp>:
 8009998:	690a      	ldr	r2, [r1, #16]
 800999a:	4603      	mov	r3, r0
 800999c:	6900      	ldr	r0, [r0, #16]
 800999e:	1a80      	subs	r0, r0, r2
 80099a0:	b530      	push	{r4, r5, lr}
 80099a2:	d10e      	bne.n	80099c2 <__mcmp+0x2a>
 80099a4:	3314      	adds	r3, #20
 80099a6:	3114      	adds	r1, #20
 80099a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80099ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80099b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80099b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80099b8:	4295      	cmp	r5, r2
 80099ba:	d003      	beq.n	80099c4 <__mcmp+0x2c>
 80099bc:	d205      	bcs.n	80099ca <__mcmp+0x32>
 80099be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099c2:	bd30      	pop	{r4, r5, pc}
 80099c4:	42a3      	cmp	r3, r4
 80099c6:	d3f3      	bcc.n	80099b0 <__mcmp+0x18>
 80099c8:	e7fb      	b.n	80099c2 <__mcmp+0x2a>
 80099ca:	2001      	movs	r0, #1
 80099cc:	e7f9      	b.n	80099c2 <__mcmp+0x2a>
	...

080099d0 <__mdiff>:
 80099d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	4689      	mov	r9, r1
 80099d6:	4606      	mov	r6, r0
 80099d8:	4611      	mov	r1, r2
 80099da:	4648      	mov	r0, r9
 80099dc:	4614      	mov	r4, r2
 80099de:	f7ff ffdb 	bl	8009998 <__mcmp>
 80099e2:	1e05      	subs	r5, r0, #0
 80099e4:	d112      	bne.n	8009a0c <__mdiff+0x3c>
 80099e6:	4629      	mov	r1, r5
 80099e8:	4630      	mov	r0, r6
 80099ea:	f7ff fd11 	bl	8009410 <_Balloc>
 80099ee:	4602      	mov	r2, r0
 80099f0:	b928      	cbnz	r0, 80099fe <__mdiff+0x2e>
 80099f2:	4b3f      	ldr	r3, [pc, #252]	@ (8009af0 <__mdiff+0x120>)
 80099f4:	f240 2137 	movw	r1, #567	@ 0x237
 80099f8:	483e      	ldr	r0, [pc, #248]	@ (8009af4 <__mdiff+0x124>)
 80099fa:	f001 fc5d 	bl	800b2b8 <__assert_func>
 80099fe:	2301      	movs	r3, #1
 8009a00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a04:	4610      	mov	r0, r2
 8009a06:	b003      	add	sp, #12
 8009a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a0c:	bfbc      	itt	lt
 8009a0e:	464b      	movlt	r3, r9
 8009a10:	46a1      	movlt	r9, r4
 8009a12:	4630      	mov	r0, r6
 8009a14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009a18:	bfba      	itte	lt
 8009a1a:	461c      	movlt	r4, r3
 8009a1c:	2501      	movlt	r5, #1
 8009a1e:	2500      	movge	r5, #0
 8009a20:	f7ff fcf6 	bl	8009410 <_Balloc>
 8009a24:	4602      	mov	r2, r0
 8009a26:	b918      	cbnz	r0, 8009a30 <__mdiff+0x60>
 8009a28:	4b31      	ldr	r3, [pc, #196]	@ (8009af0 <__mdiff+0x120>)
 8009a2a:	f240 2145 	movw	r1, #581	@ 0x245
 8009a2e:	e7e3      	b.n	80099f8 <__mdiff+0x28>
 8009a30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a34:	6926      	ldr	r6, [r4, #16]
 8009a36:	60c5      	str	r5, [r0, #12]
 8009a38:	f109 0310 	add.w	r3, r9, #16
 8009a3c:	f109 0514 	add.w	r5, r9, #20
 8009a40:	f104 0e14 	add.w	lr, r4, #20
 8009a44:	f100 0b14 	add.w	fp, r0, #20
 8009a48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	46d9      	mov	r9, fp
 8009a54:	f04f 0c00 	mov.w	ip, #0
 8009a58:	9b01      	ldr	r3, [sp, #4]
 8009a5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a62:	9301      	str	r3, [sp, #4]
 8009a64:	fa1f f38a 	uxth.w	r3, sl
 8009a68:	4619      	mov	r1, r3
 8009a6a:	b283      	uxth	r3, r0
 8009a6c:	1acb      	subs	r3, r1, r3
 8009a6e:	0c00      	lsrs	r0, r0, #16
 8009a70:	4463      	add	r3, ip
 8009a72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a80:	4576      	cmp	r6, lr
 8009a82:	f849 3b04 	str.w	r3, [r9], #4
 8009a86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a8a:	d8e5      	bhi.n	8009a58 <__mdiff+0x88>
 8009a8c:	1b33      	subs	r3, r6, r4
 8009a8e:	3b15      	subs	r3, #21
 8009a90:	f023 0303 	bic.w	r3, r3, #3
 8009a94:	3415      	adds	r4, #21
 8009a96:	3304      	adds	r3, #4
 8009a98:	42a6      	cmp	r6, r4
 8009a9a:	bf38      	it	cc
 8009a9c:	2304      	movcc	r3, #4
 8009a9e:	441d      	add	r5, r3
 8009aa0:	445b      	add	r3, fp
 8009aa2:	461e      	mov	r6, r3
 8009aa4:	462c      	mov	r4, r5
 8009aa6:	4544      	cmp	r4, r8
 8009aa8:	d30e      	bcc.n	8009ac8 <__mdiff+0xf8>
 8009aaa:	f108 0103 	add.w	r1, r8, #3
 8009aae:	1b49      	subs	r1, r1, r5
 8009ab0:	f021 0103 	bic.w	r1, r1, #3
 8009ab4:	3d03      	subs	r5, #3
 8009ab6:	45a8      	cmp	r8, r5
 8009ab8:	bf38      	it	cc
 8009aba:	2100      	movcc	r1, #0
 8009abc:	440b      	add	r3, r1
 8009abe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ac2:	b191      	cbz	r1, 8009aea <__mdiff+0x11a>
 8009ac4:	6117      	str	r7, [r2, #16]
 8009ac6:	e79d      	b.n	8009a04 <__mdiff+0x34>
 8009ac8:	f854 1b04 	ldr.w	r1, [r4], #4
 8009acc:	46e6      	mov	lr, ip
 8009ace:	0c08      	lsrs	r0, r1, #16
 8009ad0:	fa1c fc81 	uxtah	ip, ip, r1
 8009ad4:	4471      	add	r1, lr
 8009ad6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ada:	b289      	uxth	r1, r1
 8009adc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ae0:	f846 1b04 	str.w	r1, [r6], #4
 8009ae4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ae8:	e7dd      	b.n	8009aa6 <__mdiff+0xd6>
 8009aea:	3f01      	subs	r7, #1
 8009aec:	e7e7      	b.n	8009abe <__mdiff+0xee>
 8009aee:	bf00      	nop
 8009af0:	0800bcf1 	.word	0x0800bcf1
 8009af4:	0800bd02 	.word	0x0800bd02

08009af8 <__ulp>:
 8009af8:	b082      	sub	sp, #8
 8009afa:	ed8d 0b00 	vstr	d0, [sp]
 8009afe:	9a01      	ldr	r2, [sp, #4]
 8009b00:	4b0f      	ldr	r3, [pc, #60]	@ (8009b40 <__ulp+0x48>)
 8009b02:	4013      	ands	r3, r2
 8009b04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	dc08      	bgt.n	8009b1e <__ulp+0x26>
 8009b0c:	425b      	negs	r3, r3
 8009b0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009b12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009b16:	da04      	bge.n	8009b22 <__ulp+0x2a>
 8009b18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009b1c:	4113      	asrs	r3, r2
 8009b1e:	2200      	movs	r2, #0
 8009b20:	e008      	b.n	8009b34 <__ulp+0x3c>
 8009b22:	f1a2 0314 	sub.w	r3, r2, #20
 8009b26:	2b1e      	cmp	r3, #30
 8009b28:	bfda      	itte	le
 8009b2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009b2e:	40da      	lsrle	r2, r3
 8009b30:	2201      	movgt	r2, #1
 8009b32:	2300      	movs	r3, #0
 8009b34:	4619      	mov	r1, r3
 8009b36:	4610      	mov	r0, r2
 8009b38:	ec41 0b10 	vmov	d0, r0, r1
 8009b3c:	b002      	add	sp, #8
 8009b3e:	4770      	bx	lr
 8009b40:	7ff00000 	.word	0x7ff00000

08009b44 <__b2d>:
 8009b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b48:	6906      	ldr	r6, [r0, #16]
 8009b4a:	f100 0814 	add.w	r8, r0, #20
 8009b4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009b52:	1f37      	subs	r7, r6, #4
 8009b54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b58:	4610      	mov	r0, r2
 8009b5a:	f7ff fd4b 	bl	80095f4 <__hi0bits>
 8009b5e:	f1c0 0320 	rsb	r3, r0, #32
 8009b62:	280a      	cmp	r0, #10
 8009b64:	600b      	str	r3, [r1, #0]
 8009b66:	491b      	ldr	r1, [pc, #108]	@ (8009bd4 <__b2d+0x90>)
 8009b68:	dc15      	bgt.n	8009b96 <__b2d+0x52>
 8009b6a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b6e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b72:	45b8      	cmp	r8, r7
 8009b74:	ea43 0501 	orr.w	r5, r3, r1
 8009b78:	bf34      	ite	cc
 8009b7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b7e:	2300      	movcs	r3, #0
 8009b80:	3015      	adds	r0, #21
 8009b82:	fa02 f000 	lsl.w	r0, r2, r0
 8009b86:	fa23 f30c 	lsr.w	r3, r3, ip
 8009b8a:	4303      	orrs	r3, r0
 8009b8c:	461c      	mov	r4, r3
 8009b8e:	ec45 4b10 	vmov	d0, r4, r5
 8009b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b96:	45b8      	cmp	r8, r7
 8009b98:	bf3a      	itte	cc
 8009b9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b9e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009ba2:	2300      	movcs	r3, #0
 8009ba4:	380b      	subs	r0, #11
 8009ba6:	d012      	beq.n	8009bce <__b2d+0x8a>
 8009ba8:	f1c0 0120 	rsb	r1, r0, #32
 8009bac:	fa23 f401 	lsr.w	r4, r3, r1
 8009bb0:	4082      	lsls	r2, r0
 8009bb2:	4322      	orrs	r2, r4
 8009bb4:	4547      	cmp	r7, r8
 8009bb6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009bba:	bf8c      	ite	hi
 8009bbc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009bc0:	2200      	movls	r2, #0
 8009bc2:	4083      	lsls	r3, r0
 8009bc4:	40ca      	lsrs	r2, r1
 8009bc6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	e7de      	b.n	8009b8c <__b2d+0x48>
 8009bce:	ea42 0501 	orr.w	r5, r2, r1
 8009bd2:	e7db      	b.n	8009b8c <__b2d+0x48>
 8009bd4:	3ff00000 	.word	0x3ff00000

08009bd8 <__d2b>:
 8009bd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bdc:	460f      	mov	r7, r1
 8009bde:	2101      	movs	r1, #1
 8009be0:	ec59 8b10 	vmov	r8, r9, d0
 8009be4:	4616      	mov	r6, r2
 8009be6:	f7ff fc13 	bl	8009410 <_Balloc>
 8009bea:	4604      	mov	r4, r0
 8009bec:	b930      	cbnz	r0, 8009bfc <__d2b+0x24>
 8009bee:	4602      	mov	r2, r0
 8009bf0:	4b23      	ldr	r3, [pc, #140]	@ (8009c80 <__d2b+0xa8>)
 8009bf2:	4824      	ldr	r0, [pc, #144]	@ (8009c84 <__d2b+0xac>)
 8009bf4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009bf8:	f001 fb5e 	bl	800b2b8 <__assert_func>
 8009bfc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c04:	b10d      	cbz	r5, 8009c0a <__d2b+0x32>
 8009c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	f1b8 0300 	subs.w	r3, r8, #0
 8009c10:	d023      	beq.n	8009c5a <__d2b+0x82>
 8009c12:	4668      	mov	r0, sp
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	f7ff fd0c 	bl	8009632 <__lo0bits>
 8009c1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c1e:	b1d0      	cbz	r0, 8009c56 <__d2b+0x7e>
 8009c20:	f1c0 0320 	rsb	r3, r0, #32
 8009c24:	fa02 f303 	lsl.w	r3, r2, r3
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	40c2      	lsrs	r2, r0
 8009c2c:	6163      	str	r3, [r4, #20]
 8009c2e:	9201      	str	r2, [sp, #4]
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	61a3      	str	r3, [r4, #24]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	bf0c      	ite	eq
 8009c38:	2201      	moveq	r2, #1
 8009c3a:	2202      	movne	r2, #2
 8009c3c:	6122      	str	r2, [r4, #16]
 8009c3e:	b1a5      	cbz	r5, 8009c6a <__d2b+0x92>
 8009c40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c44:	4405      	add	r5, r0
 8009c46:	603d      	str	r5, [r7, #0]
 8009c48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c4c:	6030      	str	r0, [r6, #0]
 8009c4e:	4620      	mov	r0, r4
 8009c50:	b003      	add	sp, #12
 8009c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c56:	6161      	str	r1, [r4, #20]
 8009c58:	e7ea      	b.n	8009c30 <__d2b+0x58>
 8009c5a:	a801      	add	r0, sp, #4
 8009c5c:	f7ff fce9 	bl	8009632 <__lo0bits>
 8009c60:	9b01      	ldr	r3, [sp, #4]
 8009c62:	6163      	str	r3, [r4, #20]
 8009c64:	3020      	adds	r0, #32
 8009c66:	2201      	movs	r2, #1
 8009c68:	e7e8      	b.n	8009c3c <__d2b+0x64>
 8009c6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009c72:	6038      	str	r0, [r7, #0]
 8009c74:	6918      	ldr	r0, [r3, #16]
 8009c76:	f7ff fcbd 	bl	80095f4 <__hi0bits>
 8009c7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c7e:	e7e5      	b.n	8009c4c <__d2b+0x74>
 8009c80:	0800bcf1 	.word	0x0800bcf1
 8009c84:	0800bd02 	.word	0x0800bd02

08009c88 <__ratio>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	b085      	sub	sp, #20
 8009c8e:	e9cd 1000 	strd	r1, r0, [sp]
 8009c92:	a902      	add	r1, sp, #8
 8009c94:	f7ff ff56 	bl	8009b44 <__b2d>
 8009c98:	9800      	ldr	r0, [sp, #0]
 8009c9a:	a903      	add	r1, sp, #12
 8009c9c:	ec55 4b10 	vmov	r4, r5, d0
 8009ca0:	f7ff ff50 	bl	8009b44 <__b2d>
 8009ca4:	9b01      	ldr	r3, [sp, #4]
 8009ca6:	6919      	ldr	r1, [r3, #16]
 8009ca8:	9b00      	ldr	r3, [sp, #0]
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	1ac9      	subs	r1, r1, r3
 8009cae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009cb2:	1a9b      	subs	r3, r3, r2
 8009cb4:	ec5b ab10 	vmov	sl, fp, d0
 8009cb8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfce      	itee	gt
 8009cc0:	462a      	movgt	r2, r5
 8009cc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cc6:	465a      	movle	r2, fp
 8009cc8:	462f      	mov	r7, r5
 8009cca:	46d9      	mov	r9, fp
 8009ccc:	bfcc      	ite	gt
 8009cce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cd2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	4652      	mov	r2, sl
 8009cda:	4620      	mov	r0, r4
 8009cdc:	4639      	mov	r1, r7
 8009cde:	f7f6 fdb5 	bl	800084c <__aeabi_ddiv>
 8009ce2:	ec41 0b10 	vmov	d0, r0, r1
 8009ce6:	b005      	add	sp, #20
 8009ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cec <__copybits>:
 8009cec:	3901      	subs	r1, #1
 8009cee:	b570      	push	{r4, r5, r6, lr}
 8009cf0:	1149      	asrs	r1, r1, #5
 8009cf2:	6914      	ldr	r4, [r2, #16]
 8009cf4:	3101      	adds	r1, #1
 8009cf6:	f102 0314 	add.w	r3, r2, #20
 8009cfa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009cfe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d02:	1f05      	subs	r5, r0, #4
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	d30c      	bcc.n	8009d22 <__copybits+0x36>
 8009d08:	1aa3      	subs	r3, r4, r2
 8009d0a:	3b11      	subs	r3, #17
 8009d0c:	f023 0303 	bic.w	r3, r3, #3
 8009d10:	3211      	adds	r2, #17
 8009d12:	42a2      	cmp	r2, r4
 8009d14:	bf88      	it	hi
 8009d16:	2300      	movhi	r3, #0
 8009d18:	4418      	add	r0, r3
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	4288      	cmp	r0, r1
 8009d1e:	d305      	bcc.n	8009d2c <__copybits+0x40>
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d26:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d2a:	e7eb      	b.n	8009d04 <__copybits+0x18>
 8009d2c:	f840 3b04 	str.w	r3, [r0], #4
 8009d30:	e7f4      	b.n	8009d1c <__copybits+0x30>

08009d32 <__any_on>:
 8009d32:	f100 0214 	add.w	r2, r0, #20
 8009d36:	6900      	ldr	r0, [r0, #16]
 8009d38:	114b      	asrs	r3, r1, #5
 8009d3a:	4298      	cmp	r0, r3
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	db11      	blt.n	8009d64 <__any_on+0x32>
 8009d40:	dd0a      	ble.n	8009d58 <__any_on+0x26>
 8009d42:	f011 011f 	ands.w	r1, r1, #31
 8009d46:	d007      	beq.n	8009d58 <__any_on+0x26>
 8009d48:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d4c:	fa24 f001 	lsr.w	r0, r4, r1
 8009d50:	fa00 f101 	lsl.w	r1, r0, r1
 8009d54:	428c      	cmp	r4, r1
 8009d56:	d10b      	bne.n	8009d70 <__any_on+0x3e>
 8009d58:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d803      	bhi.n	8009d68 <__any_on+0x36>
 8009d60:	2000      	movs	r0, #0
 8009d62:	bd10      	pop	{r4, pc}
 8009d64:	4603      	mov	r3, r0
 8009d66:	e7f7      	b.n	8009d58 <__any_on+0x26>
 8009d68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d6c:	2900      	cmp	r1, #0
 8009d6e:	d0f5      	beq.n	8009d5c <__any_on+0x2a>
 8009d70:	2001      	movs	r0, #1
 8009d72:	e7f6      	b.n	8009d62 <__any_on+0x30>

08009d74 <sulp>:
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	4604      	mov	r4, r0
 8009d78:	460d      	mov	r5, r1
 8009d7a:	ec45 4b10 	vmov	d0, r4, r5
 8009d7e:	4616      	mov	r6, r2
 8009d80:	f7ff feba 	bl	8009af8 <__ulp>
 8009d84:	ec51 0b10 	vmov	r0, r1, d0
 8009d88:	b17e      	cbz	r6, 8009daa <sulp+0x36>
 8009d8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d8e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	dd09      	ble.n	8009daa <sulp+0x36>
 8009d96:	051b      	lsls	r3, r3, #20
 8009d98:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009d9c:	2400      	movs	r4, #0
 8009d9e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009da2:	4622      	mov	r2, r4
 8009da4:	462b      	mov	r3, r5
 8009da6:	f7f6 fc27 	bl	80005f8 <__aeabi_dmul>
 8009daa:	ec41 0b10 	vmov	d0, r0, r1
 8009dae:	bd70      	pop	{r4, r5, r6, pc}

08009db0 <_strtod_l>:
 8009db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	b09f      	sub	sp, #124	@ 0x7c
 8009db6:	460c      	mov	r4, r1
 8009db8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009dba:	2200      	movs	r2, #0
 8009dbc:	921a      	str	r2, [sp, #104]	@ 0x68
 8009dbe:	9005      	str	r0, [sp, #20]
 8009dc0:	f04f 0a00 	mov.w	sl, #0
 8009dc4:	f04f 0b00 	mov.w	fp, #0
 8009dc8:	460a      	mov	r2, r1
 8009dca:	9219      	str	r2, [sp, #100]	@ 0x64
 8009dcc:	7811      	ldrb	r1, [r2, #0]
 8009dce:	292b      	cmp	r1, #43	@ 0x2b
 8009dd0:	d04a      	beq.n	8009e68 <_strtod_l+0xb8>
 8009dd2:	d838      	bhi.n	8009e46 <_strtod_l+0x96>
 8009dd4:	290d      	cmp	r1, #13
 8009dd6:	d832      	bhi.n	8009e3e <_strtod_l+0x8e>
 8009dd8:	2908      	cmp	r1, #8
 8009dda:	d832      	bhi.n	8009e42 <_strtod_l+0x92>
 8009ddc:	2900      	cmp	r1, #0
 8009dde:	d03b      	beq.n	8009e58 <_strtod_l+0xa8>
 8009de0:	2200      	movs	r2, #0
 8009de2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009de4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009de6:	782a      	ldrb	r2, [r5, #0]
 8009de8:	2a30      	cmp	r2, #48	@ 0x30
 8009dea:	f040 80b3 	bne.w	8009f54 <_strtod_l+0x1a4>
 8009dee:	786a      	ldrb	r2, [r5, #1]
 8009df0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009df4:	2a58      	cmp	r2, #88	@ 0x58
 8009df6:	d16e      	bne.n	8009ed6 <_strtod_l+0x126>
 8009df8:	9302      	str	r3, [sp, #8]
 8009dfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	ab1a      	add	r3, sp, #104	@ 0x68
 8009e00:	9300      	str	r3, [sp, #0]
 8009e02:	4a8e      	ldr	r2, [pc, #568]	@ (800a03c <_strtod_l+0x28c>)
 8009e04:	9805      	ldr	r0, [sp, #20]
 8009e06:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009e08:	a919      	add	r1, sp, #100	@ 0x64
 8009e0a:	f001 faef 	bl	800b3ec <__gethex>
 8009e0e:	f010 060f 	ands.w	r6, r0, #15
 8009e12:	4604      	mov	r4, r0
 8009e14:	d005      	beq.n	8009e22 <_strtod_l+0x72>
 8009e16:	2e06      	cmp	r6, #6
 8009e18:	d128      	bne.n	8009e6c <_strtod_l+0xbc>
 8009e1a:	3501      	adds	r5, #1
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009e20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f040 858e 	bne.w	800a946 <_strtod_l+0xb96>
 8009e2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e2c:	b1cb      	cbz	r3, 8009e62 <_strtod_l+0xb2>
 8009e2e:	4652      	mov	r2, sl
 8009e30:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009e34:	ec43 2b10 	vmov	d0, r2, r3
 8009e38:	b01f      	add	sp, #124	@ 0x7c
 8009e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3e:	2920      	cmp	r1, #32
 8009e40:	d1ce      	bne.n	8009de0 <_strtod_l+0x30>
 8009e42:	3201      	adds	r2, #1
 8009e44:	e7c1      	b.n	8009dca <_strtod_l+0x1a>
 8009e46:	292d      	cmp	r1, #45	@ 0x2d
 8009e48:	d1ca      	bne.n	8009de0 <_strtod_l+0x30>
 8009e4a:	2101      	movs	r1, #1
 8009e4c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009e4e:	1c51      	adds	r1, r2, #1
 8009e50:	9119      	str	r1, [sp, #100]	@ 0x64
 8009e52:	7852      	ldrb	r2, [r2, #1]
 8009e54:	2a00      	cmp	r2, #0
 8009e56:	d1c5      	bne.n	8009de4 <_strtod_l+0x34>
 8009e58:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e5a:	9419      	str	r4, [sp, #100]	@ 0x64
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f040 8570 	bne.w	800a942 <_strtod_l+0xb92>
 8009e62:	4652      	mov	r2, sl
 8009e64:	465b      	mov	r3, fp
 8009e66:	e7e5      	b.n	8009e34 <_strtod_l+0x84>
 8009e68:	2100      	movs	r1, #0
 8009e6a:	e7ef      	b.n	8009e4c <_strtod_l+0x9c>
 8009e6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009e6e:	b13a      	cbz	r2, 8009e80 <_strtod_l+0xd0>
 8009e70:	2135      	movs	r1, #53	@ 0x35
 8009e72:	a81c      	add	r0, sp, #112	@ 0x70
 8009e74:	f7ff ff3a 	bl	8009cec <__copybits>
 8009e78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e7a:	9805      	ldr	r0, [sp, #20]
 8009e7c:	f7ff fb08 	bl	8009490 <_Bfree>
 8009e80:	3e01      	subs	r6, #1
 8009e82:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009e84:	2e04      	cmp	r6, #4
 8009e86:	d806      	bhi.n	8009e96 <_strtod_l+0xe6>
 8009e88:	e8df f006 	tbb	[pc, r6]
 8009e8c:	201d0314 	.word	0x201d0314
 8009e90:	14          	.byte	0x14
 8009e91:	00          	.byte	0x00
 8009e92:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009e96:	05e1      	lsls	r1, r4, #23
 8009e98:	bf48      	it	mi
 8009e9a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009e9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ea2:	0d1b      	lsrs	r3, r3, #20
 8009ea4:	051b      	lsls	r3, r3, #20
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d1bb      	bne.n	8009e22 <_strtod_l+0x72>
 8009eaa:	f7fe fb2f 	bl	800850c <__errno>
 8009eae:	2322      	movs	r3, #34	@ 0x22
 8009eb0:	6003      	str	r3, [r0, #0]
 8009eb2:	e7b6      	b.n	8009e22 <_strtod_l+0x72>
 8009eb4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009eb8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009ebc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ec0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ec4:	e7e7      	b.n	8009e96 <_strtod_l+0xe6>
 8009ec6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a044 <_strtod_l+0x294>
 8009eca:	e7e4      	b.n	8009e96 <_strtod_l+0xe6>
 8009ecc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009ed0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8009ed4:	e7df      	b.n	8009e96 <_strtod_l+0xe6>
 8009ed6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ed8:	1c5a      	adds	r2, r3, #1
 8009eda:	9219      	str	r2, [sp, #100]	@ 0x64
 8009edc:	785b      	ldrb	r3, [r3, #1]
 8009ede:	2b30      	cmp	r3, #48	@ 0x30
 8009ee0:	d0f9      	beq.n	8009ed6 <_strtod_l+0x126>
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d09d      	beq.n	8009e22 <_strtod_l+0x72>
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009eea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009eec:	930c      	str	r3, [sp, #48]	@ 0x30
 8009eee:	2300      	movs	r3, #0
 8009ef0:	9308      	str	r3, [sp, #32]
 8009ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ef4:	461f      	mov	r7, r3
 8009ef6:	220a      	movs	r2, #10
 8009ef8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009efa:	7805      	ldrb	r5, [r0, #0]
 8009efc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009f00:	b2d9      	uxtb	r1, r3
 8009f02:	2909      	cmp	r1, #9
 8009f04:	d928      	bls.n	8009f58 <_strtod_l+0x1a8>
 8009f06:	494e      	ldr	r1, [pc, #312]	@ (800a040 <_strtod_l+0x290>)
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f001 f979 	bl	800b200 <strncmp>
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	d032      	beq.n	8009f78 <_strtod_l+0x1c8>
 8009f12:	2000      	movs	r0, #0
 8009f14:	462a      	mov	r2, r5
 8009f16:	4681      	mov	r9, r0
 8009f18:	463d      	mov	r5, r7
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2a65      	cmp	r2, #101	@ 0x65
 8009f1e:	d001      	beq.n	8009f24 <_strtod_l+0x174>
 8009f20:	2a45      	cmp	r2, #69	@ 0x45
 8009f22:	d114      	bne.n	8009f4e <_strtod_l+0x19e>
 8009f24:	b91d      	cbnz	r5, 8009f2e <_strtod_l+0x17e>
 8009f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f28:	4302      	orrs	r2, r0
 8009f2a:	d095      	beq.n	8009e58 <_strtod_l+0xa8>
 8009f2c:	2500      	movs	r5, #0
 8009f2e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009f30:	1c62      	adds	r2, r4, #1
 8009f32:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f34:	7862      	ldrb	r2, [r4, #1]
 8009f36:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f38:	d077      	beq.n	800a02a <_strtod_l+0x27a>
 8009f3a:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f3c:	d07b      	beq.n	800a036 <_strtod_l+0x286>
 8009f3e:	f04f 0c00 	mov.w	ip, #0
 8009f42:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f46:	2909      	cmp	r1, #9
 8009f48:	f240 8082 	bls.w	800a050 <_strtod_l+0x2a0>
 8009f4c:	9419      	str	r4, [sp, #100]	@ 0x64
 8009f4e:	f04f 0800 	mov.w	r8, #0
 8009f52:	e0a2      	b.n	800a09a <_strtod_l+0x2ea>
 8009f54:	2300      	movs	r3, #0
 8009f56:	e7c7      	b.n	8009ee8 <_strtod_l+0x138>
 8009f58:	2f08      	cmp	r7, #8
 8009f5a:	bfd5      	itete	le
 8009f5c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8009f5e:	9908      	ldrgt	r1, [sp, #32]
 8009f60:	fb02 3301 	mlale	r3, r2, r1, r3
 8009f64:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f68:	f100 0001 	add.w	r0, r0, #1
 8009f6c:	bfd4      	ite	le
 8009f6e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8009f70:	9308      	strgt	r3, [sp, #32]
 8009f72:	3701      	adds	r7, #1
 8009f74:	9019      	str	r0, [sp, #100]	@ 0x64
 8009f76:	e7bf      	b.n	8009ef8 <_strtod_l+0x148>
 8009f78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f7a:	1c5a      	adds	r2, r3, #1
 8009f7c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f7e:	785a      	ldrb	r2, [r3, #1]
 8009f80:	b37f      	cbz	r7, 8009fe2 <_strtod_l+0x232>
 8009f82:	4681      	mov	r9, r0
 8009f84:	463d      	mov	r5, r7
 8009f86:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009f8a:	2b09      	cmp	r3, #9
 8009f8c:	d912      	bls.n	8009fb4 <_strtod_l+0x204>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e7c4      	b.n	8009f1c <_strtod_l+0x16c>
 8009f92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009f94:	1c5a      	adds	r2, r3, #1
 8009f96:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f98:	785a      	ldrb	r2, [r3, #1]
 8009f9a:	3001      	adds	r0, #1
 8009f9c:	2a30      	cmp	r2, #48	@ 0x30
 8009f9e:	d0f8      	beq.n	8009f92 <_strtod_l+0x1e2>
 8009fa0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009fa4:	2b08      	cmp	r3, #8
 8009fa6:	f200 84d3 	bhi.w	800a950 <_strtod_l+0xba0>
 8009faa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009fac:	930c      	str	r3, [sp, #48]	@ 0x30
 8009fae:	4681      	mov	r9, r0
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	4605      	mov	r5, r0
 8009fb4:	3a30      	subs	r2, #48	@ 0x30
 8009fb6:	f100 0301 	add.w	r3, r0, #1
 8009fba:	d02a      	beq.n	800a012 <_strtod_l+0x262>
 8009fbc:	4499      	add	r9, r3
 8009fbe:	eb00 0c05 	add.w	ip, r0, r5
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	210a      	movs	r1, #10
 8009fc6:	4563      	cmp	r3, ip
 8009fc8:	d10d      	bne.n	8009fe6 <_strtod_l+0x236>
 8009fca:	1c69      	adds	r1, r5, #1
 8009fcc:	4401      	add	r1, r0
 8009fce:	4428      	add	r0, r5
 8009fd0:	2808      	cmp	r0, #8
 8009fd2:	dc16      	bgt.n	800a002 <_strtod_l+0x252>
 8009fd4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009fd6:	230a      	movs	r3, #10
 8009fd8:	fb03 2300 	mla	r3, r3, r0, r2
 8009fdc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e018      	b.n	800a014 <_strtod_l+0x264>
 8009fe2:	4638      	mov	r0, r7
 8009fe4:	e7da      	b.n	8009f9c <_strtod_l+0x1ec>
 8009fe6:	2b08      	cmp	r3, #8
 8009fe8:	f103 0301 	add.w	r3, r3, #1
 8009fec:	dc03      	bgt.n	8009ff6 <_strtod_l+0x246>
 8009fee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009ff0:	434e      	muls	r6, r1
 8009ff2:	960a      	str	r6, [sp, #40]	@ 0x28
 8009ff4:	e7e7      	b.n	8009fc6 <_strtod_l+0x216>
 8009ff6:	2b10      	cmp	r3, #16
 8009ff8:	bfde      	ittt	le
 8009ffa:	9e08      	ldrle	r6, [sp, #32]
 8009ffc:	434e      	mulle	r6, r1
 8009ffe:	9608      	strle	r6, [sp, #32]
 800a000:	e7e1      	b.n	8009fc6 <_strtod_l+0x216>
 800a002:	280f      	cmp	r0, #15
 800a004:	dceb      	bgt.n	8009fde <_strtod_l+0x22e>
 800a006:	9808      	ldr	r0, [sp, #32]
 800a008:	230a      	movs	r3, #10
 800a00a:	fb03 2300 	mla	r3, r3, r0, r2
 800a00e:	9308      	str	r3, [sp, #32]
 800a010:	e7e5      	b.n	8009fde <_strtod_l+0x22e>
 800a012:	4629      	mov	r1, r5
 800a014:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a016:	1c50      	adds	r0, r2, #1
 800a018:	9019      	str	r0, [sp, #100]	@ 0x64
 800a01a:	7852      	ldrb	r2, [r2, #1]
 800a01c:	4618      	mov	r0, r3
 800a01e:	460d      	mov	r5, r1
 800a020:	e7b1      	b.n	8009f86 <_strtod_l+0x1d6>
 800a022:	f04f 0900 	mov.w	r9, #0
 800a026:	2301      	movs	r3, #1
 800a028:	e77d      	b.n	8009f26 <_strtod_l+0x176>
 800a02a:	f04f 0c00 	mov.w	ip, #0
 800a02e:	1ca2      	adds	r2, r4, #2
 800a030:	9219      	str	r2, [sp, #100]	@ 0x64
 800a032:	78a2      	ldrb	r2, [r4, #2]
 800a034:	e785      	b.n	8009f42 <_strtod_l+0x192>
 800a036:	f04f 0c01 	mov.w	ip, #1
 800a03a:	e7f8      	b.n	800a02e <_strtod_l+0x27e>
 800a03c:	0800be70 	.word	0x0800be70
 800a040:	0800be58 	.word	0x0800be58
 800a044:	7ff00000 	.word	0x7ff00000
 800a048:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a04a:	1c51      	adds	r1, r2, #1
 800a04c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a04e:	7852      	ldrb	r2, [r2, #1]
 800a050:	2a30      	cmp	r2, #48	@ 0x30
 800a052:	d0f9      	beq.n	800a048 <_strtod_l+0x298>
 800a054:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a058:	2908      	cmp	r1, #8
 800a05a:	f63f af78 	bhi.w	8009f4e <_strtod_l+0x19e>
 800a05e:	3a30      	subs	r2, #48	@ 0x30
 800a060:	920e      	str	r2, [sp, #56]	@ 0x38
 800a062:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a064:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a066:	f04f 080a 	mov.w	r8, #10
 800a06a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a06c:	1c56      	adds	r6, r2, #1
 800a06e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a070:	7852      	ldrb	r2, [r2, #1]
 800a072:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a076:	f1be 0f09 	cmp.w	lr, #9
 800a07a:	d939      	bls.n	800a0f0 <_strtod_l+0x340>
 800a07c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a07e:	1a76      	subs	r6, r6, r1
 800a080:	2e08      	cmp	r6, #8
 800a082:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a086:	dc03      	bgt.n	800a090 <_strtod_l+0x2e0>
 800a088:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a08a:	4588      	cmp	r8, r1
 800a08c:	bfa8      	it	ge
 800a08e:	4688      	movge	r8, r1
 800a090:	f1bc 0f00 	cmp.w	ip, #0
 800a094:	d001      	beq.n	800a09a <_strtod_l+0x2ea>
 800a096:	f1c8 0800 	rsb	r8, r8, #0
 800a09a:	2d00      	cmp	r5, #0
 800a09c:	d14e      	bne.n	800a13c <_strtod_l+0x38c>
 800a09e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a0a0:	4308      	orrs	r0, r1
 800a0a2:	f47f aebe 	bne.w	8009e22 <_strtod_l+0x72>
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f47f aed6 	bne.w	8009e58 <_strtod_l+0xa8>
 800a0ac:	2a69      	cmp	r2, #105	@ 0x69
 800a0ae:	d028      	beq.n	800a102 <_strtod_l+0x352>
 800a0b0:	dc25      	bgt.n	800a0fe <_strtod_l+0x34e>
 800a0b2:	2a49      	cmp	r2, #73	@ 0x49
 800a0b4:	d025      	beq.n	800a102 <_strtod_l+0x352>
 800a0b6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a0b8:	f47f aece 	bne.w	8009e58 <_strtod_l+0xa8>
 800a0bc:	499b      	ldr	r1, [pc, #620]	@ (800a32c <_strtod_l+0x57c>)
 800a0be:	a819      	add	r0, sp, #100	@ 0x64
 800a0c0:	f001 fbb6 	bl	800b830 <__match>
 800a0c4:	2800      	cmp	r0, #0
 800a0c6:	f43f aec7 	beq.w	8009e58 <_strtod_l+0xa8>
 800a0ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	2b28      	cmp	r3, #40	@ 0x28
 800a0d0:	d12e      	bne.n	800a130 <_strtod_l+0x380>
 800a0d2:	4997      	ldr	r1, [pc, #604]	@ (800a330 <_strtod_l+0x580>)
 800a0d4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a0d6:	a819      	add	r0, sp, #100	@ 0x64
 800a0d8:	f001 fbbe 	bl	800b858 <__hexnan>
 800a0dc:	2805      	cmp	r0, #5
 800a0de:	d127      	bne.n	800a130 <_strtod_l+0x380>
 800a0e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a0e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a0e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a0ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a0ee:	e698      	b.n	8009e22 <_strtod_l+0x72>
 800a0f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a0f2:	fb08 2101 	mla	r1, r8, r1, r2
 800a0f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a0fa:	920e      	str	r2, [sp, #56]	@ 0x38
 800a0fc:	e7b5      	b.n	800a06a <_strtod_l+0x2ba>
 800a0fe:	2a6e      	cmp	r2, #110	@ 0x6e
 800a100:	e7da      	b.n	800a0b8 <_strtod_l+0x308>
 800a102:	498c      	ldr	r1, [pc, #560]	@ (800a334 <_strtod_l+0x584>)
 800a104:	a819      	add	r0, sp, #100	@ 0x64
 800a106:	f001 fb93 	bl	800b830 <__match>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	f43f aea4 	beq.w	8009e58 <_strtod_l+0xa8>
 800a110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a112:	4989      	ldr	r1, [pc, #548]	@ (800a338 <_strtod_l+0x588>)
 800a114:	3b01      	subs	r3, #1
 800a116:	a819      	add	r0, sp, #100	@ 0x64
 800a118:	9319      	str	r3, [sp, #100]	@ 0x64
 800a11a:	f001 fb89 	bl	800b830 <__match>
 800a11e:	b910      	cbnz	r0, 800a126 <_strtod_l+0x376>
 800a120:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a122:	3301      	adds	r3, #1
 800a124:	9319      	str	r3, [sp, #100]	@ 0x64
 800a126:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a348 <_strtod_l+0x598>
 800a12a:	f04f 0a00 	mov.w	sl, #0
 800a12e:	e678      	b.n	8009e22 <_strtod_l+0x72>
 800a130:	4882      	ldr	r0, [pc, #520]	@ (800a33c <_strtod_l+0x58c>)
 800a132:	f001 f8b9 	bl	800b2a8 <nan>
 800a136:	ec5b ab10 	vmov	sl, fp, d0
 800a13a:	e672      	b.n	8009e22 <_strtod_l+0x72>
 800a13c:	eba8 0309 	sub.w	r3, r8, r9
 800a140:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a142:	9309      	str	r3, [sp, #36]	@ 0x24
 800a144:	2f00      	cmp	r7, #0
 800a146:	bf08      	it	eq
 800a148:	462f      	moveq	r7, r5
 800a14a:	2d10      	cmp	r5, #16
 800a14c:	462c      	mov	r4, r5
 800a14e:	bfa8      	it	ge
 800a150:	2410      	movge	r4, #16
 800a152:	f7f6 f9d7 	bl	8000504 <__aeabi_ui2d>
 800a156:	2d09      	cmp	r5, #9
 800a158:	4682      	mov	sl, r0
 800a15a:	468b      	mov	fp, r1
 800a15c:	dc13      	bgt.n	800a186 <_strtod_l+0x3d6>
 800a15e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a160:	2b00      	cmp	r3, #0
 800a162:	f43f ae5e 	beq.w	8009e22 <_strtod_l+0x72>
 800a166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a168:	dd78      	ble.n	800a25c <_strtod_l+0x4ac>
 800a16a:	2b16      	cmp	r3, #22
 800a16c:	dc5f      	bgt.n	800a22e <_strtod_l+0x47e>
 800a16e:	4974      	ldr	r1, [pc, #464]	@ (800a340 <_strtod_l+0x590>)
 800a170:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a174:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a178:	4652      	mov	r2, sl
 800a17a:	465b      	mov	r3, fp
 800a17c:	f7f6 fa3c 	bl	80005f8 <__aeabi_dmul>
 800a180:	4682      	mov	sl, r0
 800a182:	468b      	mov	fp, r1
 800a184:	e64d      	b.n	8009e22 <_strtod_l+0x72>
 800a186:	4b6e      	ldr	r3, [pc, #440]	@ (800a340 <_strtod_l+0x590>)
 800a188:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a18c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a190:	f7f6 fa32 	bl	80005f8 <__aeabi_dmul>
 800a194:	4682      	mov	sl, r0
 800a196:	9808      	ldr	r0, [sp, #32]
 800a198:	468b      	mov	fp, r1
 800a19a:	f7f6 f9b3 	bl	8000504 <__aeabi_ui2d>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4650      	mov	r0, sl
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	f7f6 f871 	bl	800028c <__adddf3>
 800a1aa:	2d0f      	cmp	r5, #15
 800a1ac:	4682      	mov	sl, r0
 800a1ae:	468b      	mov	fp, r1
 800a1b0:	ddd5      	ble.n	800a15e <_strtod_l+0x3ae>
 800a1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1b4:	1b2c      	subs	r4, r5, r4
 800a1b6:	441c      	add	r4, r3
 800a1b8:	2c00      	cmp	r4, #0
 800a1ba:	f340 8096 	ble.w	800a2ea <_strtod_l+0x53a>
 800a1be:	f014 030f 	ands.w	r3, r4, #15
 800a1c2:	d00a      	beq.n	800a1da <_strtod_l+0x42a>
 800a1c4:	495e      	ldr	r1, [pc, #376]	@ (800a340 <_strtod_l+0x590>)
 800a1c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a1ca:	4652      	mov	r2, sl
 800a1cc:	465b      	mov	r3, fp
 800a1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1d2:	f7f6 fa11 	bl	80005f8 <__aeabi_dmul>
 800a1d6:	4682      	mov	sl, r0
 800a1d8:	468b      	mov	fp, r1
 800a1da:	f034 040f 	bics.w	r4, r4, #15
 800a1de:	d073      	beq.n	800a2c8 <_strtod_l+0x518>
 800a1e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a1e4:	dd48      	ble.n	800a278 <_strtod_l+0x4c8>
 800a1e6:	2400      	movs	r4, #0
 800a1e8:	46a0      	mov	r8, r4
 800a1ea:	940a      	str	r4, [sp, #40]	@ 0x28
 800a1ec:	46a1      	mov	r9, r4
 800a1ee:	9a05      	ldr	r2, [sp, #20]
 800a1f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a348 <_strtod_l+0x598>
 800a1f4:	2322      	movs	r3, #34	@ 0x22
 800a1f6:	6013      	str	r3, [r2, #0]
 800a1f8:	f04f 0a00 	mov.w	sl, #0
 800a1fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	f43f ae0f 	beq.w	8009e22 <_strtod_l+0x72>
 800a204:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a206:	9805      	ldr	r0, [sp, #20]
 800a208:	f7ff f942 	bl	8009490 <_Bfree>
 800a20c:	9805      	ldr	r0, [sp, #20]
 800a20e:	4649      	mov	r1, r9
 800a210:	f7ff f93e 	bl	8009490 <_Bfree>
 800a214:	9805      	ldr	r0, [sp, #20]
 800a216:	4641      	mov	r1, r8
 800a218:	f7ff f93a 	bl	8009490 <_Bfree>
 800a21c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a21e:	9805      	ldr	r0, [sp, #20]
 800a220:	f7ff f936 	bl	8009490 <_Bfree>
 800a224:	9805      	ldr	r0, [sp, #20]
 800a226:	4621      	mov	r1, r4
 800a228:	f7ff f932 	bl	8009490 <_Bfree>
 800a22c:	e5f9      	b.n	8009e22 <_strtod_l+0x72>
 800a22e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a230:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a234:	4293      	cmp	r3, r2
 800a236:	dbbc      	blt.n	800a1b2 <_strtod_l+0x402>
 800a238:	4c41      	ldr	r4, [pc, #260]	@ (800a340 <_strtod_l+0x590>)
 800a23a:	f1c5 050f 	rsb	r5, r5, #15
 800a23e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a242:	4652      	mov	r2, sl
 800a244:	465b      	mov	r3, fp
 800a246:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a24a:	f7f6 f9d5 	bl	80005f8 <__aeabi_dmul>
 800a24e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a250:	1b5d      	subs	r5, r3, r5
 800a252:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a256:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a25a:	e78f      	b.n	800a17c <_strtod_l+0x3cc>
 800a25c:	3316      	adds	r3, #22
 800a25e:	dba8      	blt.n	800a1b2 <_strtod_l+0x402>
 800a260:	4b37      	ldr	r3, [pc, #220]	@ (800a340 <_strtod_l+0x590>)
 800a262:	eba9 0808 	sub.w	r8, r9, r8
 800a266:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a26a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a26e:	4650      	mov	r0, sl
 800a270:	4659      	mov	r1, fp
 800a272:	f7f6 faeb 	bl	800084c <__aeabi_ddiv>
 800a276:	e783      	b.n	800a180 <_strtod_l+0x3d0>
 800a278:	4b32      	ldr	r3, [pc, #200]	@ (800a344 <_strtod_l+0x594>)
 800a27a:	9308      	str	r3, [sp, #32]
 800a27c:	2300      	movs	r3, #0
 800a27e:	1124      	asrs	r4, r4, #4
 800a280:	4650      	mov	r0, sl
 800a282:	4659      	mov	r1, fp
 800a284:	461e      	mov	r6, r3
 800a286:	2c01      	cmp	r4, #1
 800a288:	dc21      	bgt.n	800a2ce <_strtod_l+0x51e>
 800a28a:	b10b      	cbz	r3, 800a290 <_strtod_l+0x4e0>
 800a28c:	4682      	mov	sl, r0
 800a28e:	468b      	mov	fp, r1
 800a290:	492c      	ldr	r1, [pc, #176]	@ (800a344 <_strtod_l+0x594>)
 800a292:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a296:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a29a:	4652      	mov	r2, sl
 800a29c:	465b      	mov	r3, fp
 800a29e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2a2:	f7f6 f9a9 	bl	80005f8 <__aeabi_dmul>
 800a2a6:	4b28      	ldr	r3, [pc, #160]	@ (800a348 <_strtod_l+0x598>)
 800a2a8:	460a      	mov	r2, r1
 800a2aa:	400b      	ands	r3, r1
 800a2ac:	4927      	ldr	r1, [pc, #156]	@ (800a34c <_strtod_l+0x59c>)
 800a2ae:	428b      	cmp	r3, r1
 800a2b0:	4682      	mov	sl, r0
 800a2b2:	d898      	bhi.n	800a1e6 <_strtod_l+0x436>
 800a2b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a2b8:	428b      	cmp	r3, r1
 800a2ba:	bf86      	itte	hi
 800a2bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a350 <_strtod_l+0x5a0>
 800a2c0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a2c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	9308      	str	r3, [sp, #32]
 800a2cc:	e07a      	b.n	800a3c4 <_strtod_l+0x614>
 800a2ce:	07e2      	lsls	r2, r4, #31
 800a2d0:	d505      	bpl.n	800a2de <_strtod_l+0x52e>
 800a2d2:	9b08      	ldr	r3, [sp, #32]
 800a2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2d8:	f7f6 f98e 	bl	80005f8 <__aeabi_dmul>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	9a08      	ldr	r2, [sp, #32]
 800a2e0:	3208      	adds	r2, #8
 800a2e2:	3601      	adds	r6, #1
 800a2e4:	1064      	asrs	r4, r4, #1
 800a2e6:	9208      	str	r2, [sp, #32]
 800a2e8:	e7cd      	b.n	800a286 <_strtod_l+0x4d6>
 800a2ea:	d0ed      	beq.n	800a2c8 <_strtod_l+0x518>
 800a2ec:	4264      	negs	r4, r4
 800a2ee:	f014 020f 	ands.w	r2, r4, #15
 800a2f2:	d00a      	beq.n	800a30a <_strtod_l+0x55a>
 800a2f4:	4b12      	ldr	r3, [pc, #72]	@ (800a340 <_strtod_l+0x590>)
 800a2f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2fa:	4650      	mov	r0, sl
 800a2fc:	4659      	mov	r1, fp
 800a2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a302:	f7f6 faa3 	bl	800084c <__aeabi_ddiv>
 800a306:	4682      	mov	sl, r0
 800a308:	468b      	mov	fp, r1
 800a30a:	1124      	asrs	r4, r4, #4
 800a30c:	d0dc      	beq.n	800a2c8 <_strtod_l+0x518>
 800a30e:	2c1f      	cmp	r4, #31
 800a310:	dd20      	ble.n	800a354 <_strtod_l+0x5a4>
 800a312:	2400      	movs	r4, #0
 800a314:	46a0      	mov	r8, r4
 800a316:	940a      	str	r4, [sp, #40]	@ 0x28
 800a318:	46a1      	mov	r9, r4
 800a31a:	9a05      	ldr	r2, [sp, #20]
 800a31c:	2322      	movs	r3, #34	@ 0x22
 800a31e:	f04f 0a00 	mov.w	sl, #0
 800a322:	f04f 0b00 	mov.w	fp, #0
 800a326:	6013      	str	r3, [r2, #0]
 800a328:	e768      	b.n	800a1fc <_strtod_l+0x44c>
 800a32a:	bf00      	nop
 800a32c:	0800bc49 	.word	0x0800bc49
 800a330:	0800be5c 	.word	0x0800be5c
 800a334:	0800bc41 	.word	0x0800bc41
 800a338:	0800bc78 	.word	0x0800bc78
 800a33c:	0800c005 	.word	0x0800c005
 800a340:	0800bd90 	.word	0x0800bd90
 800a344:	0800bd68 	.word	0x0800bd68
 800a348:	7ff00000 	.word	0x7ff00000
 800a34c:	7ca00000 	.word	0x7ca00000
 800a350:	7fefffff 	.word	0x7fefffff
 800a354:	f014 0310 	ands.w	r3, r4, #16
 800a358:	bf18      	it	ne
 800a35a:	236a      	movne	r3, #106	@ 0x6a
 800a35c:	4ea9      	ldr	r6, [pc, #676]	@ (800a604 <_strtod_l+0x854>)
 800a35e:	9308      	str	r3, [sp, #32]
 800a360:	4650      	mov	r0, sl
 800a362:	4659      	mov	r1, fp
 800a364:	2300      	movs	r3, #0
 800a366:	07e2      	lsls	r2, r4, #31
 800a368:	d504      	bpl.n	800a374 <_strtod_l+0x5c4>
 800a36a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a36e:	f7f6 f943 	bl	80005f8 <__aeabi_dmul>
 800a372:	2301      	movs	r3, #1
 800a374:	1064      	asrs	r4, r4, #1
 800a376:	f106 0608 	add.w	r6, r6, #8
 800a37a:	d1f4      	bne.n	800a366 <_strtod_l+0x5b6>
 800a37c:	b10b      	cbz	r3, 800a382 <_strtod_l+0x5d2>
 800a37e:	4682      	mov	sl, r0
 800a380:	468b      	mov	fp, r1
 800a382:	9b08      	ldr	r3, [sp, #32]
 800a384:	b1b3      	cbz	r3, 800a3b4 <_strtod_l+0x604>
 800a386:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a38a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a38e:	2b00      	cmp	r3, #0
 800a390:	4659      	mov	r1, fp
 800a392:	dd0f      	ble.n	800a3b4 <_strtod_l+0x604>
 800a394:	2b1f      	cmp	r3, #31
 800a396:	dd55      	ble.n	800a444 <_strtod_l+0x694>
 800a398:	2b34      	cmp	r3, #52	@ 0x34
 800a39a:	bfde      	ittt	le
 800a39c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a3a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a3a4:	4093      	lslle	r3, r2
 800a3a6:	f04f 0a00 	mov.w	sl, #0
 800a3aa:	bfcc      	ite	gt
 800a3ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a3b0:	ea03 0b01 	andle.w	fp, r3, r1
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	4650      	mov	r0, sl
 800a3ba:	4659      	mov	r1, fp
 800a3bc:	f7f6 fb84 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d1a6      	bne.n	800a312 <_strtod_l+0x562>
 800a3c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3c6:	9300      	str	r3, [sp, #0]
 800a3c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a3ca:	9805      	ldr	r0, [sp, #20]
 800a3cc:	462b      	mov	r3, r5
 800a3ce:	463a      	mov	r2, r7
 800a3d0:	f7ff f8c6 	bl	8009560 <__s2b>
 800a3d4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	f43f af05 	beq.w	800a1e6 <_strtod_l+0x436>
 800a3dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3de:	2a00      	cmp	r2, #0
 800a3e0:	eba9 0308 	sub.w	r3, r9, r8
 800a3e4:	bfa8      	it	ge
 800a3e6:	2300      	movge	r3, #0
 800a3e8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a3ea:	2400      	movs	r4, #0
 800a3ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a3f0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a3f2:	46a0      	mov	r8, r4
 800a3f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3f6:	9805      	ldr	r0, [sp, #20]
 800a3f8:	6859      	ldr	r1, [r3, #4]
 800a3fa:	f7ff f809 	bl	8009410 <_Balloc>
 800a3fe:	4681      	mov	r9, r0
 800a400:	2800      	cmp	r0, #0
 800a402:	f43f aef4 	beq.w	800a1ee <_strtod_l+0x43e>
 800a406:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a408:	691a      	ldr	r2, [r3, #16]
 800a40a:	3202      	adds	r2, #2
 800a40c:	f103 010c 	add.w	r1, r3, #12
 800a410:	0092      	lsls	r2, r2, #2
 800a412:	300c      	adds	r0, #12
 800a414:	f000 ff38 	bl	800b288 <memcpy>
 800a418:	ec4b ab10 	vmov	d0, sl, fp
 800a41c:	9805      	ldr	r0, [sp, #20]
 800a41e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a420:	a91b      	add	r1, sp, #108	@ 0x6c
 800a422:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a426:	f7ff fbd7 	bl	8009bd8 <__d2b>
 800a42a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a42c:	2800      	cmp	r0, #0
 800a42e:	f43f aede 	beq.w	800a1ee <_strtod_l+0x43e>
 800a432:	9805      	ldr	r0, [sp, #20]
 800a434:	2101      	movs	r1, #1
 800a436:	f7ff f929 	bl	800968c <__i2b>
 800a43a:	4680      	mov	r8, r0
 800a43c:	b948      	cbnz	r0, 800a452 <_strtod_l+0x6a2>
 800a43e:	f04f 0800 	mov.w	r8, #0
 800a442:	e6d4      	b.n	800a1ee <_strtod_l+0x43e>
 800a444:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a448:	fa02 f303 	lsl.w	r3, r2, r3
 800a44c:	ea03 0a0a 	and.w	sl, r3, sl
 800a450:	e7b0      	b.n	800a3b4 <_strtod_l+0x604>
 800a452:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a454:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a456:	2d00      	cmp	r5, #0
 800a458:	bfab      	itete	ge
 800a45a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a45c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a45e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a460:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a462:	bfac      	ite	ge
 800a464:	18ef      	addge	r7, r5, r3
 800a466:	1b5e      	sublt	r6, r3, r5
 800a468:	9b08      	ldr	r3, [sp, #32]
 800a46a:	1aed      	subs	r5, r5, r3
 800a46c:	4415      	add	r5, r2
 800a46e:	4b66      	ldr	r3, [pc, #408]	@ (800a608 <_strtod_l+0x858>)
 800a470:	3d01      	subs	r5, #1
 800a472:	429d      	cmp	r5, r3
 800a474:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a478:	da50      	bge.n	800a51c <_strtod_l+0x76c>
 800a47a:	1b5b      	subs	r3, r3, r5
 800a47c:	2b1f      	cmp	r3, #31
 800a47e:	eba2 0203 	sub.w	r2, r2, r3
 800a482:	f04f 0101 	mov.w	r1, #1
 800a486:	dc3d      	bgt.n	800a504 <_strtod_l+0x754>
 800a488:	fa01 f303 	lsl.w	r3, r1, r3
 800a48c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a48e:	2300      	movs	r3, #0
 800a490:	9310      	str	r3, [sp, #64]	@ 0x40
 800a492:	18bd      	adds	r5, r7, r2
 800a494:	9b08      	ldr	r3, [sp, #32]
 800a496:	42af      	cmp	r7, r5
 800a498:	4416      	add	r6, r2
 800a49a:	441e      	add	r6, r3
 800a49c:	463b      	mov	r3, r7
 800a49e:	bfa8      	it	ge
 800a4a0:	462b      	movge	r3, r5
 800a4a2:	42b3      	cmp	r3, r6
 800a4a4:	bfa8      	it	ge
 800a4a6:	4633      	movge	r3, r6
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	bfc2      	ittt	gt
 800a4ac:	1aed      	subgt	r5, r5, r3
 800a4ae:	1af6      	subgt	r6, r6, r3
 800a4b0:	1aff      	subgt	r7, r7, r3
 800a4b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	dd16      	ble.n	800a4e6 <_strtod_l+0x736>
 800a4b8:	4641      	mov	r1, r8
 800a4ba:	9805      	ldr	r0, [sp, #20]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	f7ff f9a5 	bl	800980c <__pow5mult>
 800a4c2:	4680      	mov	r8, r0
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	d0ba      	beq.n	800a43e <_strtod_l+0x68e>
 800a4c8:	4601      	mov	r1, r0
 800a4ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a4cc:	9805      	ldr	r0, [sp, #20]
 800a4ce:	f7ff f8f3 	bl	80096b8 <__multiply>
 800a4d2:	900e      	str	r0, [sp, #56]	@ 0x38
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	f43f ae8a 	beq.w	800a1ee <_strtod_l+0x43e>
 800a4da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4dc:	9805      	ldr	r0, [sp, #20]
 800a4de:	f7fe ffd7 	bl	8009490 <_Bfree>
 800a4e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4e4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4e6:	2d00      	cmp	r5, #0
 800a4e8:	dc1d      	bgt.n	800a526 <_strtod_l+0x776>
 800a4ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	dd23      	ble.n	800a538 <_strtod_l+0x788>
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a4f4:	9805      	ldr	r0, [sp, #20]
 800a4f6:	f7ff f989 	bl	800980c <__pow5mult>
 800a4fa:	4681      	mov	r9, r0
 800a4fc:	b9e0      	cbnz	r0, 800a538 <_strtod_l+0x788>
 800a4fe:	f04f 0900 	mov.w	r9, #0
 800a502:	e674      	b.n	800a1ee <_strtod_l+0x43e>
 800a504:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a508:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a50c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a510:	35e2      	adds	r5, #226	@ 0xe2
 800a512:	fa01 f305 	lsl.w	r3, r1, r5
 800a516:	9310      	str	r3, [sp, #64]	@ 0x40
 800a518:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a51a:	e7ba      	b.n	800a492 <_strtod_l+0x6e2>
 800a51c:	2300      	movs	r3, #0
 800a51e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a520:	2301      	movs	r3, #1
 800a522:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a524:	e7b5      	b.n	800a492 <_strtod_l+0x6e2>
 800a526:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a528:	9805      	ldr	r0, [sp, #20]
 800a52a:	462a      	mov	r2, r5
 800a52c:	f7ff f9c8 	bl	80098c0 <__lshift>
 800a530:	901a      	str	r0, [sp, #104]	@ 0x68
 800a532:	2800      	cmp	r0, #0
 800a534:	d1d9      	bne.n	800a4ea <_strtod_l+0x73a>
 800a536:	e65a      	b.n	800a1ee <_strtod_l+0x43e>
 800a538:	2e00      	cmp	r6, #0
 800a53a:	dd07      	ble.n	800a54c <_strtod_l+0x79c>
 800a53c:	4649      	mov	r1, r9
 800a53e:	9805      	ldr	r0, [sp, #20]
 800a540:	4632      	mov	r2, r6
 800a542:	f7ff f9bd 	bl	80098c0 <__lshift>
 800a546:	4681      	mov	r9, r0
 800a548:	2800      	cmp	r0, #0
 800a54a:	d0d8      	beq.n	800a4fe <_strtod_l+0x74e>
 800a54c:	2f00      	cmp	r7, #0
 800a54e:	dd08      	ble.n	800a562 <_strtod_l+0x7b2>
 800a550:	4641      	mov	r1, r8
 800a552:	9805      	ldr	r0, [sp, #20]
 800a554:	463a      	mov	r2, r7
 800a556:	f7ff f9b3 	bl	80098c0 <__lshift>
 800a55a:	4680      	mov	r8, r0
 800a55c:	2800      	cmp	r0, #0
 800a55e:	f43f ae46 	beq.w	800a1ee <_strtod_l+0x43e>
 800a562:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a564:	9805      	ldr	r0, [sp, #20]
 800a566:	464a      	mov	r2, r9
 800a568:	f7ff fa32 	bl	80099d0 <__mdiff>
 800a56c:	4604      	mov	r4, r0
 800a56e:	2800      	cmp	r0, #0
 800a570:	f43f ae3d 	beq.w	800a1ee <_strtod_l+0x43e>
 800a574:	68c3      	ldr	r3, [r0, #12]
 800a576:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a578:	2300      	movs	r3, #0
 800a57a:	60c3      	str	r3, [r0, #12]
 800a57c:	4641      	mov	r1, r8
 800a57e:	f7ff fa0b 	bl	8009998 <__mcmp>
 800a582:	2800      	cmp	r0, #0
 800a584:	da46      	bge.n	800a614 <_strtod_l+0x864>
 800a586:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a588:	ea53 030a 	orrs.w	r3, r3, sl
 800a58c:	d16c      	bne.n	800a668 <_strtod_l+0x8b8>
 800a58e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a592:	2b00      	cmp	r3, #0
 800a594:	d168      	bne.n	800a668 <_strtod_l+0x8b8>
 800a596:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a59a:	0d1b      	lsrs	r3, r3, #20
 800a59c:	051b      	lsls	r3, r3, #20
 800a59e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5a2:	d961      	bls.n	800a668 <_strtod_l+0x8b8>
 800a5a4:	6963      	ldr	r3, [r4, #20]
 800a5a6:	b913      	cbnz	r3, 800a5ae <_strtod_l+0x7fe>
 800a5a8:	6923      	ldr	r3, [r4, #16]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	dd5c      	ble.n	800a668 <_strtod_l+0x8b8>
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	9805      	ldr	r0, [sp, #20]
 800a5b4:	f7ff f984 	bl	80098c0 <__lshift>
 800a5b8:	4641      	mov	r1, r8
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	f7ff f9ec 	bl	8009998 <__mcmp>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	dd51      	ble.n	800a668 <_strtod_l+0x8b8>
 800a5c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5c8:	9a08      	ldr	r2, [sp, #32]
 800a5ca:	0d1b      	lsrs	r3, r3, #20
 800a5cc:	051b      	lsls	r3, r3, #20
 800a5ce:	2a00      	cmp	r2, #0
 800a5d0:	d06b      	beq.n	800a6aa <_strtod_l+0x8fa>
 800a5d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5d6:	d868      	bhi.n	800a6aa <_strtod_l+0x8fa>
 800a5d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a5dc:	f67f ae9d 	bls.w	800a31a <_strtod_l+0x56a>
 800a5e0:	4b0a      	ldr	r3, [pc, #40]	@ (800a60c <_strtod_l+0x85c>)
 800a5e2:	4650      	mov	r0, sl
 800a5e4:	4659      	mov	r1, fp
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f7f6 f806 	bl	80005f8 <__aeabi_dmul>
 800a5ec:	4b08      	ldr	r3, [pc, #32]	@ (800a610 <_strtod_l+0x860>)
 800a5ee:	400b      	ands	r3, r1
 800a5f0:	4682      	mov	sl, r0
 800a5f2:	468b      	mov	fp, r1
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f47f ae05 	bne.w	800a204 <_strtod_l+0x454>
 800a5fa:	9a05      	ldr	r2, [sp, #20]
 800a5fc:	2322      	movs	r3, #34	@ 0x22
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	e600      	b.n	800a204 <_strtod_l+0x454>
 800a602:	bf00      	nop
 800a604:	0800be88 	.word	0x0800be88
 800a608:	fffffc02 	.word	0xfffffc02
 800a60c:	39500000 	.word	0x39500000
 800a610:	7ff00000 	.word	0x7ff00000
 800a614:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a618:	d165      	bne.n	800a6e6 <_strtod_l+0x936>
 800a61a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a61c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a620:	b35a      	cbz	r2, 800a67a <_strtod_l+0x8ca>
 800a622:	4a9f      	ldr	r2, [pc, #636]	@ (800a8a0 <_strtod_l+0xaf0>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d12b      	bne.n	800a680 <_strtod_l+0x8d0>
 800a628:	9b08      	ldr	r3, [sp, #32]
 800a62a:	4651      	mov	r1, sl
 800a62c:	b303      	cbz	r3, 800a670 <_strtod_l+0x8c0>
 800a62e:	4b9d      	ldr	r3, [pc, #628]	@ (800a8a4 <_strtod_l+0xaf4>)
 800a630:	465a      	mov	r2, fp
 800a632:	4013      	ands	r3, r2
 800a634:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a638:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a63c:	d81b      	bhi.n	800a676 <_strtod_l+0x8c6>
 800a63e:	0d1b      	lsrs	r3, r3, #20
 800a640:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a644:	fa02 f303 	lsl.w	r3, r2, r3
 800a648:	4299      	cmp	r1, r3
 800a64a:	d119      	bne.n	800a680 <_strtod_l+0x8d0>
 800a64c:	4b96      	ldr	r3, [pc, #600]	@ (800a8a8 <_strtod_l+0xaf8>)
 800a64e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a650:	429a      	cmp	r2, r3
 800a652:	d102      	bne.n	800a65a <_strtod_l+0x8aa>
 800a654:	3101      	adds	r1, #1
 800a656:	f43f adca 	beq.w	800a1ee <_strtod_l+0x43e>
 800a65a:	4b92      	ldr	r3, [pc, #584]	@ (800a8a4 <_strtod_l+0xaf4>)
 800a65c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a65e:	401a      	ands	r2, r3
 800a660:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a664:	f04f 0a00 	mov.w	sl, #0
 800a668:	9b08      	ldr	r3, [sp, #32]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1b8      	bne.n	800a5e0 <_strtod_l+0x830>
 800a66e:	e5c9      	b.n	800a204 <_strtod_l+0x454>
 800a670:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a674:	e7e8      	b.n	800a648 <_strtod_l+0x898>
 800a676:	4613      	mov	r3, r2
 800a678:	e7e6      	b.n	800a648 <_strtod_l+0x898>
 800a67a:	ea53 030a 	orrs.w	r3, r3, sl
 800a67e:	d0a1      	beq.n	800a5c4 <_strtod_l+0x814>
 800a680:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a682:	b1db      	cbz	r3, 800a6bc <_strtod_l+0x90c>
 800a684:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a686:	4213      	tst	r3, r2
 800a688:	d0ee      	beq.n	800a668 <_strtod_l+0x8b8>
 800a68a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a68c:	9a08      	ldr	r2, [sp, #32]
 800a68e:	4650      	mov	r0, sl
 800a690:	4659      	mov	r1, fp
 800a692:	b1bb      	cbz	r3, 800a6c4 <_strtod_l+0x914>
 800a694:	f7ff fb6e 	bl	8009d74 <sulp>
 800a698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a69c:	ec53 2b10 	vmov	r2, r3, d0
 800a6a0:	f7f5 fdf4 	bl	800028c <__adddf3>
 800a6a4:	4682      	mov	sl, r0
 800a6a6:	468b      	mov	fp, r1
 800a6a8:	e7de      	b.n	800a668 <_strtod_l+0x8b8>
 800a6aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a6ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a6b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a6b6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a6ba:	e7d5      	b.n	800a668 <_strtod_l+0x8b8>
 800a6bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a6be:	ea13 0f0a 	tst.w	r3, sl
 800a6c2:	e7e1      	b.n	800a688 <_strtod_l+0x8d8>
 800a6c4:	f7ff fb56 	bl	8009d74 <sulp>
 800a6c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a6cc:	ec53 2b10 	vmov	r2, r3, d0
 800a6d0:	f7f5 fdda 	bl	8000288 <__aeabi_dsub>
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	4682      	mov	sl, r0
 800a6da:	468b      	mov	fp, r1
 800a6dc:	f7f6 f9f4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a6e0:	2800      	cmp	r0, #0
 800a6e2:	d0c1      	beq.n	800a668 <_strtod_l+0x8b8>
 800a6e4:	e619      	b.n	800a31a <_strtod_l+0x56a>
 800a6e6:	4641      	mov	r1, r8
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	f7ff facd 	bl	8009c88 <__ratio>
 800a6ee:	ec57 6b10 	vmov	r6, r7, d0
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	4639      	mov	r1, r7
 800a6fc:	f7f6 f9f8 	bl	8000af0 <__aeabi_dcmple>
 800a700:	2800      	cmp	r0, #0
 800a702:	d06f      	beq.n	800a7e4 <_strtod_l+0xa34>
 800a704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a706:	2b00      	cmp	r3, #0
 800a708:	d17a      	bne.n	800a800 <_strtod_l+0xa50>
 800a70a:	f1ba 0f00 	cmp.w	sl, #0
 800a70e:	d158      	bne.n	800a7c2 <_strtod_l+0xa12>
 800a710:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a712:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a716:	2b00      	cmp	r3, #0
 800a718:	d15a      	bne.n	800a7d0 <_strtod_l+0xa20>
 800a71a:	4b64      	ldr	r3, [pc, #400]	@ (800a8ac <_strtod_l+0xafc>)
 800a71c:	2200      	movs	r2, #0
 800a71e:	4630      	mov	r0, r6
 800a720:	4639      	mov	r1, r7
 800a722:	f7f6 f9db 	bl	8000adc <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	d159      	bne.n	800a7de <_strtod_l+0xa2e>
 800a72a:	4630      	mov	r0, r6
 800a72c:	4639      	mov	r1, r7
 800a72e:	4b60      	ldr	r3, [pc, #384]	@ (800a8b0 <_strtod_l+0xb00>)
 800a730:	2200      	movs	r2, #0
 800a732:	f7f5 ff61 	bl	80005f8 <__aeabi_dmul>
 800a736:	4606      	mov	r6, r0
 800a738:	460f      	mov	r7, r1
 800a73a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a73e:	9606      	str	r6, [sp, #24]
 800a740:	9307      	str	r3, [sp, #28]
 800a742:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a746:	4d57      	ldr	r5, [pc, #348]	@ (800a8a4 <_strtod_l+0xaf4>)
 800a748:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a74c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a74e:	401d      	ands	r5, r3
 800a750:	4b58      	ldr	r3, [pc, #352]	@ (800a8b4 <_strtod_l+0xb04>)
 800a752:	429d      	cmp	r5, r3
 800a754:	f040 80b2 	bne.w	800a8bc <_strtod_l+0xb0c>
 800a758:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a75a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a75e:	ec4b ab10 	vmov	d0, sl, fp
 800a762:	f7ff f9c9 	bl	8009af8 <__ulp>
 800a766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a76a:	ec51 0b10 	vmov	r0, r1, d0
 800a76e:	f7f5 ff43 	bl	80005f8 <__aeabi_dmul>
 800a772:	4652      	mov	r2, sl
 800a774:	465b      	mov	r3, fp
 800a776:	f7f5 fd89 	bl	800028c <__adddf3>
 800a77a:	460b      	mov	r3, r1
 800a77c:	4949      	ldr	r1, [pc, #292]	@ (800a8a4 <_strtod_l+0xaf4>)
 800a77e:	4a4e      	ldr	r2, [pc, #312]	@ (800a8b8 <_strtod_l+0xb08>)
 800a780:	4019      	ands	r1, r3
 800a782:	4291      	cmp	r1, r2
 800a784:	4682      	mov	sl, r0
 800a786:	d942      	bls.n	800a80e <_strtod_l+0xa5e>
 800a788:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a78a:	4b47      	ldr	r3, [pc, #284]	@ (800a8a8 <_strtod_l+0xaf8>)
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d103      	bne.n	800a798 <_strtod_l+0x9e8>
 800a790:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a792:	3301      	adds	r3, #1
 800a794:	f43f ad2b 	beq.w	800a1ee <_strtod_l+0x43e>
 800a798:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a8a8 <_strtod_l+0xaf8>
 800a79c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a7a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7a2:	9805      	ldr	r0, [sp, #20]
 800a7a4:	f7fe fe74 	bl	8009490 <_Bfree>
 800a7a8:	9805      	ldr	r0, [sp, #20]
 800a7aa:	4649      	mov	r1, r9
 800a7ac:	f7fe fe70 	bl	8009490 <_Bfree>
 800a7b0:	9805      	ldr	r0, [sp, #20]
 800a7b2:	4641      	mov	r1, r8
 800a7b4:	f7fe fe6c 	bl	8009490 <_Bfree>
 800a7b8:	9805      	ldr	r0, [sp, #20]
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	f7fe fe68 	bl	8009490 <_Bfree>
 800a7c0:	e618      	b.n	800a3f4 <_strtod_l+0x644>
 800a7c2:	f1ba 0f01 	cmp.w	sl, #1
 800a7c6:	d103      	bne.n	800a7d0 <_strtod_l+0xa20>
 800a7c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	f43f ada5 	beq.w	800a31a <_strtod_l+0x56a>
 800a7d0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a880 <_strtod_l+0xad0>
 800a7d4:	4f35      	ldr	r7, [pc, #212]	@ (800a8ac <_strtod_l+0xafc>)
 800a7d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a7da:	2600      	movs	r6, #0
 800a7dc:	e7b1      	b.n	800a742 <_strtod_l+0x992>
 800a7de:	4f34      	ldr	r7, [pc, #208]	@ (800a8b0 <_strtod_l+0xb00>)
 800a7e0:	2600      	movs	r6, #0
 800a7e2:	e7aa      	b.n	800a73a <_strtod_l+0x98a>
 800a7e4:	4b32      	ldr	r3, [pc, #200]	@ (800a8b0 <_strtod_l+0xb00>)
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f7f5 ff04 	bl	80005f8 <__aeabi_dmul>
 800a7f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	460f      	mov	r7, r1
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d09f      	beq.n	800a73a <_strtod_l+0x98a>
 800a7fa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a7fe:	e7a0      	b.n	800a742 <_strtod_l+0x992>
 800a800:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a888 <_strtod_l+0xad8>
 800a804:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a808:	ec57 6b17 	vmov	r6, r7, d7
 800a80c:	e799      	b.n	800a742 <_strtod_l+0x992>
 800a80e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a812:	9b08      	ldr	r3, [sp, #32]
 800a814:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d1c1      	bne.n	800a7a0 <_strtod_l+0x9f0>
 800a81c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a820:	0d1b      	lsrs	r3, r3, #20
 800a822:	051b      	lsls	r3, r3, #20
 800a824:	429d      	cmp	r5, r3
 800a826:	d1bb      	bne.n	800a7a0 <_strtod_l+0x9f0>
 800a828:	4630      	mov	r0, r6
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f6 fa44 	bl	8000cb8 <__aeabi_d2lz>
 800a830:	f7f5 feb4 	bl	800059c <__aeabi_l2d>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f5 fd24 	bl	8000288 <__aeabi_dsub>
 800a840:	460b      	mov	r3, r1
 800a842:	4602      	mov	r2, r0
 800a844:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a848:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a84c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a84e:	ea46 060a 	orr.w	r6, r6, sl
 800a852:	431e      	orrs	r6, r3
 800a854:	d06f      	beq.n	800a936 <_strtod_l+0xb86>
 800a856:	a30e      	add	r3, pc, #56	@ (adr r3, 800a890 <_strtod_l+0xae0>)
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f7f6 f93e 	bl	8000adc <__aeabi_dcmplt>
 800a860:	2800      	cmp	r0, #0
 800a862:	f47f accf 	bne.w	800a204 <_strtod_l+0x454>
 800a866:	a30c      	add	r3, pc, #48	@ (adr r3, 800a898 <_strtod_l+0xae8>)
 800a868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a870:	f7f6 f952 	bl	8000b18 <__aeabi_dcmpgt>
 800a874:	2800      	cmp	r0, #0
 800a876:	d093      	beq.n	800a7a0 <_strtod_l+0x9f0>
 800a878:	e4c4      	b.n	800a204 <_strtod_l+0x454>
 800a87a:	bf00      	nop
 800a87c:	f3af 8000 	nop.w
 800a880:	00000000 	.word	0x00000000
 800a884:	bff00000 	.word	0xbff00000
 800a888:	00000000 	.word	0x00000000
 800a88c:	3ff00000 	.word	0x3ff00000
 800a890:	94a03595 	.word	0x94a03595
 800a894:	3fdfffff 	.word	0x3fdfffff
 800a898:	35afe535 	.word	0x35afe535
 800a89c:	3fe00000 	.word	0x3fe00000
 800a8a0:	000fffff 	.word	0x000fffff
 800a8a4:	7ff00000 	.word	0x7ff00000
 800a8a8:	7fefffff 	.word	0x7fefffff
 800a8ac:	3ff00000 	.word	0x3ff00000
 800a8b0:	3fe00000 	.word	0x3fe00000
 800a8b4:	7fe00000 	.word	0x7fe00000
 800a8b8:	7c9fffff 	.word	0x7c9fffff
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	b323      	cbz	r3, 800a90a <_strtod_l+0xb5a>
 800a8c0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a8c4:	d821      	bhi.n	800a90a <_strtod_l+0xb5a>
 800a8c6:	a328      	add	r3, pc, #160	@ (adr r3, 800a968 <_strtod_l+0xbb8>)
 800a8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f7f6 f90e 	bl	8000af0 <__aeabi_dcmple>
 800a8d4:	b1a0      	cbz	r0, 800a900 <_strtod_l+0xb50>
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	4630      	mov	r0, r6
 800a8da:	f7f6 f965 	bl	8000ba8 <__aeabi_d2uiz>
 800a8de:	2801      	cmp	r0, #1
 800a8e0:	bf38      	it	cc
 800a8e2:	2001      	movcc	r0, #1
 800a8e4:	f7f5 fe0e 	bl	8000504 <__aeabi_ui2d>
 800a8e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	460f      	mov	r7, r1
 800a8ee:	b9fb      	cbnz	r3, 800a930 <_strtod_l+0xb80>
 800a8f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a8f4:	9014      	str	r0, [sp, #80]	@ 0x50
 800a8f6:	9315      	str	r3, [sp, #84]	@ 0x54
 800a8f8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a8fc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a900:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a902:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a906:	1b5b      	subs	r3, r3, r5
 800a908:	9311      	str	r3, [sp, #68]	@ 0x44
 800a90a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a90e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a912:	f7ff f8f1 	bl	8009af8 <__ulp>
 800a916:	4650      	mov	r0, sl
 800a918:	ec53 2b10 	vmov	r2, r3, d0
 800a91c:	4659      	mov	r1, fp
 800a91e:	f7f5 fe6b 	bl	80005f8 <__aeabi_dmul>
 800a922:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a926:	f7f5 fcb1 	bl	800028c <__adddf3>
 800a92a:	4682      	mov	sl, r0
 800a92c:	468b      	mov	fp, r1
 800a92e:	e770      	b.n	800a812 <_strtod_l+0xa62>
 800a930:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a934:	e7e0      	b.n	800a8f8 <_strtod_l+0xb48>
 800a936:	a30e      	add	r3, pc, #56	@ (adr r3, 800a970 <_strtod_l+0xbc0>)
 800a938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a93c:	f7f6 f8ce 	bl	8000adc <__aeabi_dcmplt>
 800a940:	e798      	b.n	800a874 <_strtod_l+0xac4>
 800a942:	2300      	movs	r3, #0
 800a944:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a946:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a948:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a94a:	6013      	str	r3, [r2, #0]
 800a94c:	f7ff ba6d 	b.w	8009e2a <_strtod_l+0x7a>
 800a950:	2a65      	cmp	r2, #101	@ 0x65
 800a952:	f43f ab66 	beq.w	800a022 <_strtod_l+0x272>
 800a956:	2a45      	cmp	r2, #69	@ 0x45
 800a958:	f43f ab63 	beq.w	800a022 <_strtod_l+0x272>
 800a95c:	2301      	movs	r3, #1
 800a95e:	f7ff bb9e 	b.w	800a09e <_strtod_l+0x2ee>
 800a962:	bf00      	nop
 800a964:	f3af 8000 	nop.w
 800a968:	ffc00000 	.word	0xffc00000
 800a96c:	41dfffff 	.word	0x41dfffff
 800a970:	94a03595 	.word	0x94a03595
 800a974:	3fcfffff 	.word	0x3fcfffff

0800a978 <_strtod_r>:
 800a978:	4b01      	ldr	r3, [pc, #4]	@ (800a980 <_strtod_r+0x8>)
 800a97a:	f7ff ba19 	b.w	8009db0 <_strtod_l>
 800a97e:	bf00      	nop
 800a980:	20000068 	.word	0x20000068

0800a984 <_strtol_l.constprop.0>:
 800a984:	2b24      	cmp	r3, #36	@ 0x24
 800a986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a98a:	4686      	mov	lr, r0
 800a98c:	4690      	mov	r8, r2
 800a98e:	d801      	bhi.n	800a994 <_strtol_l.constprop.0+0x10>
 800a990:	2b01      	cmp	r3, #1
 800a992:	d106      	bne.n	800a9a2 <_strtol_l.constprop.0+0x1e>
 800a994:	f7fd fdba 	bl	800850c <__errno>
 800a998:	2316      	movs	r3, #22
 800a99a:	6003      	str	r3, [r0, #0]
 800a99c:	2000      	movs	r0, #0
 800a99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a2:	4834      	ldr	r0, [pc, #208]	@ (800aa74 <_strtol_l.constprop.0+0xf0>)
 800a9a4:	460d      	mov	r5, r1
 800a9a6:	462a      	mov	r2, r5
 800a9a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9ac:	5d06      	ldrb	r6, [r0, r4]
 800a9ae:	f016 0608 	ands.w	r6, r6, #8
 800a9b2:	d1f8      	bne.n	800a9a6 <_strtol_l.constprop.0+0x22>
 800a9b4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a9b6:	d12d      	bne.n	800aa14 <_strtol_l.constprop.0+0x90>
 800a9b8:	782c      	ldrb	r4, [r5, #0]
 800a9ba:	2601      	movs	r6, #1
 800a9bc:	1c95      	adds	r5, r2, #2
 800a9be:	f033 0210 	bics.w	r2, r3, #16
 800a9c2:	d109      	bne.n	800a9d8 <_strtol_l.constprop.0+0x54>
 800a9c4:	2c30      	cmp	r4, #48	@ 0x30
 800a9c6:	d12a      	bne.n	800aa1e <_strtol_l.constprop.0+0x9a>
 800a9c8:	782a      	ldrb	r2, [r5, #0]
 800a9ca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a9ce:	2a58      	cmp	r2, #88	@ 0x58
 800a9d0:	d125      	bne.n	800aa1e <_strtol_l.constprop.0+0x9a>
 800a9d2:	786c      	ldrb	r4, [r5, #1]
 800a9d4:	2310      	movs	r3, #16
 800a9d6:	3502      	adds	r5, #2
 800a9d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a9dc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	fbbc f9f3 	udiv	r9, ip, r3
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a9ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a9f0:	2f09      	cmp	r7, #9
 800a9f2:	d81b      	bhi.n	800aa2c <_strtol_l.constprop.0+0xa8>
 800a9f4:	463c      	mov	r4, r7
 800a9f6:	42a3      	cmp	r3, r4
 800a9f8:	dd27      	ble.n	800aa4a <_strtol_l.constprop.0+0xc6>
 800a9fa:	1c57      	adds	r7, r2, #1
 800a9fc:	d007      	beq.n	800aa0e <_strtol_l.constprop.0+0x8a>
 800a9fe:	4581      	cmp	r9, r0
 800aa00:	d320      	bcc.n	800aa44 <_strtol_l.constprop.0+0xc0>
 800aa02:	d101      	bne.n	800aa08 <_strtol_l.constprop.0+0x84>
 800aa04:	45a2      	cmp	sl, r4
 800aa06:	db1d      	blt.n	800aa44 <_strtol_l.constprop.0+0xc0>
 800aa08:	fb00 4003 	mla	r0, r0, r3, r4
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa12:	e7eb      	b.n	800a9ec <_strtol_l.constprop.0+0x68>
 800aa14:	2c2b      	cmp	r4, #43	@ 0x2b
 800aa16:	bf04      	itt	eq
 800aa18:	782c      	ldrbeq	r4, [r5, #0]
 800aa1a:	1c95      	addeq	r5, r2, #2
 800aa1c:	e7cf      	b.n	800a9be <_strtol_l.constprop.0+0x3a>
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1da      	bne.n	800a9d8 <_strtol_l.constprop.0+0x54>
 800aa22:	2c30      	cmp	r4, #48	@ 0x30
 800aa24:	bf0c      	ite	eq
 800aa26:	2308      	moveq	r3, #8
 800aa28:	230a      	movne	r3, #10
 800aa2a:	e7d5      	b.n	800a9d8 <_strtol_l.constprop.0+0x54>
 800aa2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800aa30:	2f19      	cmp	r7, #25
 800aa32:	d801      	bhi.n	800aa38 <_strtol_l.constprop.0+0xb4>
 800aa34:	3c37      	subs	r4, #55	@ 0x37
 800aa36:	e7de      	b.n	800a9f6 <_strtol_l.constprop.0+0x72>
 800aa38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800aa3c:	2f19      	cmp	r7, #25
 800aa3e:	d804      	bhi.n	800aa4a <_strtol_l.constprop.0+0xc6>
 800aa40:	3c57      	subs	r4, #87	@ 0x57
 800aa42:	e7d8      	b.n	800a9f6 <_strtol_l.constprop.0+0x72>
 800aa44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa48:	e7e1      	b.n	800aa0e <_strtol_l.constprop.0+0x8a>
 800aa4a:	1c53      	adds	r3, r2, #1
 800aa4c:	d108      	bne.n	800aa60 <_strtol_l.constprop.0+0xdc>
 800aa4e:	2322      	movs	r3, #34	@ 0x22
 800aa50:	f8ce 3000 	str.w	r3, [lr]
 800aa54:	4660      	mov	r0, ip
 800aa56:	f1b8 0f00 	cmp.w	r8, #0
 800aa5a:	d0a0      	beq.n	800a99e <_strtol_l.constprop.0+0x1a>
 800aa5c:	1e69      	subs	r1, r5, #1
 800aa5e:	e006      	b.n	800aa6e <_strtol_l.constprop.0+0xea>
 800aa60:	b106      	cbz	r6, 800aa64 <_strtol_l.constprop.0+0xe0>
 800aa62:	4240      	negs	r0, r0
 800aa64:	f1b8 0f00 	cmp.w	r8, #0
 800aa68:	d099      	beq.n	800a99e <_strtol_l.constprop.0+0x1a>
 800aa6a:	2a00      	cmp	r2, #0
 800aa6c:	d1f6      	bne.n	800aa5c <_strtol_l.constprop.0+0xd8>
 800aa6e:	f8c8 1000 	str.w	r1, [r8]
 800aa72:	e794      	b.n	800a99e <_strtol_l.constprop.0+0x1a>
 800aa74:	0800beb1 	.word	0x0800beb1

0800aa78 <_strtol_r>:
 800aa78:	f7ff bf84 	b.w	800a984 <_strtol_l.constprop.0>

0800aa7c <__ssputs_r>:
 800aa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa80:	688e      	ldr	r6, [r1, #8]
 800aa82:	461f      	mov	r7, r3
 800aa84:	42be      	cmp	r6, r7
 800aa86:	680b      	ldr	r3, [r1, #0]
 800aa88:	4682      	mov	sl, r0
 800aa8a:	460c      	mov	r4, r1
 800aa8c:	4690      	mov	r8, r2
 800aa8e:	d82d      	bhi.n	800aaec <__ssputs_r+0x70>
 800aa90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aa98:	d026      	beq.n	800aae8 <__ssputs_r+0x6c>
 800aa9a:	6965      	ldr	r5, [r4, #20]
 800aa9c:	6909      	ldr	r1, [r1, #16]
 800aa9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aaa2:	eba3 0901 	sub.w	r9, r3, r1
 800aaa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aaaa:	1c7b      	adds	r3, r7, #1
 800aaac:	444b      	add	r3, r9
 800aaae:	106d      	asrs	r5, r5, #1
 800aab0:	429d      	cmp	r5, r3
 800aab2:	bf38      	it	cc
 800aab4:	461d      	movcc	r5, r3
 800aab6:	0553      	lsls	r3, r2, #21
 800aab8:	d527      	bpl.n	800ab0a <__ssputs_r+0x8e>
 800aaba:	4629      	mov	r1, r5
 800aabc:	f7fe fc1c 	bl	80092f8 <_malloc_r>
 800aac0:	4606      	mov	r6, r0
 800aac2:	b360      	cbz	r0, 800ab1e <__ssputs_r+0xa2>
 800aac4:	6921      	ldr	r1, [r4, #16]
 800aac6:	464a      	mov	r2, r9
 800aac8:	f000 fbde 	bl	800b288 <memcpy>
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	6126      	str	r6, [r4, #16]
 800aada:	6165      	str	r5, [r4, #20]
 800aadc:	444e      	add	r6, r9
 800aade:	eba5 0509 	sub.w	r5, r5, r9
 800aae2:	6026      	str	r6, [r4, #0]
 800aae4:	60a5      	str	r5, [r4, #8]
 800aae6:	463e      	mov	r6, r7
 800aae8:	42be      	cmp	r6, r7
 800aaea:	d900      	bls.n	800aaee <__ssputs_r+0x72>
 800aaec:	463e      	mov	r6, r7
 800aaee:	6820      	ldr	r0, [r4, #0]
 800aaf0:	4632      	mov	r2, r6
 800aaf2:	4641      	mov	r1, r8
 800aaf4:	f000 fb6a 	bl	800b1cc <memmove>
 800aaf8:	68a3      	ldr	r3, [r4, #8]
 800aafa:	1b9b      	subs	r3, r3, r6
 800aafc:	60a3      	str	r3, [r4, #8]
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	4433      	add	r3, r6
 800ab02:	6023      	str	r3, [r4, #0]
 800ab04:	2000      	movs	r0, #0
 800ab06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0a:	462a      	mov	r2, r5
 800ab0c:	f000 ff51 	bl	800b9b2 <_realloc_r>
 800ab10:	4606      	mov	r6, r0
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d1e0      	bne.n	800aad8 <__ssputs_r+0x5c>
 800ab16:	6921      	ldr	r1, [r4, #16]
 800ab18:	4650      	mov	r0, sl
 800ab1a:	f7fe fb79 	bl	8009210 <_free_r>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	f8ca 3000 	str.w	r3, [sl]
 800ab24:	89a3      	ldrh	r3, [r4, #12]
 800ab26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab2a:	81a3      	strh	r3, [r4, #12]
 800ab2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab30:	e7e9      	b.n	800ab06 <__ssputs_r+0x8a>
	...

0800ab34 <_svfiprintf_r>:
 800ab34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab38:	4698      	mov	r8, r3
 800ab3a:	898b      	ldrh	r3, [r1, #12]
 800ab3c:	061b      	lsls	r3, r3, #24
 800ab3e:	b09d      	sub	sp, #116	@ 0x74
 800ab40:	4607      	mov	r7, r0
 800ab42:	460d      	mov	r5, r1
 800ab44:	4614      	mov	r4, r2
 800ab46:	d510      	bpl.n	800ab6a <_svfiprintf_r+0x36>
 800ab48:	690b      	ldr	r3, [r1, #16]
 800ab4a:	b973      	cbnz	r3, 800ab6a <_svfiprintf_r+0x36>
 800ab4c:	2140      	movs	r1, #64	@ 0x40
 800ab4e:	f7fe fbd3 	bl	80092f8 <_malloc_r>
 800ab52:	6028      	str	r0, [r5, #0]
 800ab54:	6128      	str	r0, [r5, #16]
 800ab56:	b930      	cbnz	r0, 800ab66 <_svfiprintf_r+0x32>
 800ab58:	230c      	movs	r3, #12
 800ab5a:	603b      	str	r3, [r7, #0]
 800ab5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab60:	b01d      	add	sp, #116	@ 0x74
 800ab62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab66:	2340      	movs	r3, #64	@ 0x40
 800ab68:	616b      	str	r3, [r5, #20]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab6e:	2320      	movs	r3, #32
 800ab70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab74:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab78:	2330      	movs	r3, #48	@ 0x30
 800ab7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ad18 <_svfiprintf_r+0x1e4>
 800ab7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab82:	f04f 0901 	mov.w	r9, #1
 800ab86:	4623      	mov	r3, r4
 800ab88:	469a      	mov	sl, r3
 800ab8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab8e:	b10a      	cbz	r2, 800ab94 <_svfiprintf_r+0x60>
 800ab90:	2a25      	cmp	r2, #37	@ 0x25
 800ab92:	d1f9      	bne.n	800ab88 <_svfiprintf_r+0x54>
 800ab94:	ebba 0b04 	subs.w	fp, sl, r4
 800ab98:	d00b      	beq.n	800abb2 <_svfiprintf_r+0x7e>
 800ab9a:	465b      	mov	r3, fp
 800ab9c:	4622      	mov	r2, r4
 800ab9e:	4629      	mov	r1, r5
 800aba0:	4638      	mov	r0, r7
 800aba2:	f7ff ff6b 	bl	800aa7c <__ssputs_r>
 800aba6:	3001      	adds	r0, #1
 800aba8:	f000 80a7 	beq.w	800acfa <_svfiprintf_r+0x1c6>
 800abac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abae:	445a      	add	r2, fp
 800abb0:	9209      	str	r2, [sp, #36]	@ 0x24
 800abb2:	f89a 3000 	ldrb.w	r3, [sl]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	f000 809f 	beq.w	800acfa <_svfiprintf_r+0x1c6>
 800abbc:	2300      	movs	r3, #0
 800abbe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abc6:	f10a 0a01 	add.w	sl, sl, #1
 800abca:	9304      	str	r3, [sp, #16]
 800abcc:	9307      	str	r3, [sp, #28]
 800abce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abd2:	931a      	str	r3, [sp, #104]	@ 0x68
 800abd4:	4654      	mov	r4, sl
 800abd6:	2205      	movs	r2, #5
 800abd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abdc:	484e      	ldr	r0, [pc, #312]	@ (800ad18 <_svfiprintf_r+0x1e4>)
 800abde:	f7f5 faf7 	bl	80001d0 <memchr>
 800abe2:	9a04      	ldr	r2, [sp, #16]
 800abe4:	b9d8      	cbnz	r0, 800ac1e <_svfiprintf_r+0xea>
 800abe6:	06d0      	lsls	r0, r2, #27
 800abe8:	bf44      	itt	mi
 800abea:	2320      	movmi	r3, #32
 800abec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abf0:	0711      	lsls	r1, r2, #28
 800abf2:	bf44      	itt	mi
 800abf4:	232b      	movmi	r3, #43	@ 0x2b
 800abf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abfa:	f89a 3000 	ldrb.w	r3, [sl]
 800abfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac00:	d015      	beq.n	800ac2e <_svfiprintf_r+0xfa>
 800ac02:	9a07      	ldr	r2, [sp, #28]
 800ac04:	4654      	mov	r4, sl
 800ac06:	2000      	movs	r0, #0
 800ac08:	f04f 0c0a 	mov.w	ip, #10
 800ac0c:	4621      	mov	r1, r4
 800ac0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac12:	3b30      	subs	r3, #48	@ 0x30
 800ac14:	2b09      	cmp	r3, #9
 800ac16:	d94b      	bls.n	800acb0 <_svfiprintf_r+0x17c>
 800ac18:	b1b0      	cbz	r0, 800ac48 <_svfiprintf_r+0x114>
 800ac1a:	9207      	str	r2, [sp, #28]
 800ac1c:	e014      	b.n	800ac48 <_svfiprintf_r+0x114>
 800ac1e:	eba0 0308 	sub.w	r3, r0, r8
 800ac22:	fa09 f303 	lsl.w	r3, r9, r3
 800ac26:	4313      	orrs	r3, r2
 800ac28:	9304      	str	r3, [sp, #16]
 800ac2a:	46a2      	mov	sl, r4
 800ac2c:	e7d2      	b.n	800abd4 <_svfiprintf_r+0xa0>
 800ac2e:	9b03      	ldr	r3, [sp, #12]
 800ac30:	1d19      	adds	r1, r3, #4
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	9103      	str	r1, [sp, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	bfbb      	ittet	lt
 800ac3a:	425b      	neglt	r3, r3
 800ac3c:	f042 0202 	orrlt.w	r2, r2, #2
 800ac40:	9307      	strge	r3, [sp, #28]
 800ac42:	9307      	strlt	r3, [sp, #28]
 800ac44:	bfb8      	it	lt
 800ac46:	9204      	strlt	r2, [sp, #16]
 800ac48:	7823      	ldrb	r3, [r4, #0]
 800ac4a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac4c:	d10a      	bne.n	800ac64 <_svfiprintf_r+0x130>
 800ac4e:	7863      	ldrb	r3, [r4, #1]
 800ac50:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac52:	d132      	bne.n	800acba <_svfiprintf_r+0x186>
 800ac54:	9b03      	ldr	r3, [sp, #12]
 800ac56:	1d1a      	adds	r2, r3, #4
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	9203      	str	r2, [sp, #12]
 800ac5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac60:	3402      	adds	r4, #2
 800ac62:	9305      	str	r3, [sp, #20]
 800ac64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ad28 <_svfiprintf_r+0x1f4>
 800ac68:	7821      	ldrb	r1, [r4, #0]
 800ac6a:	2203      	movs	r2, #3
 800ac6c:	4650      	mov	r0, sl
 800ac6e:	f7f5 faaf 	bl	80001d0 <memchr>
 800ac72:	b138      	cbz	r0, 800ac84 <_svfiprintf_r+0x150>
 800ac74:	9b04      	ldr	r3, [sp, #16]
 800ac76:	eba0 000a 	sub.w	r0, r0, sl
 800ac7a:	2240      	movs	r2, #64	@ 0x40
 800ac7c:	4082      	lsls	r2, r0
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	3401      	adds	r4, #1
 800ac82:	9304      	str	r3, [sp, #16]
 800ac84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac88:	4824      	ldr	r0, [pc, #144]	@ (800ad1c <_svfiprintf_r+0x1e8>)
 800ac8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac8e:	2206      	movs	r2, #6
 800ac90:	f7f5 fa9e 	bl	80001d0 <memchr>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d036      	beq.n	800ad06 <_svfiprintf_r+0x1d2>
 800ac98:	4b21      	ldr	r3, [pc, #132]	@ (800ad20 <_svfiprintf_r+0x1ec>)
 800ac9a:	bb1b      	cbnz	r3, 800ace4 <_svfiprintf_r+0x1b0>
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	3307      	adds	r3, #7
 800aca0:	f023 0307 	bic.w	r3, r3, #7
 800aca4:	3308      	adds	r3, #8
 800aca6:	9303      	str	r3, [sp, #12]
 800aca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acaa:	4433      	add	r3, r6
 800acac:	9309      	str	r3, [sp, #36]	@ 0x24
 800acae:	e76a      	b.n	800ab86 <_svfiprintf_r+0x52>
 800acb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800acb4:	460c      	mov	r4, r1
 800acb6:	2001      	movs	r0, #1
 800acb8:	e7a8      	b.n	800ac0c <_svfiprintf_r+0xd8>
 800acba:	2300      	movs	r3, #0
 800acbc:	3401      	adds	r4, #1
 800acbe:	9305      	str	r3, [sp, #20]
 800acc0:	4619      	mov	r1, r3
 800acc2:	f04f 0c0a 	mov.w	ip, #10
 800acc6:	4620      	mov	r0, r4
 800acc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800accc:	3a30      	subs	r2, #48	@ 0x30
 800acce:	2a09      	cmp	r2, #9
 800acd0:	d903      	bls.n	800acda <_svfiprintf_r+0x1a6>
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d0c6      	beq.n	800ac64 <_svfiprintf_r+0x130>
 800acd6:	9105      	str	r1, [sp, #20]
 800acd8:	e7c4      	b.n	800ac64 <_svfiprintf_r+0x130>
 800acda:	fb0c 2101 	mla	r1, ip, r1, r2
 800acde:	4604      	mov	r4, r0
 800ace0:	2301      	movs	r3, #1
 800ace2:	e7f0      	b.n	800acc6 <_svfiprintf_r+0x192>
 800ace4:	ab03      	add	r3, sp, #12
 800ace6:	9300      	str	r3, [sp, #0]
 800ace8:	462a      	mov	r2, r5
 800acea:	4b0e      	ldr	r3, [pc, #56]	@ (800ad24 <_svfiprintf_r+0x1f0>)
 800acec:	a904      	add	r1, sp, #16
 800acee:	4638      	mov	r0, r7
 800acf0:	f7fc fbc4 	bl	800747c <_printf_float>
 800acf4:	1c42      	adds	r2, r0, #1
 800acf6:	4606      	mov	r6, r0
 800acf8:	d1d6      	bne.n	800aca8 <_svfiprintf_r+0x174>
 800acfa:	89ab      	ldrh	r3, [r5, #12]
 800acfc:	065b      	lsls	r3, r3, #25
 800acfe:	f53f af2d 	bmi.w	800ab5c <_svfiprintf_r+0x28>
 800ad02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad04:	e72c      	b.n	800ab60 <_svfiprintf_r+0x2c>
 800ad06:	ab03      	add	r3, sp, #12
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	462a      	mov	r2, r5
 800ad0c:	4b05      	ldr	r3, [pc, #20]	@ (800ad24 <_svfiprintf_r+0x1f0>)
 800ad0e:	a904      	add	r1, sp, #16
 800ad10:	4638      	mov	r0, r7
 800ad12:	f7fc fe4b 	bl	80079ac <_printf_i>
 800ad16:	e7ed      	b.n	800acf4 <_svfiprintf_r+0x1c0>
 800ad18:	0800bfb1 	.word	0x0800bfb1
 800ad1c:	0800bfbb 	.word	0x0800bfbb
 800ad20:	0800747d 	.word	0x0800747d
 800ad24:	0800aa7d 	.word	0x0800aa7d
 800ad28:	0800bfb7 	.word	0x0800bfb7

0800ad2c <__sfputc_r>:
 800ad2c:	6893      	ldr	r3, [r2, #8]
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	b410      	push	{r4}
 800ad34:	6093      	str	r3, [r2, #8]
 800ad36:	da08      	bge.n	800ad4a <__sfputc_r+0x1e>
 800ad38:	6994      	ldr	r4, [r2, #24]
 800ad3a:	42a3      	cmp	r3, r4
 800ad3c:	db01      	blt.n	800ad42 <__sfputc_r+0x16>
 800ad3e:	290a      	cmp	r1, #10
 800ad40:	d103      	bne.n	800ad4a <__sfputc_r+0x1e>
 800ad42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad46:	f7fd bafa 	b.w	800833e <__swbuf_r>
 800ad4a:	6813      	ldr	r3, [r2, #0]
 800ad4c:	1c58      	adds	r0, r3, #1
 800ad4e:	6010      	str	r0, [r2, #0]
 800ad50:	7019      	strb	r1, [r3, #0]
 800ad52:	4608      	mov	r0, r1
 800ad54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <__sfputs_r>:
 800ad5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5c:	4606      	mov	r6, r0
 800ad5e:	460f      	mov	r7, r1
 800ad60:	4614      	mov	r4, r2
 800ad62:	18d5      	adds	r5, r2, r3
 800ad64:	42ac      	cmp	r4, r5
 800ad66:	d101      	bne.n	800ad6c <__sfputs_r+0x12>
 800ad68:	2000      	movs	r0, #0
 800ad6a:	e007      	b.n	800ad7c <__sfputs_r+0x22>
 800ad6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad70:	463a      	mov	r2, r7
 800ad72:	4630      	mov	r0, r6
 800ad74:	f7ff ffda 	bl	800ad2c <__sfputc_r>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d1f3      	bne.n	800ad64 <__sfputs_r+0xa>
 800ad7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad80 <_vfiprintf_r>:
 800ad80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad84:	460d      	mov	r5, r1
 800ad86:	b09d      	sub	sp, #116	@ 0x74
 800ad88:	4614      	mov	r4, r2
 800ad8a:	4698      	mov	r8, r3
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	b118      	cbz	r0, 800ad98 <_vfiprintf_r+0x18>
 800ad90:	6a03      	ldr	r3, [r0, #32]
 800ad92:	b90b      	cbnz	r3, 800ad98 <_vfiprintf_r+0x18>
 800ad94:	f7fd f9ca 	bl	800812c <__sinit>
 800ad98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad9a:	07d9      	lsls	r1, r3, #31
 800ad9c:	d405      	bmi.n	800adaa <_vfiprintf_r+0x2a>
 800ad9e:	89ab      	ldrh	r3, [r5, #12]
 800ada0:	059a      	lsls	r2, r3, #22
 800ada2:	d402      	bmi.n	800adaa <_vfiprintf_r+0x2a>
 800ada4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ada6:	f7fd fbdc 	bl	8008562 <__retarget_lock_acquire_recursive>
 800adaa:	89ab      	ldrh	r3, [r5, #12]
 800adac:	071b      	lsls	r3, r3, #28
 800adae:	d501      	bpl.n	800adb4 <_vfiprintf_r+0x34>
 800adb0:	692b      	ldr	r3, [r5, #16]
 800adb2:	b99b      	cbnz	r3, 800addc <_vfiprintf_r+0x5c>
 800adb4:	4629      	mov	r1, r5
 800adb6:	4630      	mov	r0, r6
 800adb8:	f7fd fb00 	bl	80083bc <__swsetup_r>
 800adbc:	b170      	cbz	r0, 800addc <_vfiprintf_r+0x5c>
 800adbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adc0:	07dc      	lsls	r4, r3, #31
 800adc2:	d504      	bpl.n	800adce <_vfiprintf_r+0x4e>
 800adc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adc8:	b01d      	add	sp, #116	@ 0x74
 800adca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adce:	89ab      	ldrh	r3, [r5, #12]
 800add0:	0598      	lsls	r0, r3, #22
 800add2:	d4f7      	bmi.n	800adc4 <_vfiprintf_r+0x44>
 800add4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800add6:	f7fd fbc5 	bl	8008564 <__retarget_lock_release_recursive>
 800adda:	e7f3      	b.n	800adc4 <_vfiprintf_r+0x44>
 800addc:	2300      	movs	r3, #0
 800adde:	9309      	str	r3, [sp, #36]	@ 0x24
 800ade0:	2320      	movs	r3, #32
 800ade2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ade6:	f8cd 800c 	str.w	r8, [sp, #12]
 800adea:	2330      	movs	r3, #48	@ 0x30
 800adec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af9c <_vfiprintf_r+0x21c>
 800adf0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adf4:	f04f 0901 	mov.w	r9, #1
 800adf8:	4623      	mov	r3, r4
 800adfa:	469a      	mov	sl, r3
 800adfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae00:	b10a      	cbz	r2, 800ae06 <_vfiprintf_r+0x86>
 800ae02:	2a25      	cmp	r2, #37	@ 0x25
 800ae04:	d1f9      	bne.n	800adfa <_vfiprintf_r+0x7a>
 800ae06:	ebba 0b04 	subs.w	fp, sl, r4
 800ae0a:	d00b      	beq.n	800ae24 <_vfiprintf_r+0xa4>
 800ae0c:	465b      	mov	r3, fp
 800ae0e:	4622      	mov	r2, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	4630      	mov	r0, r6
 800ae14:	f7ff ffa1 	bl	800ad5a <__sfputs_r>
 800ae18:	3001      	adds	r0, #1
 800ae1a:	f000 80a7 	beq.w	800af6c <_vfiprintf_r+0x1ec>
 800ae1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae20:	445a      	add	r2, fp
 800ae22:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae24:	f89a 3000 	ldrb.w	r3, [sl]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	f000 809f 	beq.w	800af6c <_vfiprintf_r+0x1ec>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae38:	f10a 0a01 	add.w	sl, sl, #1
 800ae3c:	9304      	str	r3, [sp, #16]
 800ae3e:	9307      	str	r3, [sp, #28]
 800ae40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae44:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae46:	4654      	mov	r4, sl
 800ae48:	2205      	movs	r2, #5
 800ae4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae4e:	4853      	ldr	r0, [pc, #332]	@ (800af9c <_vfiprintf_r+0x21c>)
 800ae50:	f7f5 f9be 	bl	80001d0 <memchr>
 800ae54:	9a04      	ldr	r2, [sp, #16]
 800ae56:	b9d8      	cbnz	r0, 800ae90 <_vfiprintf_r+0x110>
 800ae58:	06d1      	lsls	r1, r2, #27
 800ae5a:	bf44      	itt	mi
 800ae5c:	2320      	movmi	r3, #32
 800ae5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae62:	0713      	lsls	r3, r2, #28
 800ae64:	bf44      	itt	mi
 800ae66:	232b      	movmi	r3, #43	@ 0x2b
 800ae68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae70:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae72:	d015      	beq.n	800aea0 <_vfiprintf_r+0x120>
 800ae74:	9a07      	ldr	r2, [sp, #28]
 800ae76:	4654      	mov	r4, sl
 800ae78:	2000      	movs	r0, #0
 800ae7a:	f04f 0c0a 	mov.w	ip, #10
 800ae7e:	4621      	mov	r1, r4
 800ae80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae84:	3b30      	subs	r3, #48	@ 0x30
 800ae86:	2b09      	cmp	r3, #9
 800ae88:	d94b      	bls.n	800af22 <_vfiprintf_r+0x1a2>
 800ae8a:	b1b0      	cbz	r0, 800aeba <_vfiprintf_r+0x13a>
 800ae8c:	9207      	str	r2, [sp, #28]
 800ae8e:	e014      	b.n	800aeba <_vfiprintf_r+0x13a>
 800ae90:	eba0 0308 	sub.w	r3, r0, r8
 800ae94:	fa09 f303 	lsl.w	r3, r9, r3
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	9304      	str	r3, [sp, #16]
 800ae9c:	46a2      	mov	sl, r4
 800ae9e:	e7d2      	b.n	800ae46 <_vfiprintf_r+0xc6>
 800aea0:	9b03      	ldr	r3, [sp, #12]
 800aea2:	1d19      	adds	r1, r3, #4
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	9103      	str	r1, [sp, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bfbb      	ittet	lt
 800aeac:	425b      	neglt	r3, r3
 800aeae:	f042 0202 	orrlt.w	r2, r2, #2
 800aeb2:	9307      	strge	r3, [sp, #28]
 800aeb4:	9307      	strlt	r3, [sp, #28]
 800aeb6:	bfb8      	it	lt
 800aeb8:	9204      	strlt	r2, [sp, #16]
 800aeba:	7823      	ldrb	r3, [r4, #0]
 800aebc:	2b2e      	cmp	r3, #46	@ 0x2e
 800aebe:	d10a      	bne.n	800aed6 <_vfiprintf_r+0x156>
 800aec0:	7863      	ldrb	r3, [r4, #1]
 800aec2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aec4:	d132      	bne.n	800af2c <_vfiprintf_r+0x1ac>
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	1d1a      	adds	r2, r3, #4
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	9203      	str	r2, [sp, #12]
 800aece:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aed2:	3402      	adds	r4, #2
 800aed4:	9305      	str	r3, [sp, #20]
 800aed6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800afac <_vfiprintf_r+0x22c>
 800aeda:	7821      	ldrb	r1, [r4, #0]
 800aedc:	2203      	movs	r2, #3
 800aede:	4650      	mov	r0, sl
 800aee0:	f7f5 f976 	bl	80001d0 <memchr>
 800aee4:	b138      	cbz	r0, 800aef6 <_vfiprintf_r+0x176>
 800aee6:	9b04      	ldr	r3, [sp, #16]
 800aee8:	eba0 000a 	sub.w	r0, r0, sl
 800aeec:	2240      	movs	r2, #64	@ 0x40
 800aeee:	4082      	lsls	r2, r0
 800aef0:	4313      	orrs	r3, r2
 800aef2:	3401      	adds	r4, #1
 800aef4:	9304      	str	r3, [sp, #16]
 800aef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aefa:	4829      	ldr	r0, [pc, #164]	@ (800afa0 <_vfiprintf_r+0x220>)
 800aefc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af00:	2206      	movs	r2, #6
 800af02:	f7f5 f965 	bl	80001d0 <memchr>
 800af06:	2800      	cmp	r0, #0
 800af08:	d03f      	beq.n	800af8a <_vfiprintf_r+0x20a>
 800af0a:	4b26      	ldr	r3, [pc, #152]	@ (800afa4 <_vfiprintf_r+0x224>)
 800af0c:	bb1b      	cbnz	r3, 800af56 <_vfiprintf_r+0x1d6>
 800af0e:	9b03      	ldr	r3, [sp, #12]
 800af10:	3307      	adds	r3, #7
 800af12:	f023 0307 	bic.w	r3, r3, #7
 800af16:	3308      	adds	r3, #8
 800af18:	9303      	str	r3, [sp, #12]
 800af1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1c:	443b      	add	r3, r7
 800af1e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af20:	e76a      	b.n	800adf8 <_vfiprintf_r+0x78>
 800af22:	fb0c 3202 	mla	r2, ip, r2, r3
 800af26:	460c      	mov	r4, r1
 800af28:	2001      	movs	r0, #1
 800af2a:	e7a8      	b.n	800ae7e <_vfiprintf_r+0xfe>
 800af2c:	2300      	movs	r3, #0
 800af2e:	3401      	adds	r4, #1
 800af30:	9305      	str	r3, [sp, #20]
 800af32:	4619      	mov	r1, r3
 800af34:	f04f 0c0a 	mov.w	ip, #10
 800af38:	4620      	mov	r0, r4
 800af3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af3e:	3a30      	subs	r2, #48	@ 0x30
 800af40:	2a09      	cmp	r2, #9
 800af42:	d903      	bls.n	800af4c <_vfiprintf_r+0x1cc>
 800af44:	2b00      	cmp	r3, #0
 800af46:	d0c6      	beq.n	800aed6 <_vfiprintf_r+0x156>
 800af48:	9105      	str	r1, [sp, #20]
 800af4a:	e7c4      	b.n	800aed6 <_vfiprintf_r+0x156>
 800af4c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af50:	4604      	mov	r4, r0
 800af52:	2301      	movs	r3, #1
 800af54:	e7f0      	b.n	800af38 <_vfiprintf_r+0x1b8>
 800af56:	ab03      	add	r3, sp, #12
 800af58:	9300      	str	r3, [sp, #0]
 800af5a:	462a      	mov	r2, r5
 800af5c:	4b12      	ldr	r3, [pc, #72]	@ (800afa8 <_vfiprintf_r+0x228>)
 800af5e:	a904      	add	r1, sp, #16
 800af60:	4630      	mov	r0, r6
 800af62:	f7fc fa8b 	bl	800747c <_printf_float>
 800af66:	4607      	mov	r7, r0
 800af68:	1c78      	adds	r0, r7, #1
 800af6a:	d1d6      	bne.n	800af1a <_vfiprintf_r+0x19a>
 800af6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af6e:	07d9      	lsls	r1, r3, #31
 800af70:	d405      	bmi.n	800af7e <_vfiprintf_r+0x1fe>
 800af72:	89ab      	ldrh	r3, [r5, #12]
 800af74:	059a      	lsls	r2, r3, #22
 800af76:	d402      	bmi.n	800af7e <_vfiprintf_r+0x1fe>
 800af78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af7a:	f7fd faf3 	bl	8008564 <__retarget_lock_release_recursive>
 800af7e:	89ab      	ldrh	r3, [r5, #12]
 800af80:	065b      	lsls	r3, r3, #25
 800af82:	f53f af1f 	bmi.w	800adc4 <_vfiprintf_r+0x44>
 800af86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af88:	e71e      	b.n	800adc8 <_vfiprintf_r+0x48>
 800af8a:	ab03      	add	r3, sp, #12
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	462a      	mov	r2, r5
 800af90:	4b05      	ldr	r3, [pc, #20]	@ (800afa8 <_vfiprintf_r+0x228>)
 800af92:	a904      	add	r1, sp, #16
 800af94:	4630      	mov	r0, r6
 800af96:	f7fc fd09 	bl	80079ac <_printf_i>
 800af9a:	e7e4      	b.n	800af66 <_vfiprintf_r+0x1e6>
 800af9c:	0800bfb1 	.word	0x0800bfb1
 800afa0:	0800bfbb 	.word	0x0800bfbb
 800afa4:	0800747d 	.word	0x0800747d
 800afa8:	0800ad5b 	.word	0x0800ad5b
 800afac:	0800bfb7 	.word	0x0800bfb7

0800afb0 <__sflush_r>:
 800afb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afb8:	0716      	lsls	r6, r2, #28
 800afba:	4605      	mov	r5, r0
 800afbc:	460c      	mov	r4, r1
 800afbe:	d454      	bmi.n	800b06a <__sflush_r+0xba>
 800afc0:	684b      	ldr	r3, [r1, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	dc02      	bgt.n	800afcc <__sflush_r+0x1c>
 800afc6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afc8:	2b00      	cmp	r3, #0
 800afca:	dd48      	ble.n	800b05e <__sflush_r+0xae>
 800afcc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afce:	2e00      	cmp	r6, #0
 800afd0:	d045      	beq.n	800b05e <__sflush_r+0xae>
 800afd2:	2300      	movs	r3, #0
 800afd4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800afd8:	682f      	ldr	r7, [r5, #0]
 800afda:	6a21      	ldr	r1, [r4, #32]
 800afdc:	602b      	str	r3, [r5, #0]
 800afde:	d030      	beq.n	800b042 <__sflush_r+0x92>
 800afe0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	0759      	lsls	r1, r3, #29
 800afe6:	d505      	bpl.n	800aff4 <__sflush_r+0x44>
 800afe8:	6863      	ldr	r3, [r4, #4]
 800afea:	1ad2      	subs	r2, r2, r3
 800afec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800afee:	b10b      	cbz	r3, 800aff4 <__sflush_r+0x44>
 800aff0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aff2:	1ad2      	subs	r2, r2, r3
 800aff4:	2300      	movs	r3, #0
 800aff6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aff8:	6a21      	ldr	r1, [r4, #32]
 800affa:	4628      	mov	r0, r5
 800affc:	47b0      	blx	r6
 800affe:	1c43      	adds	r3, r0, #1
 800b000:	89a3      	ldrh	r3, [r4, #12]
 800b002:	d106      	bne.n	800b012 <__sflush_r+0x62>
 800b004:	6829      	ldr	r1, [r5, #0]
 800b006:	291d      	cmp	r1, #29
 800b008:	d82b      	bhi.n	800b062 <__sflush_r+0xb2>
 800b00a:	4a2a      	ldr	r2, [pc, #168]	@ (800b0b4 <__sflush_r+0x104>)
 800b00c:	410a      	asrs	r2, r1
 800b00e:	07d6      	lsls	r6, r2, #31
 800b010:	d427      	bmi.n	800b062 <__sflush_r+0xb2>
 800b012:	2200      	movs	r2, #0
 800b014:	6062      	str	r2, [r4, #4]
 800b016:	04d9      	lsls	r1, r3, #19
 800b018:	6922      	ldr	r2, [r4, #16]
 800b01a:	6022      	str	r2, [r4, #0]
 800b01c:	d504      	bpl.n	800b028 <__sflush_r+0x78>
 800b01e:	1c42      	adds	r2, r0, #1
 800b020:	d101      	bne.n	800b026 <__sflush_r+0x76>
 800b022:	682b      	ldr	r3, [r5, #0]
 800b024:	b903      	cbnz	r3, 800b028 <__sflush_r+0x78>
 800b026:	6560      	str	r0, [r4, #84]	@ 0x54
 800b028:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b02a:	602f      	str	r7, [r5, #0]
 800b02c:	b1b9      	cbz	r1, 800b05e <__sflush_r+0xae>
 800b02e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b032:	4299      	cmp	r1, r3
 800b034:	d002      	beq.n	800b03c <__sflush_r+0x8c>
 800b036:	4628      	mov	r0, r5
 800b038:	f7fe f8ea 	bl	8009210 <_free_r>
 800b03c:	2300      	movs	r3, #0
 800b03e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b040:	e00d      	b.n	800b05e <__sflush_r+0xae>
 800b042:	2301      	movs	r3, #1
 800b044:	4628      	mov	r0, r5
 800b046:	47b0      	blx	r6
 800b048:	4602      	mov	r2, r0
 800b04a:	1c50      	adds	r0, r2, #1
 800b04c:	d1c9      	bne.n	800afe2 <__sflush_r+0x32>
 800b04e:	682b      	ldr	r3, [r5, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d0c6      	beq.n	800afe2 <__sflush_r+0x32>
 800b054:	2b1d      	cmp	r3, #29
 800b056:	d001      	beq.n	800b05c <__sflush_r+0xac>
 800b058:	2b16      	cmp	r3, #22
 800b05a:	d11e      	bne.n	800b09a <__sflush_r+0xea>
 800b05c:	602f      	str	r7, [r5, #0]
 800b05e:	2000      	movs	r0, #0
 800b060:	e022      	b.n	800b0a8 <__sflush_r+0xf8>
 800b062:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b066:	b21b      	sxth	r3, r3
 800b068:	e01b      	b.n	800b0a2 <__sflush_r+0xf2>
 800b06a:	690f      	ldr	r7, [r1, #16]
 800b06c:	2f00      	cmp	r7, #0
 800b06e:	d0f6      	beq.n	800b05e <__sflush_r+0xae>
 800b070:	0793      	lsls	r3, r2, #30
 800b072:	680e      	ldr	r6, [r1, #0]
 800b074:	bf08      	it	eq
 800b076:	694b      	ldreq	r3, [r1, #20]
 800b078:	600f      	str	r7, [r1, #0]
 800b07a:	bf18      	it	ne
 800b07c:	2300      	movne	r3, #0
 800b07e:	eba6 0807 	sub.w	r8, r6, r7
 800b082:	608b      	str	r3, [r1, #8]
 800b084:	f1b8 0f00 	cmp.w	r8, #0
 800b088:	dde9      	ble.n	800b05e <__sflush_r+0xae>
 800b08a:	6a21      	ldr	r1, [r4, #32]
 800b08c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b08e:	4643      	mov	r3, r8
 800b090:	463a      	mov	r2, r7
 800b092:	4628      	mov	r0, r5
 800b094:	47b0      	blx	r6
 800b096:	2800      	cmp	r0, #0
 800b098:	dc08      	bgt.n	800b0ac <__sflush_r+0xfc>
 800b09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b09e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0a2:	81a3      	strh	r3, [r4, #12]
 800b0a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0ac:	4407      	add	r7, r0
 800b0ae:	eba8 0800 	sub.w	r8, r8, r0
 800b0b2:	e7e7      	b.n	800b084 <__sflush_r+0xd4>
 800b0b4:	dfbffffe 	.word	0xdfbffffe

0800b0b8 <_fflush_r>:
 800b0b8:	b538      	push	{r3, r4, r5, lr}
 800b0ba:	690b      	ldr	r3, [r1, #16]
 800b0bc:	4605      	mov	r5, r0
 800b0be:	460c      	mov	r4, r1
 800b0c0:	b913      	cbnz	r3, 800b0c8 <_fflush_r+0x10>
 800b0c2:	2500      	movs	r5, #0
 800b0c4:	4628      	mov	r0, r5
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	b118      	cbz	r0, 800b0d2 <_fflush_r+0x1a>
 800b0ca:	6a03      	ldr	r3, [r0, #32]
 800b0cc:	b90b      	cbnz	r3, 800b0d2 <_fflush_r+0x1a>
 800b0ce:	f7fd f82d 	bl	800812c <__sinit>
 800b0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d0f3      	beq.n	800b0c2 <_fflush_r+0xa>
 800b0da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0dc:	07d0      	lsls	r0, r2, #31
 800b0de:	d404      	bmi.n	800b0ea <_fflush_r+0x32>
 800b0e0:	0599      	lsls	r1, r3, #22
 800b0e2:	d402      	bmi.n	800b0ea <_fflush_r+0x32>
 800b0e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b0e6:	f7fd fa3c 	bl	8008562 <__retarget_lock_acquire_recursive>
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	f7ff ff5f 	bl	800afb0 <__sflush_r>
 800b0f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b0f4:	07da      	lsls	r2, r3, #31
 800b0f6:	4605      	mov	r5, r0
 800b0f8:	d4e4      	bmi.n	800b0c4 <_fflush_r+0xc>
 800b0fa:	89a3      	ldrh	r3, [r4, #12]
 800b0fc:	059b      	lsls	r3, r3, #22
 800b0fe:	d4e1      	bmi.n	800b0c4 <_fflush_r+0xc>
 800b100:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b102:	f7fd fa2f 	bl	8008564 <__retarget_lock_release_recursive>
 800b106:	e7dd      	b.n	800b0c4 <_fflush_r+0xc>

0800b108 <__swhatbuf_r>:
 800b108:	b570      	push	{r4, r5, r6, lr}
 800b10a:	460c      	mov	r4, r1
 800b10c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b110:	2900      	cmp	r1, #0
 800b112:	b096      	sub	sp, #88	@ 0x58
 800b114:	4615      	mov	r5, r2
 800b116:	461e      	mov	r6, r3
 800b118:	da0d      	bge.n	800b136 <__swhatbuf_r+0x2e>
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b120:	f04f 0100 	mov.w	r1, #0
 800b124:	bf14      	ite	ne
 800b126:	2340      	movne	r3, #64	@ 0x40
 800b128:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b12c:	2000      	movs	r0, #0
 800b12e:	6031      	str	r1, [r6, #0]
 800b130:	602b      	str	r3, [r5, #0]
 800b132:	b016      	add	sp, #88	@ 0x58
 800b134:	bd70      	pop	{r4, r5, r6, pc}
 800b136:	466a      	mov	r2, sp
 800b138:	f000 f874 	bl	800b224 <_fstat_r>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	dbec      	blt.n	800b11a <__swhatbuf_r+0x12>
 800b140:	9901      	ldr	r1, [sp, #4]
 800b142:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b146:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b14a:	4259      	negs	r1, r3
 800b14c:	4159      	adcs	r1, r3
 800b14e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b152:	e7eb      	b.n	800b12c <__swhatbuf_r+0x24>

0800b154 <__smakebuf_r>:
 800b154:	898b      	ldrh	r3, [r1, #12]
 800b156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b158:	079d      	lsls	r5, r3, #30
 800b15a:	4606      	mov	r6, r0
 800b15c:	460c      	mov	r4, r1
 800b15e:	d507      	bpl.n	800b170 <__smakebuf_r+0x1c>
 800b160:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b164:	6023      	str	r3, [r4, #0]
 800b166:	6123      	str	r3, [r4, #16]
 800b168:	2301      	movs	r3, #1
 800b16a:	6163      	str	r3, [r4, #20]
 800b16c:	b003      	add	sp, #12
 800b16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b170:	ab01      	add	r3, sp, #4
 800b172:	466a      	mov	r2, sp
 800b174:	f7ff ffc8 	bl	800b108 <__swhatbuf_r>
 800b178:	9f00      	ldr	r7, [sp, #0]
 800b17a:	4605      	mov	r5, r0
 800b17c:	4639      	mov	r1, r7
 800b17e:	4630      	mov	r0, r6
 800b180:	f7fe f8ba 	bl	80092f8 <_malloc_r>
 800b184:	b948      	cbnz	r0, 800b19a <__smakebuf_r+0x46>
 800b186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b18a:	059a      	lsls	r2, r3, #22
 800b18c:	d4ee      	bmi.n	800b16c <__smakebuf_r+0x18>
 800b18e:	f023 0303 	bic.w	r3, r3, #3
 800b192:	f043 0302 	orr.w	r3, r3, #2
 800b196:	81a3      	strh	r3, [r4, #12]
 800b198:	e7e2      	b.n	800b160 <__smakebuf_r+0xc>
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	6020      	str	r0, [r4, #0]
 800b19e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1a2:	81a3      	strh	r3, [r4, #12]
 800b1a4:	9b01      	ldr	r3, [sp, #4]
 800b1a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1aa:	b15b      	cbz	r3, 800b1c4 <__smakebuf_r+0x70>
 800b1ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1b0:	4630      	mov	r0, r6
 800b1b2:	f000 f849 	bl	800b248 <_isatty_r>
 800b1b6:	b128      	cbz	r0, 800b1c4 <__smakebuf_r+0x70>
 800b1b8:	89a3      	ldrh	r3, [r4, #12]
 800b1ba:	f023 0303 	bic.w	r3, r3, #3
 800b1be:	f043 0301 	orr.w	r3, r3, #1
 800b1c2:	81a3      	strh	r3, [r4, #12]
 800b1c4:	89a3      	ldrh	r3, [r4, #12]
 800b1c6:	431d      	orrs	r5, r3
 800b1c8:	81a5      	strh	r5, [r4, #12]
 800b1ca:	e7cf      	b.n	800b16c <__smakebuf_r+0x18>

0800b1cc <memmove>:
 800b1cc:	4288      	cmp	r0, r1
 800b1ce:	b510      	push	{r4, lr}
 800b1d0:	eb01 0402 	add.w	r4, r1, r2
 800b1d4:	d902      	bls.n	800b1dc <memmove+0x10>
 800b1d6:	4284      	cmp	r4, r0
 800b1d8:	4623      	mov	r3, r4
 800b1da:	d807      	bhi.n	800b1ec <memmove+0x20>
 800b1dc:	1e43      	subs	r3, r0, #1
 800b1de:	42a1      	cmp	r1, r4
 800b1e0:	d008      	beq.n	800b1f4 <memmove+0x28>
 800b1e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1ea:	e7f8      	b.n	800b1de <memmove+0x12>
 800b1ec:	4402      	add	r2, r0
 800b1ee:	4601      	mov	r1, r0
 800b1f0:	428a      	cmp	r2, r1
 800b1f2:	d100      	bne.n	800b1f6 <memmove+0x2a>
 800b1f4:	bd10      	pop	{r4, pc}
 800b1f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1fe:	e7f7      	b.n	800b1f0 <memmove+0x24>

0800b200 <strncmp>:
 800b200:	b510      	push	{r4, lr}
 800b202:	b16a      	cbz	r2, 800b220 <strncmp+0x20>
 800b204:	3901      	subs	r1, #1
 800b206:	1884      	adds	r4, r0, r2
 800b208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b20c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b210:	429a      	cmp	r2, r3
 800b212:	d103      	bne.n	800b21c <strncmp+0x1c>
 800b214:	42a0      	cmp	r0, r4
 800b216:	d001      	beq.n	800b21c <strncmp+0x1c>
 800b218:	2a00      	cmp	r2, #0
 800b21a:	d1f5      	bne.n	800b208 <strncmp+0x8>
 800b21c:	1ad0      	subs	r0, r2, r3
 800b21e:	bd10      	pop	{r4, pc}
 800b220:	4610      	mov	r0, r2
 800b222:	e7fc      	b.n	800b21e <strncmp+0x1e>

0800b224 <_fstat_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	4d07      	ldr	r5, [pc, #28]	@ (800b244 <_fstat_r+0x20>)
 800b228:	2300      	movs	r3, #0
 800b22a:	4604      	mov	r4, r0
 800b22c:	4608      	mov	r0, r1
 800b22e:	4611      	mov	r1, r2
 800b230:	602b      	str	r3, [r5, #0]
 800b232:	f7f6 fe1f 	bl	8001e74 <_fstat>
 800b236:	1c43      	adds	r3, r0, #1
 800b238:	d102      	bne.n	800b240 <_fstat_r+0x1c>
 800b23a:	682b      	ldr	r3, [r5, #0]
 800b23c:	b103      	cbz	r3, 800b240 <_fstat_r+0x1c>
 800b23e:	6023      	str	r3, [r4, #0]
 800b240:	bd38      	pop	{r3, r4, r5, pc}
 800b242:	bf00      	nop
 800b244:	20000644 	.word	0x20000644

0800b248 <_isatty_r>:
 800b248:	b538      	push	{r3, r4, r5, lr}
 800b24a:	4d06      	ldr	r5, [pc, #24]	@ (800b264 <_isatty_r+0x1c>)
 800b24c:	2300      	movs	r3, #0
 800b24e:	4604      	mov	r4, r0
 800b250:	4608      	mov	r0, r1
 800b252:	602b      	str	r3, [r5, #0]
 800b254:	f7f6 fe1e 	bl	8001e94 <_isatty>
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	d102      	bne.n	800b262 <_isatty_r+0x1a>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b103      	cbz	r3, 800b262 <_isatty_r+0x1a>
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	20000644 	.word	0x20000644

0800b268 <_sbrk_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4d06      	ldr	r5, [pc, #24]	@ (800b284 <_sbrk_r+0x1c>)
 800b26c:	2300      	movs	r3, #0
 800b26e:	4604      	mov	r4, r0
 800b270:	4608      	mov	r0, r1
 800b272:	602b      	str	r3, [r5, #0]
 800b274:	f7f6 fe26 	bl	8001ec4 <_sbrk>
 800b278:	1c43      	adds	r3, r0, #1
 800b27a:	d102      	bne.n	800b282 <_sbrk_r+0x1a>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	b103      	cbz	r3, 800b282 <_sbrk_r+0x1a>
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	20000644 	.word	0x20000644

0800b288 <memcpy>:
 800b288:	440a      	add	r2, r1
 800b28a:	4291      	cmp	r1, r2
 800b28c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b290:	d100      	bne.n	800b294 <memcpy+0xc>
 800b292:	4770      	bx	lr
 800b294:	b510      	push	{r4, lr}
 800b296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b29a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b29e:	4291      	cmp	r1, r2
 800b2a0:	d1f9      	bne.n	800b296 <memcpy+0xe>
 800b2a2:	bd10      	pop	{r4, pc}
 800b2a4:	0000      	movs	r0, r0
	...

0800b2a8 <nan>:
 800b2a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b2b0 <nan+0x8>
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	00000000 	.word	0x00000000
 800b2b4:	7ff80000 	.word	0x7ff80000

0800b2b8 <__assert_func>:
 800b2b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2ba:	4614      	mov	r4, r2
 800b2bc:	461a      	mov	r2, r3
 800b2be:	4b09      	ldr	r3, [pc, #36]	@ (800b2e4 <__assert_func+0x2c>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4605      	mov	r5, r0
 800b2c4:	68d8      	ldr	r0, [r3, #12]
 800b2c6:	b954      	cbnz	r4, 800b2de <__assert_func+0x26>
 800b2c8:	4b07      	ldr	r3, [pc, #28]	@ (800b2e8 <__assert_func+0x30>)
 800b2ca:	461c      	mov	r4, r3
 800b2cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2d0:	9100      	str	r1, [sp, #0]
 800b2d2:	462b      	mov	r3, r5
 800b2d4:	4905      	ldr	r1, [pc, #20]	@ (800b2ec <__assert_func+0x34>)
 800b2d6:	f000 fba7 	bl	800ba28 <fiprintf>
 800b2da:	f000 fbb7 	bl	800ba4c <abort>
 800b2de:	4b04      	ldr	r3, [pc, #16]	@ (800b2f0 <__assert_func+0x38>)
 800b2e0:	e7f4      	b.n	800b2cc <__assert_func+0x14>
 800b2e2:	bf00      	nop
 800b2e4:	20000018 	.word	0x20000018
 800b2e8:	0800c005 	.word	0x0800c005
 800b2ec:	0800bfd7 	.word	0x0800bfd7
 800b2f0:	0800bfca 	.word	0x0800bfca

0800b2f4 <_calloc_r>:
 800b2f4:	b570      	push	{r4, r5, r6, lr}
 800b2f6:	fba1 5402 	umull	r5, r4, r1, r2
 800b2fa:	b93c      	cbnz	r4, 800b30c <_calloc_r+0x18>
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	f7fd fffb 	bl	80092f8 <_malloc_r>
 800b302:	4606      	mov	r6, r0
 800b304:	b928      	cbnz	r0, 800b312 <_calloc_r+0x1e>
 800b306:	2600      	movs	r6, #0
 800b308:	4630      	mov	r0, r6
 800b30a:	bd70      	pop	{r4, r5, r6, pc}
 800b30c:	220c      	movs	r2, #12
 800b30e:	6002      	str	r2, [r0, #0]
 800b310:	e7f9      	b.n	800b306 <_calloc_r+0x12>
 800b312:	462a      	mov	r2, r5
 800b314:	4621      	mov	r1, r4
 800b316:	f7fd f8a7 	bl	8008468 <memset>
 800b31a:	e7f5      	b.n	800b308 <_calloc_r+0x14>

0800b31c <rshift>:
 800b31c:	6903      	ldr	r3, [r0, #16]
 800b31e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b322:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b326:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b32a:	f100 0414 	add.w	r4, r0, #20
 800b32e:	dd45      	ble.n	800b3bc <rshift+0xa0>
 800b330:	f011 011f 	ands.w	r1, r1, #31
 800b334:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b338:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b33c:	d10c      	bne.n	800b358 <rshift+0x3c>
 800b33e:	f100 0710 	add.w	r7, r0, #16
 800b342:	4629      	mov	r1, r5
 800b344:	42b1      	cmp	r1, r6
 800b346:	d334      	bcc.n	800b3b2 <rshift+0x96>
 800b348:	1a9b      	subs	r3, r3, r2
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	1eea      	subs	r2, r5, #3
 800b34e:	4296      	cmp	r6, r2
 800b350:	bf38      	it	cc
 800b352:	2300      	movcc	r3, #0
 800b354:	4423      	add	r3, r4
 800b356:	e015      	b.n	800b384 <rshift+0x68>
 800b358:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b35c:	f1c1 0820 	rsb	r8, r1, #32
 800b360:	40cf      	lsrs	r7, r1
 800b362:	f105 0e04 	add.w	lr, r5, #4
 800b366:	46a1      	mov	r9, r4
 800b368:	4576      	cmp	r6, lr
 800b36a:	46f4      	mov	ip, lr
 800b36c:	d815      	bhi.n	800b39a <rshift+0x7e>
 800b36e:	1a9a      	subs	r2, r3, r2
 800b370:	0092      	lsls	r2, r2, #2
 800b372:	3a04      	subs	r2, #4
 800b374:	3501      	adds	r5, #1
 800b376:	42ae      	cmp	r6, r5
 800b378:	bf38      	it	cc
 800b37a:	2200      	movcc	r2, #0
 800b37c:	18a3      	adds	r3, r4, r2
 800b37e:	50a7      	str	r7, [r4, r2]
 800b380:	b107      	cbz	r7, 800b384 <rshift+0x68>
 800b382:	3304      	adds	r3, #4
 800b384:	1b1a      	subs	r2, r3, r4
 800b386:	42a3      	cmp	r3, r4
 800b388:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b38c:	bf08      	it	eq
 800b38e:	2300      	moveq	r3, #0
 800b390:	6102      	str	r2, [r0, #16]
 800b392:	bf08      	it	eq
 800b394:	6143      	streq	r3, [r0, #20]
 800b396:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b39a:	f8dc c000 	ldr.w	ip, [ip]
 800b39e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3a2:	ea4c 0707 	orr.w	r7, ip, r7
 800b3a6:	f849 7b04 	str.w	r7, [r9], #4
 800b3aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3ae:	40cf      	lsrs	r7, r1
 800b3b0:	e7da      	b.n	800b368 <rshift+0x4c>
 800b3b2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b3b6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b3ba:	e7c3      	b.n	800b344 <rshift+0x28>
 800b3bc:	4623      	mov	r3, r4
 800b3be:	e7e1      	b.n	800b384 <rshift+0x68>

0800b3c0 <__hexdig_fun>:
 800b3c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b3c4:	2b09      	cmp	r3, #9
 800b3c6:	d802      	bhi.n	800b3ce <__hexdig_fun+0xe>
 800b3c8:	3820      	subs	r0, #32
 800b3ca:	b2c0      	uxtb	r0, r0
 800b3cc:	4770      	bx	lr
 800b3ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b3d2:	2b05      	cmp	r3, #5
 800b3d4:	d801      	bhi.n	800b3da <__hexdig_fun+0x1a>
 800b3d6:	3847      	subs	r0, #71	@ 0x47
 800b3d8:	e7f7      	b.n	800b3ca <__hexdig_fun+0xa>
 800b3da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b3de:	2b05      	cmp	r3, #5
 800b3e0:	d801      	bhi.n	800b3e6 <__hexdig_fun+0x26>
 800b3e2:	3827      	subs	r0, #39	@ 0x27
 800b3e4:	e7f1      	b.n	800b3ca <__hexdig_fun+0xa>
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	4770      	bx	lr
	...

0800b3ec <__gethex>:
 800b3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f0:	b085      	sub	sp, #20
 800b3f2:	468a      	mov	sl, r1
 800b3f4:	9302      	str	r3, [sp, #8]
 800b3f6:	680b      	ldr	r3, [r1, #0]
 800b3f8:	9001      	str	r0, [sp, #4]
 800b3fa:	4690      	mov	r8, r2
 800b3fc:	1c9c      	adds	r4, r3, #2
 800b3fe:	46a1      	mov	r9, r4
 800b400:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b404:	2830      	cmp	r0, #48	@ 0x30
 800b406:	d0fa      	beq.n	800b3fe <__gethex+0x12>
 800b408:	eba9 0303 	sub.w	r3, r9, r3
 800b40c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b410:	f7ff ffd6 	bl	800b3c0 <__hexdig_fun>
 800b414:	4605      	mov	r5, r0
 800b416:	2800      	cmp	r0, #0
 800b418:	d168      	bne.n	800b4ec <__gethex+0x100>
 800b41a:	49a0      	ldr	r1, [pc, #640]	@ (800b69c <__gethex+0x2b0>)
 800b41c:	2201      	movs	r2, #1
 800b41e:	4648      	mov	r0, r9
 800b420:	f7ff feee 	bl	800b200 <strncmp>
 800b424:	4607      	mov	r7, r0
 800b426:	2800      	cmp	r0, #0
 800b428:	d167      	bne.n	800b4fa <__gethex+0x10e>
 800b42a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b42e:	4626      	mov	r6, r4
 800b430:	f7ff ffc6 	bl	800b3c0 <__hexdig_fun>
 800b434:	2800      	cmp	r0, #0
 800b436:	d062      	beq.n	800b4fe <__gethex+0x112>
 800b438:	4623      	mov	r3, r4
 800b43a:	7818      	ldrb	r0, [r3, #0]
 800b43c:	2830      	cmp	r0, #48	@ 0x30
 800b43e:	4699      	mov	r9, r3
 800b440:	f103 0301 	add.w	r3, r3, #1
 800b444:	d0f9      	beq.n	800b43a <__gethex+0x4e>
 800b446:	f7ff ffbb 	bl	800b3c0 <__hexdig_fun>
 800b44a:	fab0 f580 	clz	r5, r0
 800b44e:	096d      	lsrs	r5, r5, #5
 800b450:	f04f 0b01 	mov.w	fp, #1
 800b454:	464a      	mov	r2, r9
 800b456:	4616      	mov	r6, r2
 800b458:	3201      	adds	r2, #1
 800b45a:	7830      	ldrb	r0, [r6, #0]
 800b45c:	f7ff ffb0 	bl	800b3c0 <__hexdig_fun>
 800b460:	2800      	cmp	r0, #0
 800b462:	d1f8      	bne.n	800b456 <__gethex+0x6a>
 800b464:	498d      	ldr	r1, [pc, #564]	@ (800b69c <__gethex+0x2b0>)
 800b466:	2201      	movs	r2, #1
 800b468:	4630      	mov	r0, r6
 800b46a:	f7ff fec9 	bl	800b200 <strncmp>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d13f      	bne.n	800b4f2 <__gethex+0x106>
 800b472:	b944      	cbnz	r4, 800b486 <__gethex+0x9a>
 800b474:	1c74      	adds	r4, r6, #1
 800b476:	4622      	mov	r2, r4
 800b478:	4616      	mov	r6, r2
 800b47a:	3201      	adds	r2, #1
 800b47c:	7830      	ldrb	r0, [r6, #0]
 800b47e:	f7ff ff9f 	bl	800b3c0 <__hexdig_fun>
 800b482:	2800      	cmp	r0, #0
 800b484:	d1f8      	bne.n	800b478 <__gethex+0x8c>
 800b486:	1ba4      	subs	r4, r4, r6
 800b488:	00a7      	lsls	r7, r4, #2
 800b48a:	7833      	ldrb	r3, [r6, #0]
 800b48c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b490:	2b50      	cmp	r3, #80	@ 0x50
 800b492:	d13e      	bne.n	800b512 <__gethex+0x126>
 800b494:	7873      	ldrb	r3, [r6, #1]
 800b496:	2b2b      	cmp	r3, #43	@ 0x2b
 800b498:	d033      	beq.n	800b502 <__gethex+0x116>
 800b49a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b49c:	d034      	beq.n	800b508 <__gethex+0x11c>
 800b49e:	1c71      	adds	r1, r6, #1
 800b4a0:	2400      	movs	r4, #0
 800b4a2:	7808      	ldrb	r0, [r1, #0]
 800b4a4:	f7ff ff8c 	bl	800b3c0 <__hexdig_fun>
 800b4a8:	1e43      	subs	r3, r0, #1
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b18      	cmp	r3, #24
 800b4ae:	d830      	bhi.n	800b512 <__gethex+0x126>
 800b4b0:	f1a0 0210 	sub.w	r2, r0, #16
 800b4b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4b8:	f7ff ff82 	bl	800b3c0 <__hexdig_fun>
 800b4bc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b4c0:	fa5f fc8c 	uxtb.w	ip, ip
 800b4c4:	f1bc 0f18 	cmp.w	ip, #24
 800b4c8:	f04f 030a 	mov.w	r3, #10
 800b4cc:	d91e      	bls.n	800b50c <__gethex+0x120>
 800b4ce:	b104      	cbz	r4, 800b4d2 <__gethex+0xe6>
 800b4d0:	4252      	negs	r2, r2
 800b4d2:	4417      	add	r7, r2
 800b4d4:	f8ca 1000 	str.w	r1, [sl]
 800b4d8:	b1ed      	cbz	r5, 800b516 <__gethex+0x12a>
 800b4da:	f1bb 0f00 	cmp.w	fp, #0
 800b4de:	bf0c      	ite	eq
 800b4e0:	2506      	moveq	r5, #6
 800b4e2:	2500      	movne	r5, #0
 800b4e4:	4628      	mov	r0, r5
 800b4e6:	b005      	add	sp, #20
 800b4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ec:	2500      	movs	r5, #0
 800b4ee:	462c      	mov	r4, r5
 800b4f0:	e7b0      	b.n	800b454 <__gethex+0x68>
 800b4f2:	2c00      	cmp	r4, #0
 800b4f4:	d1c7      	bne.n	800b486 <__gethex+0x9a>
 800b4f6:	4627      	mov	r7, r4
 800b4f8:	e7c7      	b.n	800b48a <__gethex+0x9e>
 800b4fa:	464e      	mov	r6, r9
 800b4fc:	462f      	mov	r7, r5
 800b4fe:	2501      	movs	r5, #1
 800b500:	e7c3      	b.n	800b48a <__gethex+0x9e>
 800b502:	2400      	movs	r4, #0
 800b504:	1cb1      	adds	r1, r6, #2
 800b506:	e7cc      	b.n	800b4a2 <__gethex+0xb6>
 800b508:	2401      	movs	r4, #1
 800b50a:	e7fb      	b.n	800b504 <__gethex+0x118>
 800b50c:	fb03 0002 	mla	r0, r3, r2, r0
 800b510:	e7ce      	b.n	800b4b0 <__gethex+0xc4>
 800b512:	4631      	mov	r1, r6
 800b514:	e7de      	b.n	800b4d4 <__gethex+0xe8>
 800b516:	eba6 0309 	sub.w	r3, r6, r9
 800b51a:	3b01      	subs	r3, #1
 800b51c:	4629      	mov	r1, r5
 800b51e:	2b07      	cmp	r3, #7
 800b520:	dc0a      	bgt.n	800b538 <__gethex+0x14c>
 800b522:	9801      	ldr	r0, [sp, #4]
 800b524:	f7fd ff74 	bl	8009410 <_Balloc>
 800b528:	4604      	mov	r4, r0
 800b52a:	b940      	cbnz	r0, 800b53e <__gethex+0x152>
 800b52c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6a0 <__gethex+0x2b4>)
 800b52e:	4602      	mov	r2, r0
 800b530:	21e4      	movs	r1, #228	@ 0xe4
 800b532:	485c      	ldr	r0, [pc, #368]	@ (800b6a4 <__gethex+0x2b8>)
 800b534:	f7ff fec0 	bl	800b2b8 <__assert_func>
 800b538:	3101      	adds	r1, #1
 800b53a:	105b      	asrs	r3, r3, #1
 800b53c:	e7ef      	b.n	800b51e <__gethex+0x132>
 800b53e:	f100 0a14 	add.w	sl, r0, #20
 800b542:	2300      	movs	r3, #0
 800b544:	4655      	mov	r5, sl
 800b546:	469b      	mov	fp, r3
 800b548:	45b1      	cmp	r9, r6
 800b54a:	d337      	bcc.n	800b5bc <__gethex+0x1d0>
 800b54c:	f845 bb04 	str.w	fp, [r5], #4
 800b550:	eba5 050a 	sub.w	r5, r5, sl
 800b554:	10ad      	asrs	r5, r5, #2
 800b556:	6125      	str	r5, [r4, #16]
 800b558:	4658      	mov	r0, fp
 800b55a:	f7fe f84b 	bl	80095f4 <__hi0bits>
 800b55e:	016d      	lsls	r5, r5, #5
 800b560:	f8d8 6000 	ldr.w	r6, [r8]
 800b564:	1a2d      	subs	r5, r5, r0
 800b566:	42b5      	cmp	r5, r6
 800b568:	dd54      	ble.n	800b614 <__gethex+0x228>
 800b56a:	1bad      	subs	r5, r5, r6
 800b56c:	4629      	mov	r1, r5
 800b56e:	4620      	mov	r0, r4
 800b570:	f7fe fbdf 	bl	8009d32 <__any_on>
 800b574:	4681      	mov	r9, r0
 800b576:	b178      	cbz	r0, 800b598 <__gethex+0x1ac>
 800b578:	1e6b      	subs	r3, r5, #1
 800b57a:	1159      	asrs	r1, r3, #5
 800b57c:	f003 021f 	and.w	r2, r3, #31
 800b580:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b584:	f04f 0901 	mov.w	r9, #1
 800b588:	fa09 f202 	lsl.w	r2, r9, r2
 800b58c:	420a      	tst	r2, r1
 800b58e:	d003      	beq.n	800b598 <__gethex+0x1ac>
 800b590:	454b      	cmp	r3, r9
 800b592:	dc36      	bgt.n	800b602 <__gethex+0x216>
 800b594:	f04f 0902 	mov.w	r9, #2
 800b598:	4629      	mov	r1, r5
 800b59a:	4620      	mov	r0, r4
 800b59c:	f7ff febe 	bl	800b31c <rshift>
 800b5a0:	442f      	add	r7, r5
 800b5a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5a6:	42bb      	cmp	r3, r7
 800b5a8:	da42      	bge.n	800b630 <__gethex+0x244>
 800b5aa:	9801      	ldr	r0, [sp, #4]
 800b5ac:	4621      	mov	r1, r4
 800b5ae:	f7fd ff6f 	bl	8009490 <_Bfree>
 800b5b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	25a3      	movs	r5, #163	@ 0xa3
 800b5ba:	e793      	b.n	800b4e4 <__gethex+0xf8>
 800b5bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b5c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b5c2:	d012      	beq.n	800b5ea <__gethex+0x1fe>
 800b5c4:	2b20      	cmp	r3, #32
 800b5c6:	d104      	bne.n	800b5d2 <__gethex+0x1e6>
 800b5c8:	f845 bb04 	str.w	fp, [r5], #4
 800b5cc:	f04f 0b00 	mov.w	fp, #0
 800b5d0:	465b      	mov	r3, fp
 800b5d2:	7830      	ldrb	r0, [r6, #0]
 800b5d4:	9303      	str	r3, [sp, #12]
 800b5d6:	f7ff fef3 	bl	800b3c0 <__hexdig_fun>
 800b5da:	9b03      	ldr	r3, [sp, #12]
 800b5dc:	f000 000f 	and.w	r0, r0, #15
 800b5e0:	4098      	lsls	r0, r3
 800b5e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	e7ae      	b.n	800b548 <__gethex+0x15c>
 800b5ea:	45b1      	cmp	r9, r6
 800b5ec:	d8ea      	bhi.n	800b5c4 <__gethex+0x1d8>
 800b5ee:	492b      	ldr	r1, [pc, #172]	@ (800b69c <__gethex+0x2b0>)
 800b5f0:	9303      	str	r3, [sp, #12]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f7ff fe03 	bl	800b200 <strncmp>
 800b5fa:	9b03      	ldr	r3, [sp, #12]
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	d1e1      	bne.n	800b5c4 <__gethex+0x1d8>
 800b600:	e7a2      	b.n	800b548 <__gethex+0x15c>
 800b602:	1ea9      	subs	r1, r5, #2
 800b604:	4620      	mov	r0, r4
 800b606:	f7fe fb94 	bl	8009d32 <__any_on>
 800b60a:	2800      	cmp	r0, #0
 800b60c:	d0c2      	beq.n	800b594 <__gethex+0x1a8>
 800b60e:	f04f 0903 	mov.w	r9, #3
 800b612:	e7c1      	b.n	800b598 <__gethex+0x1ac>
 800b614:	da09      	bge.n	800b62a <__gethex+0x23e>
 800b616:	1b75      	subs	r5, r6, r5
 800b618:	4621      	mov	r1, r4
 800b61a:	9801      	ldr	r0, [sp, #4]
 800b61c:	462a      	mov	r2, r5
 800b61e:	f7fe f94f 	bl	80098c0 <__lshift>
 800b622:	1b7f      	subs	r7, r7, r5
 800b624:	4604      	mov	r4, r0
 800b626:	f100 0a14 	add.w	sl, r0, #20
 800b62a:	f04f 0900 	mov.w	r9, #0
 800b62e:	e7b8      	b.n	800b5a2 <__gethex+0x1b6>
 800b630:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b634:	42bd      	cmp	r5, r7
 800b636:	dd6f      	ble.n	800b718 <__gethex+0x32c>
 800b638:	1bed      	subs	r5, r5, r7
 800b63a:	42ae      	cmp	r6, r5
 800b63c:	dc34      	bgt.n	800b6a8 <__gethex+0x2bc>
 800b63e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b642:	2b02      	cmp	r3, #2
 800b644:	d022      	beq.n	800b68c <__gethex+0x2a0>
 800b646:	2b03      	cmp	r3, #3
 800b648:	d024      	beq.n	800b694 <__gethex+0x2a8>
 800b64a:	2b01      	cmp	r3, #1
 800b64c:	d115      	bne.n	800b67a <__gethex+0x28e>
 800b64e:	42ae      	cmp	r6, r5
 800b650:	d113      	bne.n	800b67a <__gethex+0x28e>
 800b652:	2e01      	cmp	r6, #1
 800b654:	d10b      	bne.n	800b66e <__gethex+0x282>
 800b656:	9a02      	ldr	r2, [sp, #8]
 800b658:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b65c:	6013      	str	r3, [r2, #0]
 800b65e:	2301      	movs	r3, #1
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	f8ca 3000 	str.w	r3, [sl]
 800b666:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b668:	2562      	movs	r5, #98	@ 0x62
 800b66a:	601c      	str	r4, [r3, #0]
 800b66c:	e73a      	b.n	800b4e4 <__gethex+0xf8>
 800b66e:	1e71      	subs	r1, r6, #1
 800b670:	4620      	mov	r0, r4
 800b672:	f7fe fb5e 	bl	8009d32 <__any_on>
 800b676:	2800      	cmp	r0, #0
 800b678:	d1ed      	bne.n	800b656 <__gethex+0x26a>
 800b67a:	9801      	ldr	r0, [sp, #4]
 800b67c:	4621      	mov	r1, r4
 800b67e:	f7fd ff07 	bl	8009490 <_Bfree>
 800b682:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b684:	2300      	movs	r3, #0
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	2550      	movs	r5, #80	@ 0x50
 800b68a:	e72b      	b.n	800b4e4 <__gethex+0xf8>
 800b68c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1f3      	bne.n	800b67a <__gethex+0x28e>
 800b692:	e7e0      	b.n	800b656 <__gethex+0x26a>
 800b694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1dd      	bne.n	800b656 <__gethex+0x26a>
 800b69a:	e7ee      	b.n	800b67a <__gethex+0x28e>
 800b69c:	0800be58 	.word	0x0800be58
 800b6a0:	0800bcf1 	.word	0x0800bcf1
 800b6a4:	0800c006 	.word	0x0800c006
 800b6a8:	1e6f      	subs	r7, r5, #1
 800b6aa:	f1b9 0f00 	cmp.w	r9, #0
 800b6ae:	d130      	bne.n	800b712 <__gethex+0x326>
 800b6b0:	b127      	cbz	r7, 800b6bc <__gethex+0x2d0>
 800b6b2:	4639      	mov	r1, r7
 800b6b4:	4620      	mov	r0, r4
 800b6b6:	f7fe fb3c 	bl	8009d32 <__any_on>
 800b6ba:	4681      	mov	r9, r0
 800b6bc:	117a      	asrs	r2, r7, #5
 800b6be:	2301      	movs	r3, #1
 800b6c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b6c4:	f007 071f 	and.w	r7, r7, #31
 800b6c8:	40bb      	lsls	r3, r7
 800b6ca:	4213      	tst	r3, r2
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	4620      	mov	r0, r4
 800b6d0:	bf18      	it	ne
 800b6d2:	f049 0902 	orrne.w	r9, r9, #2
 800b6d6:	f7ff fe21 	bl	800b31c <rshift>
 800b6da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b6de:	1b76      	subs	r6, r6, r5
 800b6e0:	2502      	movs	r5, #2
 800b6e2:	f1b9 0f00 	cmp.w	r9, #0
 800b6e6:	d047      	beq.n	800b778 <__gethex+0x38c>
 800b6e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6ec:	2b02      	cmp	r3, #2
 800b6ee:	d015      	beq.n	800b71c <__gethex+0x330>
 800b6f0:	2b03      	cmp	r3, #3
 800b6f2:	d017      	beq.n	800b724 <__gethex+0x338>
 800b6f4:	2b01      	cmp	r3, #1
 800b6f6:	d109      	bne.n	800b70c <__gethex+0x320>
 800b6f8:	f019 0f02 	tst.w	r9, #2
 800b6fc:	d006      	beq.n	800b70c <__gethex+0x320>
 800b6fe:	f8da 3000 	ldr.w	r3, [sl]
 800b702:	ea49 0903 	orr.w	r9, r9, r3
 800b706:	f019 0f01 	tst.w	r9, #1
 800b70a:	d10e      	bne.n	800b72a <__gethex+0x33e>
 800b70c:	f045 0510 	orr.w	r5, r5, #16
 800b710:	e032      	b.n	800b778 <__gethex+0x38c>
 800b712:	f04f 0901 	mov.w	r9, #1
 800b716:	e7d1      	b.n	800b6bc <__gethex+0x2d0>
 800b718:	2501      	movs	r5, #1
 800b71a:	e7e2      	b.n	800b6e2 <__gethex+0x2f6>
 800b71c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b71e:	f1c3 0301 	rsb	r3, r3, #1
 800b722:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0f0      	beq.n	800b70c <__gethex+0x320>
 800b72a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b72e:	f104 0314 	add.w	r3, r4, #20
 800b732:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b736:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b73a:	f04f 0c00 	mov.w	ip, #0
 800b73e:	4618      	mov	r0, r3
 800b740:	f853 2b04 	ldr.w	r2, [r3], #4
 800b744:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b748:	d01b      	beq.n	800b782 <__gethex+0x396>
 800b74a:	3201      	adds	r2, #1
 800b74c:	6002      	str	r2, [r0, #0]
 800b74e:	2d02      	cmp	r5, #2
 800b750:	f104 0314 	add.w	r3, r4, #20
 800b754:	d13c      	bne.n	800b7d0 <__gethex+0x3e4>
 800b756:	f8d8 2000 	ldr.w	r2, [r8]
 800b75a:	3a01      	subs	r2, #1
 800b75c:	42b2      	cmp	r2, r6
 800b75e:	d109      	bne.n	800b774 <__gethex+0x388>
 800b760:	1171      	asrs	r1, r6, #5
 800b762:	2201      	movs	r2, #1
 800b764:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b768:	f006 061f 	and.w	r6, r6, #31
 800b76c:	fa02 f606 	lsl.w	r6, r2, r6
 800b770:	421e      	tst	r6, r3
 800b772:	d13a      	bne.n	800b7ea <__gethex+0x3fe>
 800b774:	f045 0520 	orr.w	r5, r5, #32
 800b778:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b77a:	601c      	str	r4, [r3, #0]
 800b77c:	9b02      	ldr	r3, [sp, #8]
 800b77e:	601f      	str	r7, [r3, #0]
 800b780:	e6b0      	b.n	800b4e4 <__gethex+0xf8>
 800b782:	4299      	cmp	r1, r3
 800b784:	f843 cc04 	str.w	ip, [r3, #-4]
 800b788:	d8d9      	bhi.n	800b73e <__gethex+0x352>
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	459b      	cmp	fp, r3
 800b78e:	db17      	blt.n	800b7c0 <__gethex+0x3d4>
 800b790:	6861      	ldr	r1, [r4, #4]
 800b792:	9801      	ldr	r0, [sp, #4]
 800b794:	3101      	adds	r1, #1
 800b796:	f7fd fe3b 	bl	8009410 <_Balloc>
 800b79a:	4681      	mov	r9, r0
 800b79c:	b918      	cbnz	r0, 800b7a6 <__gethex+0x3ba>
 800b79e:	4b1a      	ldr	r3, [pc, #104]	@ (800b808 <__gethex+0x41c>)
 800b7a0:	4602      	mov	r2, r0
 800b7a2:	2184      	movs	r1, #132	@ 0x84
 800b7a4:	e6c5      	b.n	800b532 <__gethex+0x146>
 800b7a6:	6922      	ldr	r2, [r4, #16]
 800b7a8:	3202      	adds	r2, #2
 800b7aa:	f104 010c 	add.w	r1, r4, #12
 800b7ae:	0092      	lsls	r2, r2, #2
 800b7b0:	300c      	adds	r0, #12
 800b7b2:	f7ff fd69 	bl	800b288 <memcpy>
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	9801      	ldr	r0, [sp, #4]
 800b7ba:	f7fd fe69 	bl	8009490 <_Bfree>
 800b7be:	464c      	mov	r4, r9
 800b7c0:	6923      	ldr	r3, [r4, #16]
 800b7c2:	1c5a      	adds	r2, r3, #1
 800b7c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7c8:	6122      	str	r2, [r4, #16]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	615a      	str	r2, [r3, #20]
 800b7ce:	e7be      	b.n	800b74e <__gethex+0x362>
 800b7d0:	6922      	ldr	r2, [r4, #16]
 800b7d2:	455a      	cmp	r2, fp
 800b7d4:	dd0b      	ble.n	800b7ee <__gethex+0x402>
 800b7d6:	2101      	movs	r1, #1
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f7ff fd9f 	bl	800b31c <rshift>
 800b7de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7e2:	3701      	adds	r7, #1
 800b7e4:	42bb      	cmp	r3, r7
 800b7e6:	f6ff aee0 	blt.w	800b5aa <__gethex+0x1be>
 800b7ea:	2501      	movs	r5, #1
 800b7ec:	e7c2      	b.n	800b774 <__gethex+0x388>
 800b7ee:	f016 061f 	ands.w	r6, r6, #31
 800b7f2:	d0fa      	beq.n	800b7ea <__gethex+0x3fe>
 800b7f4:	4453      	add	r3, sl
 800b7f6:	f1c6 0620 	rsb	r6, r6, #32
 800b7fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b7fe:	f7fd fef9 	bl	80095f4 <__hi0bits>
 800b802:	42b0      	cmp	r0, r6
 800b804:	dbe7      	blt.n	800b7d6 <__gethex+0x3ea>
 800b806:	e7f0      	b.n	800b7ea <__gethex+0x3fe>
 800b808:	0800bcf1 	.word	0x0800bcf1

0800b80c <L_shift>:
 800b80c:	f1c2 0208 	rsb	r2, r2, #8
 800b810:	0092      	lsls	r2, r2, #2
 800b812:	b570      	push	{r4, r5, r6, lr}
 800b814:	f1c2 0620 	rsb	r6, r2, #32
 800b818:	6843      	ldr	r3, [r0, #4]
 800b81a:	6804      	ldr	r4, [r0, #0]
 800b81c:	fa03 f506 	lsl.w	r5, r3, r6
 800b820:	432c      	orrs	r4, r5
 800b822:	40d3      	lsrs	r3, r2
 800b824:	6004      	str	r4, [r0, #0]
 800b826:	f840 3f04 	str.w	r3, [r0, #4]!
 800b82a:	4288      	cmp	r0, r1
 800b82c:	d3f4      	bcc.n	800b818 <L_shift+0xc>
 800b82e:	bd70      	pop	{r4, r5, r6, pc}

0800b830 <__match>:
 800b830:	b530      	push	{r4, r5, lr}
 800b832:	6803      	ldr	r3, [r0, #0]
 800b834:	3301      	adds	r3, #1
 800b836:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b83a:	b914      	cbnz	r4, 800b842 <__match+0x12>
 800b83c:	6003      	str	r3, [r0, #0]
 800b83e:	2001      	movs	r0, #1
 800b840:	bd30      	pop	{r4, r5, pc}
 800b842:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b846:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b84a:	2d19      	cmp	r5, #25
 800b84c:	bf98      	it	ls
 800b84e:	3220      	addls	r2, #32
 800b850:	42a2      	cmp	r2, r4
 800b852:	d0f0      	beq.n	800b836 <__match+0x6>
 800b854:	2000      	movs	r0, #0
 800b856:	e7f3      	b.n	800b840 <__match+0x10>

0800b858 <__hexnan>:
 800b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b85c:	680b      	ldr	r3, [r1, #0]
 800b85e:	6801      	ldr	r1, [r0, #0]
 800b860:	115e      	asrs	r6, r3, #5
 800b862:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b866:	f013 031f 	ands.w	r3, r3, #31
 800b86a:	b087      	sub	sp, #28
 800b86c:	bf18      	it	ne
 800b86e:	3604      	addne	r6, #4
 800b870:	2500      	movs	r5, #0
 800b872:	1f37      	subs	r7, r6, #4
 800b874:	4682      	mov	sl, r0
 800b876:	4690      	mov	r8, r2
 800b878:	9301      	str	r3, [sp, #4]
 800b87a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b87e:	46b9      	mov	r9, r7
 800b880:	463c      	mov	r4, r7
 800b882:	9502      	str	r5, [sp, #8]
 800b884:	46ab      	mov	fp, r5
 800b886:	784a      	ldrb	r2, [r1, #1]
 800b888:	1c4b      	adds	r3, r1, #1
 800b88a:	9303      	str	r3, [sp, #12]
 800b88c:	b342      	cbz	r2, 800b8e0 <__hexnan+0x88>
 800b88e:	4610      	mov	r0, r2
 800b890:	9105      	str	r1, [sp, #20]
 800b892:	9204      	str	r2, [sp, #16]
 800b894:	f7ff fd94 	bl	800b3c0 <__hexdig_fun>
 800b898:	2800      	cmp	r0, #0
 800b89a:	d151      	bne.n	800b940 <__hexnan+0xe8>
 800b89c:	9a04      	ldr	r2, [sp, #16]
 800b89e:	9905      	ldr	r1, [sp, #20]
 800b8a0:	2a20      	cmp	r2, #32
 800b8a2:	d818      	bhi.n	800b8d6 <__hexnan+0x7e>
 800b8a4:	9b02      	ldr	r3, [sp, #8]
 800b8a6:	459b      	cmp	fp, r3
 800b8a8:	dd13      	ble.n	800b8d2 <__hexnan+0x7a>
 800b8aa:	454c      	cmp	r4, r9
 800b8ac:	d206      	bcs.n	800b8bc <__hexnan+0x64>
 800b8ae:	2d07      	cmp	r5, #7
 800b8b0:	dc04      	bgt.n	800b8bc <__hexnan+0x64>
 800b8b2:	462a      	mov	r2, r5
 800b8b4:	4649      	mov	r1, r9
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	f7ff ffa8 	bl	800b80c <L_shift>
 800b8bc:	4544      	cmp	r4, r8
 800b8be:	d952      	bls.n	800b966 <__hexnan+0x10e>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	f1a4 0904 	sub.w	r9, r4, #4
 800b8c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8ca:	f8cd b008 	str.w	fp, [sp, #8]
 800b8ce:	464c      	mov	r4, r9
 800b8d0:	461d      	mov	r5, r3
 800b8d2:	9903      	ldr	r1, [sp, #12]
 800b8d4:	e7d7      	b.n	800b886 <__hexnan+0x2e>
 800b8d6:	2a29      	cmp	r2, #41	@ 0x29
 800b8d8:	d157      	bne.n	800b98a <__hexnan+0x132>
 800b8da:	3102      	adds	r1, #2
 800b8dc:	f8ca 1000 	str.w	r1, [sl]
 800b8e0:	f1bb 0f00 	cmp.w	fp, #0
 800b8e4:	d051      	beq.n	800b98a <__hexnan+0x132>
 800b8e6:	454c      	cmp	r4, r9
 800b8e8:	d206      	bcs.n	800b8f8 <__hexnan+0xa0>
 800b8ea:	2d07      	cmp	r5, #7
 800b8ec:	dc04      	bgt.n	800b8f8 <__hexnan+0xa0>
 800b8ee:	462a      	mov	r2, r5
 800b8f0:	4649      	mov	r1, r9
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	f7ff ff8a 	bl	800b80c <L_shift>
 800b8f8:	4544      	cmp	r4, r8
 800b8fa:	d936      	bls.n	800b96a <__hexnan+0x112>
 800b8fc:	f1a8 0204 	sub.w	r2, r8, #4
 800b900:	4623      	mov	r3, r4
 800b902:	f853 1b04 	ldr.w	r1, [r3], #4
 800b906:	f842 1f04 	str.w	r1, [r2, #4]!
 800b90a:	429f      	cmp	r7, r3
 800b90c:	d2f9      	bcs.n	800b902 <__hexnan+0xaa>
 800b90e:	1b3b      	subs	r3, r7, r4
 800b910:	f023 0303 	bic.w	r3, r3, #3
 800b914:	3304      	adds	r3, #4
 800b916:	3401      	adds	r4, #1
 800b918:	3e03      	subs	r6, #3
 800b91a:	42b4      	cmp	r4, r6
 800b91c:	bf88      	it	hi
 800b91e:	2304      	movhi	r3, #4
 800b920:	4443      	add	r3, r8
 800b922:	2200      	movs	r2, #0
 800b924:	f843 2b04 	str.w	r2, [r3], #4
 800b928:	429f      	cmp	r7, r3
 800b92a:	d2fb      	bcs.n	800b924 <__hexnan+0xcc>
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	b91b      	cbnz	r3, 800b938 <__hexnan+0xe0>
 800b930:	4547      	cmp	r7, r8
 800b932:	d128      	bne.n	800b986 <__hexnan+0x12e>
 800b934:	2301      	movs	r3, #1
 800b936:	603b      	str	r3, [r7, #0]
 800b938:	2005      	movs	r0, #5
 800b93a:	b007      	add	sp, #28
 800b93c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b940:	3501      	adds	r5, #1
 800b942:	2d08      	cmp	r5, #8
 800b944:	f10b 0b01 	add.w	fp, fp, #1
 800b948:	dd06      	ble.n	800b958 <__hexnan+0x100>
 800b94a:	4544      	cmp	r4, r8
 800b94c:	d9c1      	bls.n	800b8d2 <__hexnan+0x7a>
 800b94e:	2300      	movs	r3, #0
 800b950:	f844 3c04 	str.w	r3, [r4, #-4]
 800b954:	2501      	movs	r5, #1
 800b956:	3c04      	subs	r4, #4
 800b958:	6822      	ldr	r2, [r4, #0]
 800b95a:	f000 000f 	and.w	r0, r0, #15
 800b95e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b962:	6020      	str	r0, [r4, #0]
 800b964:	e7b5      	b.n	800b8d2 <__hexnan+0x7a>
 800b966:	2508      	movs	r5, #8
 800b968:	e7b3      	b.n	800b8d2 <__hexnan+0x7a>
 800b96a:	9b01      	ldr	r3, [sp, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0dd      	beq.n	800b92c <__hexnan+0xd4>
 800b970:	f1c3 0320 	rsb	r3, r3, #32
 800b974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b978:	40da      	lsrs	r2, r3
 800b97a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b97e:	4013      	ands	r3, r2
 800b980:	f846 3c04 	str.w	r3, [r6, #-4]
 800b984:	e7d2      	b.n	800b92c <__hexnan+0xd4>
 800b986:	3f04      	subs	r7, #4
 800b988:	e7d0      	b.n	800b92c <__hexnan+0xd4>
 800b98a:	2004      	movs	r0, #4
 800b98c:	e7d5      	b.n	800b93a <__hexnan+0xe2>

0800b98e <__ascii_mbtowc>:
 800b98e:	b082      	sub	sp, #8
 800b990:	b901      	cbnz	r1, 800b994 <__ascii_mbtowc+0x6>
 800b992:	a901      	add	r1, sp, #4
 800b994:	b142      	cbz	r2, 800b9a8 <__ascii_mbtowc+0x1a>
 800b996:	b14b      	cbz	r3, 800b9ac <__ascii_mbtowc+0x1e>
 800b998:	7813      	ldrb	r3, [r2, #0]
 800b99a:	600b      	str	r3, [r1, #0]
 800b99c:	7812      	ldrb	r2, [r2, #0]
 800b99e:	1e10      	subs	r0, r2, #0
 800b9a0:	bf18      	it	ne
 800b9a2:	2001      	movne	r0, #1
 800b9a4:	b002      	add	sp, #8
 800b9a6:	4770      	bx	lr
 800b9a8:	4610      	mov	r0, r2
 800b9aa:	e7fb      	b.n	800b9a4 <__ascii_mbtowc+0x16>
 800b9ac:	f06f 0001 	mvn.w	r0, #1
 800b9b0:	e7f8      	b.n	800b9a4 <__ascii_mbtowc+0x16>

0800b9b2 <_realloc_r>:
 800b9b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b6:	4680      	mov	r8, r0
 800b9b8:	4615      	mov	r5, r2
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	b921      	cbnz	r1, 800b9c8 <_realloc_r+0x16>
 800b9be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	f7fd bc98 	b.w	80092f8 <_malloc_r>
 800b9c8:	b92a      	cbnz	r2, 800b9d6 <_realloc_r+0x24>
 800b9ca:	f7fd fc21 	bl	8009210 <_free_r>
 800b9ce:	2400      	movs	r4, #0
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d6:	f000 f840 	bl	800ba5a <_malloc_usable_size_r>
 800b9da:	4285      	cmp	r5, r0
 800b9dc:	4606      	mov	r6, r0
 800b9de:	d802      	bhi.n	800b9e6 <_realloc_r+0x34>
 800b9e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b9e4:	d8f4      	bhi.n	800b9d0 <_realloc_r+0x1e>
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	4640      	mov	r0, r8
 800b9ea:	f7fd fc85 	bl	80092f8 <_malloc_r>
 800b9ee:	4607      	mov	r7, r0
 800b9f0:	2800      	cmp	r0, #0
 800b9f2:	d0ec      	beq.n	800b9ce <_realloc_r+0x1c>
 800b9f4:	42b5      	cmp	r5, r6
 800b9f6:	462a      	mov	r2, r5
 800b9f8:	4621      	mov	r1, r4
 800b9fa:	bf28      	it	cs
 800b9fc:	4632      	movcs	r2, r6
 800b9fe:	f7ff fc43 	bl	800b288 <memcpy>
 800ba02:	4621      	mov	r1, r4
 800ba04:	4640      	mov	r0, r8
 800ba06:	f7fd fc03 	bl	8009210 <_free_r>
 800ba0a:	463c      	mov	r4, r7
 800ba0c:	e7e0      	b.n	800b9d0 <_realloc_r+0x1e>

0800ba0e <__ascii_wctomb>:
 800ba0e:	4603      	mov	r3, r0
 800ba10:	4608      	mov	r0, r1
 800ba12:	b141      	cbz	r1, 800ba26 <__ascii_wctomb+0x18>
 800ba14:	2aff      	cmp	r2, #255	@ 0xff
 800ba16:	d904      	bls.n	800ba22 <__ascii_wctomb+0x14>
 800ba18:	228a      	movs	r2, #138	@ 0x8a
 800ba1a:	601a      	str	r2, [r3, #0]
 800ba1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba20:	4770      	bx	lr
 800ba22:	700a      	strb	r2, [r1, #0]
 800ba24:	2001      	movs	r0, #1
 800ba26:	4770      	bx	lr

0800ba28 <fiprintf>:
 800ba28:	b40e      	push	{r1, r2, r3}
 800ba2a:	b503      	push	{r0, r1, lr}
 800ba2c:	4601      	mov	r1, r0
 800ba2e:	ab03      	add	r3, sp, #12
 800ba30:	4805      	ldr	r0, [pc, #20]	@ (800ba48 <fiprintf+0x20>)
 800ba32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba36:	6800      	ldr	r0, [r0, #0]
 800ba38:	9301      	str	r3, [sp, #4]
 800ba3a:	f7ff f9a1 	bl	800ad80 <_vfiprintf_r>
 800ba3e:	b002      	add	sp, #8
 800ba40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba44:	b003      	add	sp, #12
 800ba46:	4770      	bx	lr
 800ba48:	20000018 	.word	0x20000018

0800ba4c <abort>:
 800ba4c:	b508      	push	{r3, lr}
 800ba4e:	2006      	movs	r0, #6
 800ba50:	f000 f834 	bl	800babc <raise>
 800ba54:	2001      	movs	r0, #1
 800ba56:	f7f6 f9d9 	bl	8001e0c <_exit>

0800ba5a <_malloc_usable_size_r>:
 800ba5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba5e:	1f18      	subs	r0, r3, #4
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bfbc      	itt	lt
 800ba64:	580b      	ldrlt	r3, [r1, r0]
 800ba66:	18c0      	addlt	r0, r0, r3
 800ba68:	4770      	bx	lr

0800ba6a <_raise_r>:
 800ba6a:	291f      	cmp	r1, #31
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4605      	mov	r5, r0
 800ba70:	460c      	mov	r4, r1
 800ba72:	d904      	bls.n	800ba7e <_raise_r+0x14>
 800ba74:	2316      	movs	r3, #22
 800ba76:	6003      	str	r3, [r0, #0]
 800ba78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ba7c:	bd38      	pop	{r3, r4, r5, pc}
 800ba7e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba80:	b112      	cbz	r2, 800ba88 <_raise_r+0x1e>
 800ba82:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba86:	b94b      	cbnz	r3, 800ba9c <_raise_r+0x32>
 800ba88:	4628      	mov	r0, r5
 800ba8a:	f000 f831 	bl	800baf0 <_getpid_r>
 800ba8e:	4622      	mov	r2, r4
 800ba90:	4601      	mov	r1, r0
 800ba92:	4628      	mov	r0, r5
 800ba94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba98:	f000 b818 	b.w	800bacc <_kill_r>
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d00a      	beq.n	800bab6 <_raise_r+0x4c>
 800baa0:	1c59      	adds	r1, r3, #1
 800baa2:	d103      	bne.n	800baac <_raise_r+0x42>
 800baa4:	2316      	movs	r3, #22
 800baa6:	6003      	str	r3, [r0, #0]
 800baa8:	2001      	movs	r0, #1
 800baaa:	e7e7      	b.n	800ba7c <_raise_r+0x12>
 800baac:	2100      	movs	r1, #0
 800baae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bab2:	4620      	mov	r0, r4
 800bab4:	4798      	blx	r3
 800bab6:	2000      	movs	r0, #0
 800bab8:	e7e0      	b.n	800ba7c <_raise_r+0x12>
	...

0800babc <raise>:
 800babc:	4b02      	ldr	r3, [pc, #8]	@ (800bac8 <raise+0xc>)
 800babe:	4601      	mov	r1, r0
 800bac0:	6818      	ldr	r0, [r3, #0]
 800bac2:	f7ff bfd2 	b.w	800ba6a <_raise_r>
 800bac6:	bf00      	nop
 800bac8:	20000018 	.word	0x20000018

0800bacc <_kill_r>:
 800bacc:	b538      	push	{r3, r4, r5, lr}
 800bace:	4d07      	ldr	r5, [pc, #28]	@ (800baec <_kill_r+0x20>)
 800bad0:	2300      	movs	r3, #0
 800bad2:	4604      	mov	r4, r0
 800bad4:	4608      	mov	r0, r1
 800bad6:	4611      	mov	r1, r2
 800bad8:	602b      	str	r3, [r5, #0]
 800bada:	f7f6 f987 	bl	8001dec <_kill>
 800bade:	1c43      	adds	r3, r0, #1
 800bae0:	d102      	bne.n	800bae8 <_kill_r+0x1c>
 800bae2:	682b      	ldr	r3, [r5, #0]
 800bae4:	b103      	cbz	r3, 800bae8 <_kill_r+0x1c>
 800bae6:	6023      	str	r3, [r4, #0]
 800bae8:	bd38      	pop	{r3, r4, r5, pc}
 800baea:	bf00      	nop
 800baec:	20000644 	.word	0x20000644

0800baf0 <_getpid_r>:
 800baf0:	f7f6 b974 	b.w	8001ddc <_getpid>

0800baf4 <_init>:
 800baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf6:	bf00      	nop
 800baf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bafa:	bc08      	pop	{r3}
 800bafc:	469e      	mov	lr, r3
 800bafe:	4770      	bx	lr

0800bb00 <_fini>:
 800bb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb02:	bf00      	nop
 800bb04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb06:	bc08      	pop	{r3}
 800bb08:	469e      	mov	lr, r3
 800bb0a:	4770      	bx	lr
